
################################################################################
## 01/09/2018 10:59:04: Log Start PID=142016
################################################################################

*Debug 01/09 10:59:04.842 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --PROCESSING EVENT--: 'SetObj Response' in  state 'Set Objective Request'
*Debug 01/09 10:59:04.842 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STOPPING TIMER-- for state'Set Objective Request'
*Debug 01/09 10:59:04.844 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXITING STATE--:'Set Objective Request'
*Debug 01/09 10:59:04.844 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXECUTING TRANSITION--:'Generic: transition=GotKseResponse guard=CheckIfAllPortsDone' in state 'Set Objective Request'
*Debug 01/09 10:59:04.844 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT PROCESSED--: 'SetObj Response' Result='Handled' in state 'Set Objective Request'
*Debug 01/09 10:59:04.845 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --ENTERING STATE--:'Configured'
*Debug 01/09 10:59:04.845 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STATE CHANGED-- from 'Set Objective Request' to 'Configured' after handling event 'SetObj Response'
*Debug 01/09 10:59:04.915 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:04.915 Community Controller Traffic1@Network1: event ID received =  Community Controller: Activity Configured
*Debug 01/09 10:59:04.915 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Activity Configured
*Debug 01/09 10:59:04.915 Community Controller Traffic1@Network1: Activities Configured Successfully for the community: Traffic1@Network1
*Debug 01/09 10:59:04.915 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Activity Configured
*Debug 01/09 10:59:04.915 ixFSM:   *** FSM Community Controller Traffic1@Network1 --INTERNAL EVENT. STAYING IN STATE--:  Community Controller: CONFIGURING Activities  
*Debug 01/09 10:59:04.917 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:04.917 Community Controller Traffic1@Network1: event ID received =  Community Controller: Send Global Config Complete Request
*Debug 01/09 10:59:04.917 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Send Global Config Complete Request
*Debug 01/09 10:59:04.917 ixKseCommunicator Global: Sending on ports [(1,1,2)]:'<ixlagent-complete-configuration-request request-id="1515475728" activityName="Global" port-id="0"/>'.
*Debug 01/09 10:59:04.917 Community Controller: Port Id 192.168.31.42;1;2 timer added.
*Debug 01/09 10:59:04.917 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Send Global Config Complete Request
*Debug 01/09 10:59:04.917 ixFSM:   *** FSM Community Controller Traffic1@Network1 --INTERNAL EVENT. STAYING IN STATE--:  Community Controller: CONFIGURING Activities  
*Debug 01/09 10:59:05.69 ixKseCommunicator Global: Got from port (1,1,2): '<ixlagent-complete-configuration-response request-id="1515475728" activityName="Global" port-id="0"/>'
*Debug 01/09 10:59:05.69 ixKseCommunicator Global: Handling ixlagent message from port (1,1,2): '<ixlagent-complete-configuration-response request-id="1515475728" activityName="Global" port-id="0"/>'
*Debug 01/09 10:59:05.69 Traffic1@Network1: Traffic1@Network1: got response for requestType complete-configuration on port 0
*Debug 01/09 10:59:05.69 Community Controller: Port Id 192.168.31.42;1;2 task done.
*Debug 01/09 10:59:05.118 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:05.118 Community Controller Traffic1@Network1: event ID received =  Community Controller: Community traffic destinations configured successfully
*Debug 01/09 10:59:05.118 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Community traffic destinations configured successfully
*Debug 01/09 10:59:05.118 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Community traffic destinations configured successfully
*Debug 01/09 10:59:05.118 ixFSM:   *** FSM Community Controller Traffic1@Network1 --INTERNAL EVENT. STAYING IN STATE--:  Community Controller: CONFIGURING Activities  
*Debug 01/09 10:59:05.118 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:05.118 Community Controller Traffic1@Network1: event ID received =  Community Controller: Networks updated
*Debug 01/09 10:59:05.118 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Networks updated
*Debug 01/09 10:59:05.118 Community Controller Traffic1@Network1: Community Controller FSM: EXIT Action for the State: CONFIGURING ACTIVITIES :: Traffic1@Network1 
*Debug 01/09 10:59:05.118 Test Controller: testName = Test1 ; stateName =  TestController: CONFIGURE TRAFFIC DESTINATIONS  ; eventId =  Community Controller: Community traffic activities configured successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:05.119 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Networks updated
*Debug 01/09 10:59:05.119 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EXITING STATE--:  Community Controller: CONFIGURING Activities  
*Debug 01/09 10:59:05.119 ixFSM:   *** FSM Community Controller Traffic1@Network1 --ENTERING STATE--:  Community Controller: Wait For InfoProvider
*Debug 01/09 10:59:05.119 Community Controller Traffic1@Network1: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic1@Network1, TEST NAME: Test1, PREV STATE: 'Community Controller: CONFIGURING Activities', EVENT RECEIVED:  Community Controller: Networks updated
  NEW STATE: 'Community Controller: Wait For InfoProvider', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:05.121 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:05.121 Community Controller Traffic1@Network1: event ID received =  Community Controller: InfoProvider Configured
*Debug 01/09 10:59:05.121 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: InfoProvider Configured
*Debug 01/09 10:59:05.121 Community Controller Traffic1@Network1: Community Controller FSM: EXIT Action for the State: WaitForInfoProvider :: Traffic1@Network1 
*Debug 01/09 10:59:05.121 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: InfoProvider Configured
*Debug 01/09 10:59:05.121 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EXITING STATE--:  Community Controller: Wait For InfoProvider
*Debug 01/09 10:59:05.121 ixFSM:   *** FSM Community Controller Traffic1@Network1 --ENTERING STATE--:  Community Controller: CONFIGURED           
*Debug 01/09 10:59:05.121 Community Controller Traffic1@Network1: Community Controller FSM: ENTRY Action for the State: CONFIGURED  :: Traffic1@Network1 
*Debug 01/09 10:59:05.121 Community Controller: Clearing cache on Traffic1@Network1
*Debug 01/09 10:59:05.121 Community Controller: Community cache cleared on Traffic1@Network1 .
*Debug 01/09 10:59:05.121 Community Controller Traffic1@Network1: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic1@Network1, TEST NAME: Test1, PREV STATE: 'Community Controller: Wait For InfoProvider', EVENT RECEIVED:  Community Controller: InfoProvider Configured
  NEW STATE: 'Community Controller: CONFIGURED', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:05.130 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:05.130 Test Controller: event ID received =  Community Controller: Community traffic activities configured successfully
*Debug 01/09 10:59:05.130 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  Community Controller: Community traffic activities configured successfully
*Debug 01/09 10:59:05.130 Test Controller: Test Controller FSM: Internal Transition Action: checkAllCommDestinationsConfigured()
*Debug 01/09 10:59:05.130 Test Controller: Configured destinations for 1 of 2 communities
*Debug 01/09 10:59:05.130 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  Community Controller: Community traffic activities configured successfully
*Debug 01/09 10:59:05.131 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: CONFIGURE TRAFFIC DESTINATIONS  
*Debug 01/09 10:59:06.145 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:06.145 Community Controller Traffic2@Network2: event ID received =  Community Controller: Activity Configured
*Debug 01/09 10:59:06.145 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: Activity Configured
*Debug 01/09 10:59:06.145 Community Controller Traffic2@Network2: Activities Configured Successfully for the community: Traffic2@Network2
*Debug 01/09 10:59:06.145 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: Activity Configured
*Debug 01/09 10:59:06.145 ixFSM:   *** FSM Community Controller Traffic2@Network2 --INTERNAL EVENT. STAYING IN STATE--:  Community Controller: CONFIGURING Activities  
*Debug 01/09 10:59:06.145 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:06.145 Community Controller Traffic2@Network2: event ID received =  Community Controller: Send Global Config Complete Request
*Debug 01/09 10:59:06.147 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: Send Global Config Complete Request
*Debug 01/09 10:59:06.147 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: Send Global Config Complete Request
*Debug 01/09 10:59:06.147 ixFSM:   *** FSM Community Controller Traffic2@Network2 --INTERNAL EVENT. STAYING IN STATE--:  Community Controller: CONFIGURING Activities  
*Debug 01/09 10:59:06.147 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:06.147 Community Controller Traffic2@Network2: event ID received =  Community Controller: Community traffic destinations configured successfully
*Debug 01/09 10:59:06.147 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: Community traffic destinations configured successfully
*Debug 01/09 10:59:06.147 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: Community traffic destinations configured successfully
*Debug 01/09 10:59:06.148 ixFSM:   *** FSM Community Controller Traffic2@Network2 --INTERNAL EVENT. STAYING IN STATE--:  Community Controller: CONFIGURING Activities  
*Debug 01/09 10:59:06.148 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:06.148 Community Controller Traffic2@Network2: event ID received =  Community Controller: Networks updated
*Debug 01/09 10:59:06.148 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: Networks updated
*Debug 01/09 10:59:06.148 Community Controller Traffic2@Network2: Community Controller FSM: EXIT Action for the State: CONFIGURING ACTIVITIES :: Traffic2@Network2 
*Debug 01/09 10:59:06.148 Test Controller: testName = Test1 ; stateName =  TestController: CONFIGURE TRAFFIC DESTINATIONS  ; eventId =  Community Controller: Community traffic activities configured successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:06.148 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: Networks updated
*Debug 01/09 10:59:06.148 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EXITING STATE--:  Community Controller: CONFIGURING Activities  
*Debug 01/09 10:59:06.148 ixFSM:   *** FSM Community Controller Traffic2@Network2 --ENTERING STATE--:  Community Controller: Wait For InfoProvider
*Debug 01/09 10:59:06.148 Community Controller Traffic2@Network2: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic2@Network2, TEST NAME: Test1, PREV STATE: 'Community Controller: CONFIGURING Activities', EVENT RECEIVED:  Community Controller: Networks updated
  NEW STATE: 'Community Controller: Wait For InfoProvider', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:06.148 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:06.148 Community Controller Traffic2@Network2: event ID received =  Community Controller: InfoProvider Configured
*Debug 01/09 10:59:06.148 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: InfoProvider Configured
*Debug 01/09 10:59:06.148 Community Controller Traffic2@Network2: Community Controller FSM: EXIT Action for the State: WaitForInfoProvider :: Traffic2@Network2 
*Debug 01/09 10:59:06.148 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: InfoProvider Configured
*Debug 01/09 10:59:06.150 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EXITING STATE--:  Community Controller: Wait For InfoProvider
*Debug 01/09 10:59:06.150 ixFSM:   *** FSM Community Controller Traffic2@Network2 --ENTERING STATE--:  Community Controller: CONFIGURED           
*Debug 01/09 10:59:06.150 Community Controller Traffic2@Network2: Community Controller FSM: ENTRY Action for the State: CONFIGURED  :: Traffic2@Network2 
*Debug 01/09 10:59:06.150 Community Controller: Clearing cache on Traffic2@Network2
*Debug 01/09 10:59:06.150 Community Controller: Community cache cleared on Traffic2@Network2 .
*Debug 01/09 10:59:06.150 Community Controller Traffic2@Network2: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic2@Network2, TEST NAME: Test1, PREV STATE: 'Community Controller: Wait For InfoProvider', EVENT RECEIVED:  Community Controller: InfoProvider Configured
  NEW STATE: 'Community Controller: CONFIGURED', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:06.230 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:06.230 Test Controller: event ID received =  Community Controller: Community traffic activities configured successfully
*Debug 01/09 10:59:06.230 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  Community Controller: Community traffic activities configured successfully
*Debug 01/09 10:59:06.230 Test Controller: Test Controller FSM: Internal Transition Action: checkAllCommDestinationsConfigured()
*Debug 01/09 10:59:06.230 Test Controller: Configured destinations for 2 of 2 communities
*Debug 01/09 10:59:06.230 Port Event Viewer: PortEventHandler enabled on [] but disabled on ['']
*Debug 01/09 10:59:06.230 Test Controller: testName = Test1 ; stateName =  TestController: CONFIGURE TRAFFIC DESTINATIONS  ; eventId =  TestController: All Communities Destinations Configured Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:06.232 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  Community Controller: Community traffic activities configured successfully
*Debug 01/09 10:59:06.232 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: CONFIGURE TRAFFIC DESTINATIONS  
*Debug 01/09 10:59:06.232 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:06.232 Test Controller: event ID received =  TestController: All Communities Destinations Configured Successfully
*Debug 01/09 10:59:06.232 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: All Communities Destinations Configured Successfully
*Debug 01/09 10:59:06.293 Test Controller: Test Controller FSM: EXIT Action for the State: CONFIGURE TRAFFIC DESTINATIONS
*Debug 01/09 10:59:06.315 Stat Controller: configSvAfterTestConfigured testEnvelopeChanged = False
*Debug 01/09 10:59:06.371 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: All Communities Destinations Configured Successfully
*Debug 01/09 10:59:06.371 ixFSM:   *** FSM Test Controller --EXITING STATE--:  TestController: CONFIGURE TRAFFIC DESTINATIONS  
*Debug 01/09 10:59:06.371 ixFSM:   *** FSM Test Controller --ENTERING STATE--:  TestController: FINAL CONFIGURATION             
*Debug 01/09 10:59:06.371 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:06.371 Test Controller:              PUBLISHING PRESTATE CHANGE EVENT       
*Debug 01/09 10:59:06.371 Test Controller:  PUBLISHING STATE : [ TestController: FINAL CONFIGURATION             ]
*Debug 01/09 10:59:06.371 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:06.371 Test Controller : ixRunStateHandler received event  TestController: FINAL CONFIGURATION             
*Debug 01/09 10:59:06.436 Test Controller: Test Controller FSM: ENTRY Action for the State: FINAL CONFIGURATION
*Debug 01/09 10:59:06.437 Test Controller: self._gatewayArpRequired= False
*Debug 01/09 10:59:06.437 Test Controller: testName = Test1 ; stateName =  TestController: FINAL CONFIGURATION             ; eventId =  TestController: Configuration Finalized Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:06.486 Test Controller: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Test Controller, TEST NAME: Test1, PREV STATE: 'TestController: CONFIGURE TRAFFIC DESTINATIONS', EVENT RECEIVED:  TestController: All Communities Destinations Configured Successfully
  NEW STATE: 'TestController: FINAL CONFIGURATION', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:06.486 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:06.486 Test Controller: event ID received =  TestController: Configuration Finalized Successfully
*Debug 01/09 10:59:06.486 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: Configuration Finalized Successfully
*Debug 01/09 10:59:06.486 Test Controller: Test Controller FSM: Internal Transition Action: configurationCompleted()
*Debug 01/09 10:59:06.486 Test Controller: [ Stopping the Configuring Watch Dog Timer. ] Timer ID = 1
*Debug 01/09 10:59:06.486 Event Scheduler: REMOVE Event(). Removing Event Index 1
*Debug 01/09 10:59:06.486 Event Scheduler: Stopping the timer: Event Index 1, timer (1515480640.8260002, 0, <bound method ixEventScheduler.callback of <Lib.Common.ixEventScheduler.ixEventScheduler object at 0x2EAB1350>>, (1,))
*Debug 01/09 10:59:06.486 Event Scheduler: deleting the event 1
*Debug 01/09 10:59:06.496 Stat Controller: Stat Manager RefreshQueryEngineProfile
*Debug 01/09 10:59:06.634 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: Configuration Finalized Successfully
*Debug 01/09 10:59:06.634 ixFSM:   *** FSM Test Controller --EXITING STATE--:  TestController: FINAL CONFIGURATION             
*Debug 01/09 10:59:06.634 ixFSM:   *** FSM Test Controller --ENTERING STATE--:  TestController: RUN INIT                        
*Debug 01/09 10:59:06.634 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:06.635 Test Controller:              PUBLISHING PRESTATE CHANGE EVENT       
*Debug 01/09 10:59:06.635 Test Controller:  PUBLISHING STATE : [ TestController: RUN INIT                        ]
*Debug 01/09 10:59:06.635 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:06.635 Test Controller : ixRunStateHandler received event  TestController: RUN INIT                        
*Debug 01/09 10:59:06.716 Test Controller: Test Controller FSM: ENTRY Action for the State: RUN INIT
*Debug 01/09 10:59:06.716 IxAnalyzer : Analyzer - set test state - 2
*Debug 01/09 10:59:06.717 Test Controller: Memory Trim Timer fired. Trimming working set.
*Debug 01/09 10:59:06.753 Test Controller: Memory Trim complete.
*Debug 01/09 10:59:06.753 Test Controller: Checking free disk space: freeToUser=65120657408; total=243086127104 totalFree=65120657408. StopTest Limit=536870912.0. Warning Limit=1073741824.0.
*Debug 01/09 10:59:06.755 Test Controller: Drive C: has 60.65 GB of free disk space
*Debug 01/09 10:59:06.755 Test Controller : checkLinkStateAllPorts()
*Debug 01/09 10:59:06.755 Network Network2: checkLinkState()
*Debug 01/09 10:59:06.756 Chassis Chain: Updating link states for ports [(1,1,3)]
*Debug 01/09 10:59:06.798 Chassis Chain: GetPortInformation returning result=None, portVector=Ixia.Aptixia.ChassisManager.stubs.ChassisConfig+PortVector_V3, portInfo=Ixia.Aptixia.ChassisManager.stubs.ChassisConfig+StringVector
*Debug 01/09 10:59:06.799 Chassis Chain: port 192.168.31.42;1;3 link state = 0
*Debug 01/09 10:59:06.799 Network: ##### Removing port from portList (1,1,3)
*Debug 01/09 10:59:06.799 Chassis Chain: Total wait time for ports to link up = 0.0429999828339, max wait time = 30
*Debug 01/09 10:59:06.799 Network Network2: checkLinkState() returning []
*Debug 01/09 10:59:06.799 Network Network1: checkLinkState()
*Debug 01/09 10:59:06.799 Chassis Chain: Updating link states for ports [(1,1,2)]
*Debug 01/09 10:59:06.819 Chassis Chain: GetPortInformation returning result=None, portVector=Ixia.Aptixia.ChassisManager.stubs.ChassisConfig+PortVector_V3, portInfo=Ixia.Aptixia.ChassisManager.stubs.ChassisConfig+StringVector
*Debug 01/09 10:59:06.819 Chassis Chain: port 192.168.31.42;1;2 link state = 0
*Debug 01/09 10:59:06.819 Network: ##### Removing port from portList (1,1,2)
*Debug 01/09 10:59:06.819 Chassis Chain: Total wait time for ports to link up = 0.0199999809265, max wait time = 30
*Debug 01/09 10:59:06.819 Network Network1: checkLinkState() returning []
*Debug 01/09 10:59:06.819 Test Controller : checkLinkStateAllPorts() returning []
*Debug 01/09 10:59:06.821 Stat Controller: resetResultGroup()
*Debug 01/09 10:59:06.821 Test Controller : TEST CONTROLLER: setupTimelineControllers()
*Debug 01/09 10:59:06.869 Test Controller : Creating NEW TIMELINE CONTROLLER : <Match Longest>
*Debug 01/09 10:59:06.869 ixFSM: 
  *** FSM Timeline <Match Longest> ENTERING STATE  Timeline Controller: INIT                       
*Debug 01/09 10:59:06.869 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: INIT
*Debug 01/09 10:59:06.871 Timeline Controller: Timeline Controller Created successfully <Match Longest>
*Debug 01/09 10:59:06.871 Test Controller : Creating NEW TIMELINE CONTROLLER : Timeline1
*Debug 01/09 10:59:06.871 ixFSM: 
  *** FSM Timeline Timeline1 ENTERING STATE  Timeline Controller: INIT                       
*Debug 01/09 10:59:06.871 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: INIT
*Debug 01/09 10:59:06.871 Timeline Controller: Timeline Controller Created successfully Timeline1
*Debug 01/09 10:59:06.871 Licensing: Checking out license for test Test1...
*Debug 01/09 10:59:06.875 Traffic Traffic1: agent HTTP requires advancedFeatures: []
*Debug 01/09 10:59:06.875 Traffic Traffic1: agent HTTP requires subscriptionFeatures: []
*Debug 01/09 10:59:06.875 NetTraffic Traffic1@Network1: community Traffic1@Network1 has features: {'IXLOAD': <Lib.Common.ixFeatureContext.ixFeatureContext object at 0x2EAF3CB0>, u'ADVNET-EGTPR8-S11S1MME': <Lib.Common.ixFeatureContext.ixFeatureContext object at 0x2EAB1BD0>, 'HTTP-Basic': <Lib.Common.ixFeatureContext.ixFeatureContext object at 0x2EAF3AD0>}; featureLicenseCountMap: {}
*Debug 01/09 10:59:06.875 Test: Chassis 192.168.31.42 - test Test1 has features requiring license check: {'IXLOAD': <Lib.Common.ixFeatureContext.ixFeatureContext object at 0x2EAF3CB0>, u'ADVNET-EGTPR8-S11S1MME': <Lib.Common.ixFeatureContext.ixFeatureContext object at 0x2EAB1BD0>, 'HTTP-Basic': <Lib.Common.ixFeatureContext.ixFeatureContext object at 0x2EAF3AD0>}
*Debug 01/09 10:59:06.877 Traffic Traffic2: agent HTTP requires advancedFeatures: []
*Debug 01/09 10:59:06.877 Traffic Traffic2: agent HTTP requires subscriptionFeatures: []
*Debug 01/09 10:59:06.877 NetTraffic Traffic2@Network2: community Traffic2@Network2 has features: {'IXLOAD': <Lib.Common.ixFeatureContext.ixFeatureContext object at 0x2EAF3D50>, 'HTTP-Basic': <Lib.Common.ixFeatureContext.ixFeatureContext object at 0x2EAF3C10>}; featureLicenseCountMap: {}
*Debug 01/09 10:59:06.877 Test: Chassis 192.168.31.42 - test Test1 has features requiring license check: {'IXLOAD': <Lib.Common.ixFeatureContext.ixFeatureContext object at 0x2EAF3CB0>, u'ADVNET-EGTPR8-S11S1MME': <Lib.Common.ixFeatureContext.ixFeatureContext object at 0x2EAB1BD0>, 'HTTP-Basic': <Lib.Common.ixFeatureContext.ixFeatureContext object at 0x2EAF3AD0>}
*Debug 01/09 10:59:06.878 Licensing: There are no counted licenses per port for test Test1!
*Info 01/09 10:59:06.880 Licensing: Checking out license for feature(s) IXLOAD,ADVNET-EGTPR8-S11S1MME,HTTP-Basic for chassis 192.168.31.42 on license server ['@192.168.31.42'] ...
*Info 01/09 10:59:06.924 Licensing: License check out succeeded for test Test1
*Debug 01/09 10:59:06.944 Test Controller : hasResultFolderCreatedAtApplyConfig = True
*Debug 01/09 10:59:06.944 Test Controller :  Save currently running configuration repository in runResultDir
*Debug 01/09 10:59:06.944 Test Controller: Configuring all stat plugins...
*Debug 01/09 10:59:06.946 Test Controller : TEST CONTROLLER: Clearing all Stat Plugins map.
*Debug 01/09 10:59:06.946 Test Controller : clearStatPlugins(): Successfully CLEARED all the statistics plugins.
*Debug 01/09 10:59:06.946 Test Controller : Configuring CSV plugins...
*Debug 01/09 10:59:06.946 Test Controller : Configuring CSV stat view 'Test Server  HTTPServer1 Traffic2@Network2' in community 'Traffic2@Network2'...
*Debug 01/09 10:59:06.946 Test Controller : configCsvPlugin() for the stat-view object
*Debug 01/09 10:59:06.946 Test Controller : Create ixStatApiCsvFilePlugin and add to the list of stat plugins
*Debug 01/09 10:59:06.946 Lib.Stats.ixStatApiCsvFilePlugin: ixStatPlugin: Polling STAT Interval = 2
*Debug 01/09 10:59:06.954 Stat Controller: STAT CONTROLLER: connectToStatSources()
*Debug 01/09 10:59:07.5 Stat Controller: Waiting for all StatEngines to be connected.
*Debug 01/09 10:59:07.105 Stat Controller: All StatEngines connected in 0.1 time
*Debug 01/09 10:59:07.105 Test Controller : Configuring CSV stat view 'Test Client  HTTPClient1 Traffic1@Network1' in community 'Traffic1@Network1'...
*Debug 01/09 10:59:07.105 Test Controller : configCsvPlugin() for the stat-view object
*Debug 01/09 10:59:07.105 Test Controller : Create ixStatApiCsvFilePlugin and add to the list of stat plugins
*Debug 01/09 10:59:07.105 Lib.Stats.ixStatApiCsvFilePlugin: ixStatPlugin: Polling STAT Interval = 2
*Debug 01/09 10:59:07.115 Stat Controller: STAT CONTROLLER: connectToStatSources()
*Debug 01/09 10:59:07.115 Test Controller : Configuring CSV stat view 'HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1' in community 'Traffic1@Network1'...
*Debug 01/09 10:59:07.115 Test Controller : configCsvPlugin() for the stat-view object
*Debug 01/09 10:59:07.115 Test Controller : Create ixStatApiCsvFilePlugin and add to the list of stat plugins
*Debug 01/09 10:59:07.115 Lib.Stats.ixStatApiCsvFilePlugin: ixStatPlugin: Polling STAT Interval = 2
*Debug 01/09 10:59:07.125 Stat Controller: STAT CONTROLLER: connectToStatSources()
*Debug 01/09 10:59:07.125 Test Controller : Configuring CSV stat view 'HTTP Server  HTTPServer1 Traffic2@Network2' in community 'Traffic2@Network2'...
*Debug 01/09 10:59:07.127 Test Controller : configCsvPlugin() for the stat-view object
*Debug 01/09 10:59:07.127 Test Controller : Create ixStatApiCsvFilePlugin and add to the list of stat plugins
*Debug 01/09 10:59:07.127 Lib.Stats.ixStatApiCsvFilePlugin: ixStatPlugin: Polling STAT Interval = 2
*Debug 01/09 10:59:07.135 Stat Controller: STAT CONTROLLER: connectToStatSources()
*Debug 01/09 10:59:07.135 Test Controller : Configuring CSV stat view 'HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2' in community 'Traffic2@Network2'...
*Debug 01/09 10:59:07.137 Test Controller : configCsvPlugin() for the stat-view object
*Debug 01/09 10:59:07.137 Test Controller : Create ixStatApiCsvFilePlugin and add to the list of stat plugins
*Debug 01/09 10:59:07.137 Lib.Stats.ixStatApiCsvFilePlugin: ixStatPlugin: Polling STAT Interval = 2
*Debug 01/09 10:59:07.145 Stat Controller: STAT CONTROLLER: connectToStatSources()
*Debug 01/09 10:59:07.145 Test Controller : Configuring CSV stat view 'HTTP Client  HTTPClient1 Traffic1@Network1' in community 'Traffic1@Network1'...
*Debug 01/09 10:59:07.147 Test Controller : configCsvPlugin() for the stat-view object
*Debug 01/09 10:59:07.147 Test Controller : Create ixStatApiCsvFilePlugin and add to the list of stat plugins
*Debug 01/09 10:59:07.147 Lib.Stats.ixStatApiCsvFilePlugin: ixStatPlugin: Polling STAT Interval = 2
*Debug 01/09 10:59:07.155 Stat Controller: STAT CONTROLLER: connectToStatSources()
*Debug 01/09 10:59:07.155 Test Controller : Setting the CSV plugins file path and file name from 'runResultDirFull'...
*Debug 01/09 10:59:07.157 Test Controller : CSV Plugin 'Test Server  HTTPServer1 Traffic2@Network2_CSV1' file path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\Test_Server.csv
*Debug 01/09 10:59:07.157 Test Controller : CSV Plugin 'HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2_CSV5' file path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Server_-_Default_CSV_Logs_HTTPServer1_Traffic2@Network2.csv
*Debug 01/09 10:59:07.157 Test Controller : CSV Plugin 'HTTP Server  HTTPServer1 Traffic2@Network2_CSV4' file path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Server.csv
*Debug 01/09 10:59:07.157 Test Controller : CSV Plugin 'HTTP Client  HTTPClient1 Traffic1@Network1_CSV6' file path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Client.csv
*Debug 01/09 10:59:07.157 Test Controller : CSV Plugin 'HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1_CSV3' file path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Client_-_Default_CSV_Logs_HTTPClient1_Traffic1@Network1.csv
*Debug 01/09 10:59:07.157 Test Controller : CSV Plugin 'Test Client  HTTPClient1 Traffic1@Network1_CSV2' file path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\Test_Client.csv
*Debug 01/09 10:59:07.158 Test Controller : Finished configuring CSV plugins.
*Debug 01/09 10:59:07.158 Test Controller : No DCP threshold stat view configured.
*Debug 01/09 10:59:07.158 Test Controller : configStatusIndicatingPlugins() for the Test Controller
*Debug 01/09 10:59:07.158 Community Controller: configStatusIndicatingPlugins() for the Community Controller of Traffic2@Network2
*Debug 01/09 10:59:07.158 Community Controller: configStatusIndicatingPlugins() for the Community Controller of Traffic1@Network1
*Debug 01/09 10:59:07.160 Lib.Stats.ixHttpThrottleStatPlugin: ixStatPlugin: Polling STAT Interval = 4
*Debug 01/09 10:59:07.165 Stat Controller: STAT CONTROLLER: connectToStatSources()
*Debug 01/09 10:59:07.167 Test Controller : _configRunStateStatPlugin(): Create ixRunStateStatPlugin and add to the list of stat plugins
*Debug 01/09 10:59:07.167 Lib.Stats.ixRunStateStatPlugin: ixStatPlugin: Polling STAT Interval = 1
*Debug 01/09 10:59:07.176 Stat Controller: STAT CONTROLLER: connectToStatSources()
*Debug 01/09 10:59:07.177 ixRunStateStatPlugin: Initialized the ixRunStateStatPlugin Instance __ixRunStateStatPlugin__0
*Debug 01/09 10:59:07.180 Test Controller : Stat plugin Test Server  HTTPServer1 Traffic2@Network2_CSV1 - rate = 21
*Debug 01/09 10:59:07.187 Stat Controller: --- Updated the stats rate statsRate=21
*Debug 01/09 10:59:07.187 Test Controller : Stat plugin HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2_CSV5 - rate = 147
*Debug 01/09 10:59:07.197 Stat Controller: --- Updated the stats rate statsRate=168
*Debug 01/09 10:59:07.210 Test Controller : Stat plugin HTTP Server  HTTPServer1 Traffic2@Network2_CSV4 - rate = 145
*Debug 01/09 10:59:07.217 Stat Controller: --- Updated the stats rate statsRate=313
*Debug 01/09 10:59:07.233 Test Controller : Stat plugin HTTP Client  HTTPClient1 Traffic1@Network1_CSV6 - rate = 183
*Debug 01/09 10:59:07.236 Stat Controller: --- Updated the stats rate statsRate=496
*Debug 01/09 10:59:07.237 Test Controller : Stat plugin HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1_CSV3 - rate = 186
*Debug 01/09 10:59:07.246 Stat Controller: --- Updated the stats rate statsRate=682
*Debug 01/09 10:59:07.250 Test Controller : Stat plugin Test Client  HTTPClient1 Traffic1@Network1_CSV2 - rate = 21
*Debug 01/09 10:59:07.256 Stat Controller: --- Updated the stats rate statsRate=703
*Debug 01/09 10:59:07.256 Test Controller : Stat plugin HTTP_THROLLE_0 - rate = 0
*Debug 01/09 10:59:07.266 Stat Controller: --- Updated the stats rate statsRate=703
*Debug 01/09 10:59:07.266 Test Controller : Stat plugin __ixRunStateStatPlugin__0 - rate = 10
*Debug 01/09 10:59:07.276 Stat Controller: --- Updated the stats rate statsRate=713
*Debug 01/09 10:59:07.276 Test Controller: Memory Trim Timer fired. Trimming working set.
*Debug 01/09 10:59:07.283 Test Controller: Memory Trim complete.
*Debug 01/09 10:59:07.285 Test Controller: Checking free disk space: freeToUser=65120624640; total=243086127104 totalFree=65120624640. StopTest Limit=536870912.0. Warning Limit=1073741824.0.
*Debug 01/09 10:59:07.285 Test Controller: Drive C: has 60.65 GB of free disk space
*Debug 01/09 10:59:07.286 Test Controller: testName = Test1 ; stateName =  TestController: RUN INIT                        ; eventId =  TestController: All Communities Run Initialized Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:07.336 Test Controller: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Test Controller, TEST NAME: Test1, PREV STATE: 'TestController: FINAL CONFIGURATION', EVENT RECEIVED:  TestController: Configuration Finalized Successfully
  NEW STATE: 'TestController: RUN INIT', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:07.346 Stat Controller: tsInitTestRun()
*Debug 01/09 10:59:07.346 Stat Controller: setPagingTrafficMap start
*Debug 01/09 10:59:07.346 Stat Controller: publishStatCatalog for Tcl API
*Debug 01/09 10:59:07.346 Stat Controller: __publishStatCatalog()
*Debug 01/09 10:59:07.348 Activity HTTPServer1: getStatCatalog: HTTPServer1
*Debug 01/09 10:59:07.368 Activity HTTPClient1: getStatCatalog: HTTPClient1
*Debug 01/09 10:59:07.411 Stat Controller: RegisterStatPublisher()
*Debug 01/09 10:59:07.417 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.418 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.418 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.418 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.418 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.420 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.420 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.420 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.421 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.421 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.421 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.423 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.423 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.423 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.423 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.424 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.424 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.424 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.424 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.424 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.424 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.426 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.426 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.426 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.428 ixStatCatalog: Existing catalogItem statPublisher is StackManager
*Debug 01/09 10:59:07.430 ixStatCatalog: Existing catalogItem statPublisher is StackManager.NetworkDiagnosticsPublisher
*Debug 01/09 10:59:07.433 ixStatCatalog: Existing catalogItem statPublisher is StackManager.NetworkDiagnosticsPublisher
*Debug 01/09 10:59:07.569 Stat Controller: setPagingTrafficMap for Tcl API
*Debug 01/09 10:59:07.569 Stat Controller: setPagingTrafficMap finish
*Debug 01/09 10:59:07.569 Stat Controller: _resolveAggregated State
*Debug 01/09 10:59:07.578 Stat Controller: Resolving 0 stats ...
*Debug 01/09 10:59:07.578 Stat Controller: number of aggregated stats 0
*Debug 01/09 10:59:07.582 Stat Controller: resolvedStatList = 0
*Debug 01/09 10:59:07.585 Stat Controller: --- Updated the stats rate statsRate=713.0
*Debug 01/09 10:59:07.585 Stat Controller: Stats frequency = 2.0 self._statsCount = 0 self._statsRate = 713.0
*Debug 01/09 10:59:07.585 Stat Controller: checkStatsRate()
*Debug 01/09 10:59:07.586 Stat Controller: _userDefinedStatsRate = False
*Debug 01/09 10:59:07.586 Stat Controller: STATS Rate computed for the test is 713.0 ; MAX Stats Rate limit is 55000
*Debug 01/09 10:59:07.586 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:07.586 Test Controller: event ID received =  TestController: All Communities Run Initialized Successfully
*Debug 01/09 10:59:07.586 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: All Communities Run Initialized Successfully
*Debug 01/09 10:59:07.687 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: All Communities Run Initialized Successfully
*Debug 01/09 10:59:07.687 ixFSM:   *** FSM Test Controller --EXITING STATE--:  TestController: RUN INIT                        
*Debug 01/09 10:59:07.687 ixFSM:   *** FSM Test Controller --ENTERING STATE--:  TestController: CLEAR STATS                     
*Debug 01/09 10:59:07.687 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:07.687 Test Controller:              PUBLISHING PRESTATE CHANGE EVENT       
*Debug 01/09 10:59:07.687 Test Controller:  PUBLISHING STATE : [ TestController: CLEAR STATS                     ]
*Debug 01/09 10:59:07.687 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:07.687 Test Controller : ixRunStateHandler received event  TestController: CLEAR STATS                     
*Debug 01/09 10:59:07.736 Test Controller : testClearIxServerStatsAllPorts()
*Info 01/09 10:59:07.736 Chassis Chain: Clearing stats on ports [(1,1,2), (1,1,3)]
*Debug 01/09 10:59:07.846 Test Controller: Sending 'Clear Stats' event to All the Community Controllers
*Debug 01/09 10:59:07.854 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:07.854 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:07.855 Community Controller Traffic2@Network2: event ID received =  Community Controller: Clear Stats for the community
*Debug 01/09 10:59:07.855 Community Controller Traffic1@Network1: event ID received =  Community Controller: Clear Stats for the community
*Debug 01/09 10:59:07.857 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: Clear Stats for the community
*Debug 01/09 10:59:07.858 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Clear Stats for the community
*Debug 01/09 10:59:07.858 Community Controller Traffic2@Network2: Community Controller FSM: EXIT Action for the State: CONFIGURED  :: Traffic2@Network2 
*Debug 01/09 10:59:07.858 Community Controller Traffic1@Network1: Community Controller FSM: EXIT Action for the State: CONFIGURED  :: Traffic1@Network1 
*Debug 01/09 10:59:07.859 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: Clear Stats for the community
*Debug 01/09 10:59:07.861 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Clear Stats for the community
*Debug 01/09 10:59:07.861 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EXITING STATE--:  Community Controller: CONFIGURED           
*Debug 01/09 10:59:07.861 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EXITING STATE--:  Community Controller: CONFIGURED           
*Debug 01/09 10:59:07.861 Event Scheduler: addEvent() Function. interval = 0, action = <bound method ixTestControllerFSMThread._clearStatsTimerExpired of <ixTestControllerFSMThread(Test Controller, started daemon 145276)>>, actionArguments=(()), iteration=0, startDelay=600 and Timer Index = 2
*Debug 01/09 10:59:07.862 ixFSM:   *** FSM Community Controller Traffic2@Network2 --ENTERING STATE--:  Community Controller: CLEAR STATS          
*Debug 01/09 10:59:07.862 ixFSM:   *** FSM Community Controller Traffic1@Network1 --ENTERING STATE--:  Community Controller: CLEAR STATS          
*Debug 01/09 10:59:07.862 Event Scheduler: EVENT ADDED to the events map. Timer Index=2
*Debug 01/09 10:59:07.862 Community Controller Traffic2@Network2: Community Controller FSM: ENTRY Action for the State: CLEAR STATS :: Traffic2@Network2 
*Debug 01/09 10:59:07.862 Community Controller Traffic1@Network1: Community Controller FSM: ENTRY Action for the State: CLEAR STATS :: Traffic1@Network1 
*Debug 01/09 10:59:07.862 Test Controller: [ Clear Stats Watch Dog Timer created. ] Timer ID = 2 
*Debug 01/09 10:59:07.864 Test: Frame size distribution view NOT SUPPORTED - Test option is not enabled
*Debug 01/09 10:59:07.864 Test: Frame size distribution view NOT SUPPORTED - Test option is not enabled
*Debug 01/09 10:59:07.864 Test Controller: [ Configured timeout interval = 0 s, start delay = 600 s. ]
*Debug 01/09 10:59:07.865 Community Controller Traffic2@Network2: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic2@Network2, TEST NAME: Test1, PREV STATE: 'Community Controller: CONFIGURED', EVENT RECEIVED:  Community Controller: Clear Stats for the community
  NEW STATE: 'Community Controller: CLEAR STATS', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:07.865 ixKseCommunicator Global: Sending on ports [(1,1,2)]:'<ixlagent-clear-statistics-request request-id="1515475728" activityName="Global" port-id="0"/>'.
*Debug 01/09 10:59:07.865 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:07.865 Community Controller: Port Id 192.168.31.42;1;2 timer added.
*Debug 01/09 10:59:07.865 Community Controller Traffic2@Network2: event ID received =  Community Controller: Global Clear Stats Response Received
*Debug 01/09 10:59:07.865 Community Controller Traffic1@Network1: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic1@Network1, TEST NAME: Test1, PREV STATE: 'Community Controller: CONFIGURED', EVENT RECEIVED:  Community Controller: Clear Stats for the community
  NEW STATE: 'Community Controller: CLEAR STATS', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:07.865 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: Global Clear Stats Response Received
*Debug 01/09 10:59:07.867 Community Controller: websvr_HTTPServer1 - Clearing Stats
*Debug 01/09 10:59:07.867 Community Controller: Sending 'PortId=3
type=clear_stats' to websvr_HTTPServer1 on ports [[(1,1,3)]]...
*Debug 01/09 10:59:07.867 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: Global Clear Stats Response Received
*Debug 01/09 10:59:07.867 ixFSM:   *** FSM Community Controller Traffic2@Network2 --INTERNAL EVENT. STAYING IN STATE--:  Community Controller: CLEAR STATS          
*Debug 01/09 10:59:07.878 ixKseCommunicator Global: Got from port (1,1,2): '<ixlagent-clear-statistics-response request-id="1515475728" activityName="Global" port-id="0"/>'
*Debug 01/09 10:59:07.878 ixKseCommunicator Global: Handling ixlagent message from port (1,1,2): '<ixlagent-clear-statistics-response request-id="1515475728" activityName="Global" port-id="0"/>'
*Debug 01/09 10:59:07.878 Traffic1@Network1: Traffic1@Network1: got response for requestType clear-statistics on port 0
*Debug 01/09 10:59:07.878 Community Controller: Port Id 192.168.31.42;1;2 task done.
*Debug 01/09 10:59:07.910 Test Controller: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Test Controller, TEST NAME: Test1, PREV STATE: 'TestController: RUN INIT', EVENT RECEIVED:  TestController: All Communities Run Initialized Successfully
  NEW STATE: 'TestController: CLEAR STATS', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:07.966 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:07.966 Community Controller Traffic1@Network1: event ID received =  Community Controller: Global Clear Stats Response Received
*Debug 01/09 10:59:07.966 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Global Clear Stats Response Received
*Debug 01/09 10:59:07.966 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Global Clear Stats Response Received
*Debug 01/09 10:59:07.966 ixFSM:   *** FSM Community Controller Traffic1@Network1 --INTERNAL EVENT. STAYING IN STATE--:  Community Controller: CLEAR STATS          
*Debug 01/09 10:59:07.966 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:07.966 Community Controller Traffic1@Network1: event ID received =  Community Controller: Activity Cleared Stats
*Debug 01/09 10:59:07.966 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Activity Cleared Stats
*Debug 01/09 10:59:07.967 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Activity Cleared Stats
*Debug 01/09 10:59:07.967 ixFSM:   *** FSM Community Controller Traffic1@Network1 --INTERNAL EVENT. STAYING IN STATE--:  Community Controller: CLEAR STATS          
*Debug 01/09 10:59:07.967 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:07.967 Community Controller Traffic1@Network1: event ID received =  Community Controller: Activity Cleared Stats
*Debug 01/09 10:59:07.967 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Activity Cleared Stats
*Debug 01/09 10:59:07.967 Community Controller Traffic1@Network1: Activities Cleared Stats for the community: Traffic1@Network1
*Debug 01/09 10:59:07.967 Test Controller: testName = Test1 ; stateName =  TestController: CLEAR STATS                     ; eventId =  Community Controller: Stats Cleared Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:07.967 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Activity Cleared Stats
*Debug 01/09 10:59:07.967 ixFSM:   *** FSM Community Controller Traffic1@Network1 --INTERNAL EVENT. STAYING IN STATE--:  Community Controller: CLEAR STATS          
*Debug 01/09 10:59:08.9 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:08.9 Test Controller: event ID received =  Community Controller: Stats Cleared Successfully
*Debug 01/09 10:59:08.9 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  Community Controller: Stats Cleared Successfully
*Debug 01/09 10:59:08.9 Test Controller: Test Controller FSM: Internal Transition Action: checkAllCommStatsCleared()
*Debug 01/09 10:59:08.9 Test Controller: Total number of communities = 2
*Debug 01/09 10:59:08.9 Test Controller: Communities Cleared their Stats so far = 1
*Debug 01/09 10:59:08.9 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  Community Controller: Stats Cleared Successfully
*Debug 01/09 10:59:08.9 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: CLEAR STATS                     
*Debug 01/09 10:59:08.167 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:08.167 Community Controller Traffic2@Network2: event ID received =  Community Controller: Activity Cleared Stats
*Debug 01/09 10:59:08.167 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: Activity Cleared Stats
*Debug 01/09 10:59:08.167 Community Controller Traffic2@Network2: Activities Cleared Stats for the community: Traffic2@Network2
*Debug 01/09 10:59:08.167 Test Controller: testName = Test1 ; stateName =  TestController: CLEAR STATS                     ; eventId =  Community Controller: Stats Cleared Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:08.167 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: Activity Cleared Stats
*Debug 01/09 10:59:08.167 ixFSM:   *** FSM Community Controller Traffic2@Network2 --INTERNAL EVENT. STAYING IN STATE--:  Community Controller: CLEAR STATS          
*Debug 01/09 10:59:08.210 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:08.210 Test Controller: event ID received =  Community Controller: Stats Cleared Successfully
*Debug 01/09 10:59:08.210 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  Community Controller: Stats Cleared Successfully
*Debug 01/09 10:59:08.210 Test Controller: Test Controller FSM: Internal Transition Action: checkAllCommStatsCleared()
*Debug 01/09 10:59:08.210 Test Controller: Total number of communities = 2
*Debug 01/09 10:59:08.210 Test Controller: Communities Cleared their Stats so far = 2
*Debug 01/09 10:59:08.210 Test Controller: testName = Test1 ; stateName =  TestController: CLEAR STATS                     ; eventId =  TestController: All Communities Cleared their Stats Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:08.210 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  Community Controller: Stats Cleared Successfully
*Debug 01/09 10:59:08.210 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: CLEAR STATS                     
*Debug 01/09 10:59:08.210 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:08.210 Test Controller: event ID received =  TestController: All Communities Cleared their Stats Successfully
*Debug 01/09 10:59:08.210 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: All Communities Cleared their Stats Successfully
*Debug 01/09 10:59:08.266 Test Controller: [ Stopping the Clear Stats Watch Dog Timer. ] Timer ID = 2
*Debug 01/09 10:59:08.266 Event Scheduler: REMOVE Event(). Removing Event Index 2
*Debug 01/09 10:59:08.266 Event Scheduler: Stopping the timer: Event Index 2, timer (1515476347.863, 0, <bound method ixEventScheduler.callback of <Lib.Common.ixEventScheduler.ixEventScheduler object at 0x2EAB1350>>, (2,))
*Debug 01/09 10:59:08.266 Event Scheduler: deleting the event 2
*Debug 01/09 10:59:08.345 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: All Communities Cleared their Stats Successfully
*Debug 01/09 10:59:08.345 ixFSM:   *** FSM Test Controller --EXITING STATE--:  TestController: CLEAR STATS                     
*Debug 01/09 10:59:08.346 ixFSM:   *** FSM Test Controller --ENTERING STATE--:  TestController: REGISTER STATS                  
*Debug 01/09 10:59:08.346 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:08.346 Test Controller:              PUBLISHING PRESTATE CHANGE EVENT       
*Debug 01/09 10:59:08.346 Test Controller:  PUBLISHING STATE : [ TestController: REGISTER STATS                  ]
*Debug 01/09 10:59:08.346 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:08.346 Test Controller : ixRunStateHandler received event  TestController: REGISTER STATS                  
*Debug 01/09 10:59:08.394 Test Controller: Test Controller FSM: ENTRY Action for the State: REGISTER STATS
*Debug 01/09 10:59:08.394 Test Controller : STARTING the RUN STAT plugin
*Debug 01/09 10:59:08.398 Stat Controller: STAT CONTROLLER: REGISTER THE Plugin with the STAT CONTROLLER : __ixRunStateStatPlugin__0
*Debug 01/09 10:59:08.398 ixRunStateStatPlugin: statPlugin: Scale Factor (when applicable) = 0.008
*Console 01/09 10:59:08.400 : Non-aggregated raw agent stat '192.168.31.42/Card1/Port3/State/HTTPServer1:Run State'
*Console 01/09 10:59:08.403 : Non-aggregated raw agent stat '192.168.31.42/Card1/Port2/State/HTTPClient1:Run State'
*Console 01/09 10:59:08.405 : Non-aggregated raw agent stat '192.168.31.42/Card1/Port2/State/eGTP Control Plane:Run State'
*Debug 01/09 10:59:08.407 Stat Controller: $$$[0] _register: INIT=0.0000,  BUILD_REQ=0.0080, SET=0.0000, REGISTER=0.0000
*Debug 01/09 10:59:08.407 Stat Controller: STAT CONTROLLER: Plugin REGISTERED SUCCESSFULLY with the STAT CONTROLLER : __ixRunStateStatPlugin__0
*Debug 01/09 10:59:08.417 ixStatThread statThread[1]: Adding stat Plugin __ixRunStateStatPlugin__0
*Debug 01/09 10:59:08.417 ixStatPoller __ixRunStateStatPlugin__0: Stat Poller created with maxMissedPolls=300
*Debug 01/09 10:59:08.417 Test Controller: Sending 'Register Stats' event to All the Community Controllers
*Debug 01/09 10:59:08.463 Test Controller: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Test Controller, TEST NAME: Test1, PREV STATE: 'TestController: CLEAR STATS', EVENT RECEIVED:  TestController: All Communities Cleared their Stats Successfully
  NEW STATE: 'TestController: REGISTER STATS', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:08.467 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:08.467 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:08.467 Community Controller Traffic1@Network1: event ID received =  Community Controller: Register Stats for the community
*Debug 01/09 10:59:08.467 Community Controller Traffic2@Network2: event ID received =  Community Controller: Register Stats for the community
*Debug 01/09 10:59:08.469 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Register Stats for the community
*Debug 01/09 10:59:08.469 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: Register Stats for the community
*Debug 01/09 10:59:08.469 Community Controller Traffic1@Network1: Community Controller FSM: EXIT Action for the State: CLEAR STATS :: Traffic1@Network1 
*Debug 01/09 10:59:08.470 Community Controller Traffic2@Network2: Community Controller FSM: EXIT Action for the State: CLEAR STATS :: Traffic2@Network2 
*Debug 01/09 10:59:08.470 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Register Stats for the community
*Debug 01/09 10:59:08.470 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: Register Stats for the community
*Debug 01/09 10:59:08.470 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EXITING STATE--:  Community Controller: CLEAR STATS          
*Debug 01/09 10:59:08.470 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EXITING STATE--:  Community Controller: CLEAR STATS          
*Debug 01/09 10:59:08.470 ixFSM:   *** FSM Community Controller Traffic1@Network1 --ENTERING STATE--:  Community Controller: REGISTER STATS       
*Debug 01/09 10:59:08.470 ixFSM:   *** FSM Community Controller Traffic2@Network2 --ENTERING STATE--:  Community Controller: REGISTER STATS       
*Debug 01/09 10:59:08.470 Community Controller Traffic1@Network1: Community Controller FSM: ENTRY Action for the State: REGISTER STATS :: Traffic1@Network1 
*Debug 01/09 10:59:08.470 Community Controller Traffic2@Network2: Community Controller FSM: ENTRY Action for the State: REGISTER STATS :: Traffic2@Network2 
*Debug 01/09 10:59:08.470 Community Controller Traffic1@Network1: Registering and Starting the Statistics Plugin for the community: Traffic1@Network1 
*Debug 01/09 10:59:08.470 Community Controller Traffic2@Network2: Registering and Starting the Statistics Plugin for the community: Traffic2@Network2 
*Debug 01/09 10:59:08.470 Community Controller: startPluginsbyCommunity() communityName = Traffic1@Network1
*Debug 01/09 10:59:08.471 Community Controller: startPluginsbyCommunity() communityName = Traffic2@Network2
*Debug 01/09 10:59:08.471 Community Controller: Cleared all plugin-filename mappings, for the community: Traffic1@Network1 
*Debug 01/09 10:59:08.471 Community Controller: Cleared all plugin-filename mappings, for the community: Traffic2@Network2 
*Debug 01/09 10:59:08.471 Community Controller: Setting the filename path for the plugin: HTTP Client  HTTPClient1 Traffic1@Network1_CSV6 
*Debug 01/09 10:59:08.471 Community Controller: Setting the filename path for the plugin: Test Server  HTTPServer1 Traffic2@Network2_CSV1 
*Debug 01/09 10:59:08.473 Community Controller: Set the Plugin's successfully; FileName: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Client.csv
*Debug 01/09 10:59:08.473 Community Controller: Set the Plugin's successfully; FileName: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\Test_Server.csv
*Debug 01/09 10:59:08.473 Community Controller: setPluginFileMapping() completed succesfully for the plugin: HTTP Client  HTTPClient1 Traffic1@Network1_CSV6 
*Debug 01/09 10:59:08.473 Community Controller: setPluginFileMapping() completed succesfully for the plugin: Test Server  HTTPServer1 Traffic2@Network2_CSV1 
*Debug 01/09 10:59:08.473 Community Controller: Setting the filename path for the plugin: HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1_CSV3 
*Debug 01/09 10:59:08.473 Community Controller: Setting the filename path for the plugin: HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2_CSV5 
*Debug 01/09 10:59:08.473 Community Controller: Set the Plugin's successfully; FileName: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Client_-_Default_CSV_Logs_HTTPClient1_Traffic1@Network1.csv
*Debug 01/09 10:59:08.473 Community Controller: Set the Plugin's successfully; FileName: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Server_-_Default_CSV_Logs_HTTPServer1_Traffic2@Network2.csv
*Debug 01/09 10:59:08.473 Community Controller: setPluginFileMapping() completed succesfully for the plugin: HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1_CSV3 
*Debug 01/09 10:59:08.473 Community Controller: setPluginFileMapping() completed succesfully for the plugin: HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2_CSV5 
*Debug 01/09 10:59:08.473 Community Controller: Setting the filename path for the plugin: Test Client  HTTPClient1 Traffic1@Network1_CSV2 
*Debug 01/09 10:59:08.473 Community Controller: Setting the filename path for the plugin: HTTP Server  HTTPServer1 Traffic2@Network2_CSV4 
*Debug 01/09 10:59:08.473 Community Controller: Set the Plugin's successfully; FileName: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\Test_Client.csv
*Debug 01/09 10:59:08.473 Community Controller: Set the Plugin's successfully; FileName: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Server.csv
*Debug 01/09 10:59:08.474 Community Controller: setPluginFileMapping() completed succesfully for the plugin: Test Client  HTTPClient1 Traffic1@Network1_CSV2 
*Debug 01/09 10:59:08.474 Community Controller: setPluginFileMapping() completed succesfully for the plugin: HTTP Server  HTTPServer1 Traffic2@Network2_CSV4 
*Debug 01/09 10:59:08.474 Community Controller: Setting the filename path for the plugin: HTTP_THROLLE_0 
*Debug 01/09 10:59:08.474 Community Controller: Plugin Name: Test Server  HTTPServer1 Traffic2@Network2_CSV1 ; File path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\Test_Server.csv 
*Debug 01/09 10:59:08.474 Community Controller: Set the Plugin's successfully; FileName: None
*Debug 01/09 10:59:08.476 Community Controller: Plugin Name: HTTP Client  HTTPClient1 Traffic1@Network1_CSV6 ; File path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Client.csv 
*Debug 01/09 10:59:08.477 Stat Controller: STAT CONTROLLER: REGISTER THE Plugin with the STAT CONTROLLER : Test Server  HTTPServer1 Traffic2@Network2_CSV1
*Debug 01/09 10:59:08.479 ixStatApiCsvFilePlugin: statPlugin: Scale Factor (when applicable) = 0.008
*Debug 01/09 10:59:08.517 Stat Controller: $$$[1] _register: INIT=0.0000,  BUILD_REQ=0.0400, SET=0.0000, REGISTER=0.0000
*Debug 01/09 10:59:08.519 Stat Controller: STAT CONTROLLER: Plugin REGISTERED SUCCESSFULLY with the STAT CONTROLLER : Test Server  HTTPServer1 Traffic2@Network2_CSV1
*Debug 01/09 10:59:08.529 Stat Controller: STAT CONTROLLER: REGISTER THE Plugin with the STAT CONTROLLER : HTTP Client  HTTPClient1 Traffic1@Network1_CSV6
*Debug 01/09 10:59:08.530 ixStatApiCsvFilePlugin: statPlugin: Scale Factor (when applicable) = 0.008
*Debug 01/09 10:59:08.822 Stat Controller: $$$[2] _register: INIT=0.0000,  BUILD_REQ=0.2930, SET=0.0000, REGISTER=0.0000
*Debug 01/09 10:59:08.822 Stat Controller: STAT CONTROLLER: Plugin REGISTERED SUCCESSFULLY with the STAT CONTROLLER : HTTP Client  HTTPClient1 Traffic1@Network1_CSV6
*Debug 01/09 10:59:08.822 ixStatThread statThread[2]: Adding stat Plugin Test Server  HTTPServer1 Traffic2@Network2_CSV1
*Debug 01/09 10:59:08.822 ixStatPoller Test Server  HTTPServer1 Traffic2@Network2_CSV1: Stat Poller created with maxMissedPolls=150
*Debug 01/09 10:59:08.822 Community Controller: Plugin Started: Test Server  HTTPServer1 Traffic2@Network2_CSV1 ;  Timestamp: 0
*Debug 01/09 10:59:08.822 Community Controller: Plugin Name: HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2_CSV5 ; File path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Server_-_Default_CSV_Logs_HTTPServer1_Traffic2@Network2.csv 
*Debug 01/09 10:59:08.832 ixStatThread statThread[2]: Adding stat Plugin HTTP Client  HTTPClient1 Traffic1@Network1_CSV6
*Debug 01/09 10:59:08.832 ixStatPoller HTTP Client  HTTPClient1 Traffic1@Network1_CSV6: Stat Poller created with maxMissedPolls=150
*Debug 01/09 10:59:08.832 Stat Controller: STAT CONTROLLER: REGISTER THE Plugin with the STAT CONTROLLER : HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2_CSV5
*Debug 01/09 10:59:08.832 Community Controller: Plugin Started: HTTP Client  HTTPClient1 Traffic1@Network1_CSV6 ;  Timestamp: 0
*Debug 01/09 10:59:08.832 ixStatApiCsvFilePlugin: statPlugin: Scale Factor (when applicable) = 0.008
*Debug 01/09 10:59:08.834 Community Controller: Plugin Name: HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1_CSV3 ; File path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Client_-_Default_CSV_Logs_HTTPClient1_Traffic1@Network1.csv 
*Console 01/09 10:59:08.835 : Non-aggregated raw agent stat '192.168.31.42/Card1/Port3/State/HTTPServer1:Run State'
*Debug 01/09 10:59:09.73 Stat Controller: $$$[3] _register: INIT=0.0000,  BUILD_REQ=0.2400, SET=0.0000, REGISTER=0.0000
*Debug 01/09 10:59:09.73 Stat Controller: STAT CONTROLLER: Plugin REGISTERED SUCCESSFULLY with the STAT CONTROLLER : HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2_CSV5
*Debug 01/09 10:59:09.84 Stat Controller: STAT CONTROLLER: REGISTER THE Plugin with the STAT CONTROLLER : HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1_CSV3
*Debug 01/09 10:59:09.84 ixStatApiCsvFilePlugin: statPlugin: Scale Factor (when applicable) = 0.008
*Console 01/09 10:59:09.85 : Non-aggregated raw agent stat '192.168.31.42/Card1/Port2/State/HTTPClient1:Run State'
*Debug 01/09 10:59:09.388 Stat Controller: $$$[4] _register: INIT=0.0000,  BUILD_REQ=0.3040, SET=0.0000, REGISTER=0.0000
*Debug 01/09 10:59:09.388 Stat Controller: STAT CONTROLLER: Plugin REGISTERED SUCCESSFULLY with the STAT CONTROLLER : HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1_CSV3
*Debug 01/09 10:59:09.388 ixStatThread statThread[2]: Adding stat Plugin HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2_CSV5
*Debug 01/09 10:59:09.388 ixStatPoller HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2_CSV5: Stat Poller created with maxMissedPolls=150
*Debug 01/09 10:59:09.388 Community Controller: Plugin Started: HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2_CSV5 ;  Timestamp: 0
*Debug 01/09 10:59:09.388 Community Controller: Plugin Name: HTTP Server  HTTPServer1 Traffic2@Network2_CSV4 ; File path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\HTTP_Server.csv 
*Debug 01/09 10:59:09.398 ixStatThread statThread[2]: Adding stat Plugin HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1_CSV3
*Debug 01/09 10:59:09.398 ixStatPoller HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1_CSV3: Stat Poller created with maxMissedPolls=150
*Debug 01/09 10:59:09.398 Community Controller: Plugin Started: HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1_CSV3 ;  Timestamp: 0
*Debug 01/09 10:59:09.398 Stat Controller: STAT CONTROLLER: REGISTER THE Plugin with the STAT CONTROLLER : HTTP Server  HTTPServer1 Traffic2@Network2_CSV4
*Debug 01/09 10:59:09.398 Community Controller: Plugin Name: Test Client  HTTPClient1 Traffic1@Network1_CSV2 ; File path: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed\Test_Client.csv 
*Debug 01/09 10:59:09.400 ixStatApiCsvFilePlugin: statPlugin: Scale Factor (when applicable) = 0.008
*Debug 01/09 10:59:09.641 Stat Controller: $$$[5] _register: INIT=0.0000,  BUILD_REQ=0.2420, SET=0.0000, REGISTER=0.0000
*Debug 01/09 10:59:09.641 Stat Controller: STAT CONTROLLER: Plugin REGISTERED SUCCESSFULLY with the STAT CONTROLLER : HTTP Server  HTTPServer1 Traffic2@Network2_CSV4
*Debug 01/09 10:59:09.651 Stat Controller: STAT CONTROLLER: REGISTER THE Plugin with the STAT CONTROLLER : Test Client  HTTPClient1 Traffic1@Network1_CSV2
*Debug 01/09 10:59:09.653 ixStatApiCsvFilePlugin: statPlugin: Scale Factor (when applicable) = 0.008
*Debug 01/09 10:59:09.687 Stat Controller: $$$[6] _register: INIT=0.0000,  BUILD_REQ=0.0360, SET=0.0000, REGISTER=0.0000
*Debug 01/09 10:59:09.687 Stat Controller: STAT CONTROLLER: Plugin REGISTERED SUCCESSFULLY with the STAT CONTROLLER : Test Client  HTTPClient1 Traffic1@Network1_CSV2
*Debug 01/09 10:59:09.687 ixStatThread statThread[2]: Adding stat Plugin HTTP Server  HTTPServer1 Traffic2@Network2_CSV4
*Debug 01/09 10:59:09.687 ixStatPoller HTTP Server  HTTPServer1 Traffic2@Network2_CSV4: Stat Poller created with maxMissedPolls=150
*Debug 01/09 10:59:09.687 Community Controller: Plugin Started: HTTP Server  HTTPServer1 Traffic2@Network2_CSV4 ;  Timestamp: 0
*Debug 01/09 10:59:09.688 Test Controller: testName = Test1 ; stateName =  TestController: REGISTER STATS                  ; eventId =  Community Controller: Stats Registered Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:09.688 Community Controller Traffic2@Network2: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic2@Network2, TEST NAME: Test1, PREV STATE: 'Community Controller: CLEAR STATS', EVENT RECEIVED:  Community Controller: Register Stats for the community
  NEW STATE: 'Community Controller: REGISTER STATS', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:09.688 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:09.688 Community Controller Traffic2@Network2: event ID received =  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.688 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.688 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.688 ixFSM:   *** FSM Community Controller Traffic2@Network2  --DEFAULT EVENT. STAYING IN STATE--:  Community Controller: REGISTER STATS       
*Debug 01/09 10:59:09.697 ixStatThread statThread[2]: Adding stat Plugin Test Client  HTTPClient1 Traffic1@Network1_CSV2
*Debug 01/09 10:59:09.697 ixStatPoller Test Client  HTTPClient1 Traffic1@Network1_CSV2: Stat Poller created with maxMissedPolls=150
*Debug 01/09 10:59:09.697 Community Controller: Plugin Started: Test Client  HTTPClient1 Traffic1@Network1_CSV2 ;  Timestamp: 0
*Debug 01/09 10:59:09.707 Stat Controller: STAT CONTROLLER: REGISTER THE Plugin with the STAT CONTROLLER : HTTP_THROLLE_0
*Debug 01/09 10:59:09.707 HTTP Client: statPlugin: Scale Factor (when applicable) = 0.008
*Debug 01/09 10:59:09.710 Stat Controller: $$$[7] _register: INIT=0.0000,  BUILD_REQ=0.0020, SET=0.0000, REGISTER=0.0000
*Debug 01/09 10:59:09.710 Stat Controller: STAT CONTROLLER: Plugin REGISTERED SUCCESSFULLY with the STAT CONTROLLER : HTTP_THROLLE_0
*Debug 01/09 10:59:09.720 ixStatThread statThread[4]: Adding stat Plugin HTTP_THROLLE_0
*Debug 01/09 10:59:09.720 ixStatPoller HTTP_THROLLE_0: Stat Poller created with maxMissedPolls=75
*Debug 01/09 10:59:09.720 Community Controller: Plugin Started: HTTP_THROLLE_0 ;  Timestamp: 0
*Debug 01/09 10:59:09.720 Test Controller: testName = Test1 ; stateName =  TestController: REGISTER STATS                  ; eventId =  Community Controller: Stats Registered Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:09.720 Community Controller Traffic1@Network1: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic1@Network1, TEST NAME: Test1, PREV STATE: 'Community Controller: CLEAR STATS', EVENT RECEIVED:  Community Controller: Register Stats for the community
  NEW STATE: 'Community Controller: REGISTER STATS', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:09.720 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:09.720 Community Controller Traffic1@Network1: event ID received =  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.720 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.720 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.720 ixFSM:   *** FSM Community Controller Traffic1@Network1  --DEFAULT EVENT. STAYING IN STATE--:  Community Controller: REGISTER STATS       
*Debug 01/09 10:59:09.763 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:09.763 Test Controller: event ID received =  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.763 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.763 Test Controller: Test Controller FSM: Internal Transition Action: checkAllCommStatsCleared()
*Debug 01/09 10:59:09.763 Test Controller: Total number of communities = 2
*Debug 01/09 10:59:09.763 Test Controller: Communities Registered their Stats so far = 1 
*Debug 01/09 10:59:09.763 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.763 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: REGISTER STATS                  
*Debug 01/09 10:59:09.763 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:09.763 Test Controller: event ID received =  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.765 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.765 Test Controller: Test Controller FSM: Internal Transition Action: checkAllCommStatsCleared()
*Debug 01/09 10:59:09.765 Test Controller: Total number of communities = 2
*Debug 01/09 10:59:09.765 Test Controller: Communities Registered their Stats so far = 2 
*Debug 01/09 10:59:09.765 Test Controller: testName = Test1 ; stateName =  TestController: REGISTER STATS                  ; eventId =  TestController: All Communities Registered their Stats Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:09.765 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  Community Controller: Stats Registered Successfully
*Debug 01/09 10:59:09.765 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: REGISTER STATS                  
*Debug 01/09 10:59:09.765 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:09.765 Test Controller: event ID received =  TestController: All Communities Registered their Stats Successfully
*Debug 01/09 10:59:09.765 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: All Communities Registered their Stats Successfully
*Debug 01/09 10:59:09.858 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: All Communities Registered their Stats Successfully
*Debug 01/09 10:59:09.858 ixFSM:   *** FSM Test Controller --EXITING STATE--:  TestController: REGISTER STATS                  
*Debug 01/09 10:59:09.858 ixFSM:   *** FSM Test Controller --ENTERING STATE--:  TestController: PREPARE RUN                     
*Debug 01/09 10:59:09.858 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:09.858 Test Controller:              PUBLISHING PRESTATE CHANGE EVENT       
*Debug 01/09 10:59:09.858 Test Controller:  PUBLISHING STATE : [ TestController: PREPARE RUN                     ]
*Debug 01/09 10:59:09.858 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:09.858 Test Controller : ixRunStateHandler received event  TestController: PREPARE RUN                     
*Debug 01/09 10:59:09.904 Test Controller: Test Controller FSM: ENTRY Action for the State: PREPARE RUN
*Debug 01/09 10:59:09.904 Test Controller: Sending 'Prepare To Run' event to All the Community Controllers
*Debug 01/09 10:59:09.911 Event Scheduler: addEvent() Function. interval = 0, action = <bound method ixTestControllerFSMThread._prepareRunTimerExpired of <ixTestControllerFSMThread(Test Controller, started daemon 145276)>>, actionArguments=(()), iteration=0, startDelay=600 and Timer Index = 3
*Debug 01/09 10:59:09.911 Event Scheduler: EVENT ADDED to the events map. Timer Index=3
*Debug 01/09 10:59:09.913 Test Controller: [ Prepare Run Watch Dog Timer created. ] Timer ID = 3 
*Debug 01/09 10:59:09.913 Test Controller: [ Configured timeout interval = 0 s, start delay = 600 s. ]
*Debug 01/09 10:59:09.921 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:09.921 Community Controller Traffic1@Network1: event ID received =  Community Controller: Prepare Run for the community
*Debug 01/09 10:59:09.921 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Prepare Run for the community
*Debug 01/09 10:59:09.921 Community Controller Traffic1@Network1: Community Controller FSM: EXIT Action for the State: REGISTER  STATS  :: Traffic1@Network1 
*Debug 01/09 10:59:09.921 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Prepare Run for the community
*Debug 01/09 10:59:09.921 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EXITING STATE--:  Community Controller: REGISTER STATS       
*Debug 01/09 10:59:09.921 ixFSM:   *** FSM Community Controller Traffic1@Network1 --ENTERING STATE--:  Community Controller: PREPARE RUN          
*Debug 01/09 10:59:09.921 Community Controller Traffic1@Network1: Community Controller FSM: ENTRY Action for the State: PREPARE RUN :: Traffic1@Network1 
*Debug 01/09 10:59:09.921 ixKseCommunicator Global: Sending on ports [(1,1,2)]:'<ixlagent-prepare-run-request request-id="1515475728" activityName="Global" port-id="0"/>'.
*Debug 01/09 10:59:09.921 Community Controller: Port Id 192.168.31.42;1;2 timer added.
*Debug 01/09 10:59:09.921 Community Controller Traffic1@Network1: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic1@Network1, TEST NAME: Test1, PREV STATE: 'Community Controller: REGISTER STATS', EVENT RECEIVED:  Community Controller: Prepare Run for the community
  NEW STATE: 'Community Controller: PREPARE RUN', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:09.930 ixKseCommunicator Global: Got from port (1,1,2): '<ixlagent-prepare-run-response request-id="1515475728" activityName="Global" port-id="0"/>'
*Debug 01/09 10:59:09.931 ixKseCommunicator Global: Handling ixlagent message from port (1,1,2): '<ixlagent-prepare-run-response request-id="1515475728" activityName="Global" port-id="0"/>'
*Debug 01/09 10:59:09.931 Traffic1@Network1: Traffic1@Network1: got response for requestType prepare-run on port 0
*Debug 01/09 10:59:09.931 Community Controller: Port Id 192.168.31.42;1;2 task done.
*Debug 01/09 10:59:09.964 Test Controller: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Test Controller, TEST NAME: Test1, PREV STATE: 'TestController: REGISTER STATS', EVENT RECEIVED:  TestController: All Communities Registered their Stats Successfully
  NEW STATE: 'TestController: PREPARE RUN', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:09.990 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:09.990 Community Controller Traffic2@Network2: event ID received =  Community Controller: Prepare Run for the community
*Debug 01/09 10:59:09.990 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: Prepare Run for the community
*Debug 01/09 10:59:09.990 Community Controller Traffic2@Network2: Community Controller FSM: EXIT Action for the State: REGISTER  STATS  :: Traffic2@Network2 
*Debug 01/09 10:59:09.990 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: Prepare Run for the community
*Debug 01/09 10:59:09.990 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EXITING STATE--:  Community Controller: REGISTER STATS       
*Debug 01/09 10:59:09.990 ixFSM:   *** FSM Community Controller Traffic2@Network2 --ENTERING STATE--:  Community Controller: PREPARE RUN          
*Debug 01/09 10:59:09.990 Community Controller Traffic2@Network2: Community Controller FSM: ENTRY Action for the State: PREPARE RUN :: Traffic2@Network2 
*Debug 01/09 10:59:09.990 Community Controller Traffic2@Network2: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic2@Network2, TEST NAME: Test1, PREV STATE: 'Community Controller: REGISTER STATS', EVENT RECEIVED:  Community Controller: Prepare Run for the community
  NEW STATE: 'Community Controller: PREPARE RUN', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:09.990 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 10:59:09.990 Community Controller Traffic2@Network2: event ID received =  Community Controller: Global Prepare Run Response Received
*Debug 01/09 10:59:09.992 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  Community Controller: Global Prepare Run Response Received
*Debug 01/09 10:59:09.992 Test Controller: testName = Test1 ; stateName =  TestController: PREPARE RUN                     ; eventId =  Community Controller: Prepared to Run the community ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:09.992 Community Controller Traffic2@Network2: Community Controller FSM: EXIT Action for the State: PREPARE RUN :: Traffic2@Network2 
*Debug 01/09 10:59:09.992 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  Community Controller: Global Prepare Run Response Received
*Debug 01/09 10:59:09.992 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EXITING STATE--:  Community Controller: PREPARE RUN          
*Debug 01/09 10:59:09.992 ixFSM:   *** FSM Community Controller Traffic2@Network2 --ENTERING STATE--:  Community Controller: RUNNING              
*Debug 01/09 10:59:09.992 Community Controller Traffic2@Network2: Community Controller FSM: ENTRY Action for the State: RUNNING  :: Traffic2@Network2 
*Debug 01/09 10:59:09.993 Network Network2: Could not track Tcp Buffer size on eqatec
*Debug 01/09 10:59:09.993 Community Controller Traffic2@Network2: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic2@Network2, TEST NAME: Test1, PREV STATE: 'Community Controller: PREPARE RUN', EVENT RECEIVED:  Community Controller: Global Prepare Run Response Received
  NEW STATE: 'Community Controller: RUNNING', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:10.22 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 10:59:10.22 Community Controller Traffic1@Network1: event ID received =  Community Controller: Global Prepare Run Response Received
*Debug 01/09 10:59:10.22 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  Community Controller: Global Prepare Run Response Received
*Debug 01/09 10:59:10.22 Test Controller: testName = Test1 ; stateName =  TestController: PREPARE RUN                     ; eventId =  Community Controller: Prepared to Run the community ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:10.22 Community Controller Traffic1@Network1: Community Controller FSM: EXIT Action for the State: PREPARE RUN :: Traffic1@Network1 
*Debug 01/09 10:59:10.22 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  Community Controller: Global Prepare Run Response Received
*Debug 01/09 10:59:10.22 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EXITING STATE--:  Community Controller: PREPARE RUN          
*Debug 01/09 10:59:10.23 ixFSM:   *** FSM Community Controller Traffic1@Network1 --ENTERING STATE--:  Community Controller: RUNNING              
*Debug 01/09 10:59:10.23 Community Controller Traffic1@Network1: Community Controller FSM: ENTRY Action for the State: RUNNING  :: Traffic1@Network1 
*Debug 01/09 10:59:10.23 Network Network1: Could not track Tcp Buffer size on eqatec
*Debug 01/09 10:59:10.23 Community Controller Traffic1@Network1: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic1@Network1, TEST NAME: Test1, PREV STATE: 'Community Controller: PREPARE RUN', EVENT RECEIVED:  Community Controller: Global Prepare Run Response Received
  NEW STATE: 'Community Controller: RUNNING', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:10.65 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:10.65 Test Controller: event ID received =  Community Controller: Prepared to Run the community
*Debug 01/09 10:59:10.65 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  Community Controller: Prepared to Run the community
*Debug 01/09 10:59:10.65 Test Controller: Test Controller FSM: Internal Transition Action: checkAllCommPreparedRun()
*Debug 01/09 10:59:10.65 Test Controller: Total number of communities = 2
*Debug 01/09 10:59:10.65 Test Controller: Communities Prepared Run so far = 1
*Debug 01/09 10:59:10.65 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  Community Controller: Prepared to Run the community
*Debug 01/09 10:59:10.65 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: PREPARE RUN                     
*Debug 01/09 10:59:10.65 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:10.65 Test Controller: event ID received =  Community Controller: Prepared to Run the community
*Debug 01/09 10:59:10.65 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  Community Controller: Prepared to Run the community
*Debug 01/09 10:59:10.65 Test Controller: Test Controller FSM: Internal Transition Action: checkAllCommPreparedRun()
*Debug 01/09 10:59:10.65 Test Controller: Total number of communities = 2
*Debug 01/09 10:59:10.65 Test Controller: Communities Prepared Run so far = 2
*Debug 01/09 10:59:10.65 Test Controller: testName = Test1 ; stateName =  TestController: PREPARE RUN                     ; eventId =  TestController: All Communities Prepared Run ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:10.65 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  Community Controller: Prepared to Run the community
*Debug 01/09 10:59:10.65 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: PREPARE RUN                     
*Debug 01/09 10:59:10.65 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:10.65 Test Controller: event ID received =  TestController: All Communities Prepared Run
*Debug 01/09 10:59:10.65 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: All Communities Prepared Run
*Debug 01/09 10:59:10.118 Test Controller: Test Controller FSM: EXIT Action for the State: PREPARE RUN
*Debug 01/09 10:59:10.118 Test Controller: [ Stopping the Prepare Run Watch Dog Timer. ] Timer ID = 3
*Debug 01/09 10:59:10.118 Event Scheduler: REMOVE Event(). Removing Event Index 3
*Debug 01/09 10:59:10.118 Event Scheduler: Stopping the timer: Event Index 3, timer (1515476349.912, 0, <bound method ixEventScheduler.callback of <Lib.Common.ixEventScheduler.ixEventScheduler object at 0x2EAB1350>>, (3,))
*Debug 01/09 10:59:10.118 Event Scheduler: deleting the event 3
*Debug 01/09 10:59:10.165 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: All Communities Prepared Run
*Debug 01/09 10:59:10.165 ixFSM:   *** FSM Test Controller --EXITING STATE--:  TestController: PREPARE RUN                     
*Debug 01/09 10:59:10.165 ixFSM:   *** FSM Test Controller --ENTERING STATE--:  TestController: Activate Port Groups            
*Debug 01/09 10:59:10.165 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:10.167 Test Controller:              PUBLISHING PRESTATE CHANGE EVENT       
*Debug 01/09 10:59:10.167 Test Controller:  PUBLISHING STATE : [ TestController: Activate Port Groups            ]
*Debug 01/09 10:59:10.167 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:10.167 Test Controller : ixRunStateHandler received event  TestController: Activate Port Groups            
*Debug 01/09 10:59:10.447 Test Controller: Test Controller FSM: ENTRY Action for the State: ActivatePortGroups
*Debug 01/09 10:59:10.447 Test Controller: Need to activate 2 port groups !
*Debug 01/09 10:59:10.516 Test Controller: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Test Controller, TEST NAME: Test1, PREV STATE: 'TestController: PREPARE RUN', EVENT RECEIVED:  TestController: All Communities Prepared Run
  NEW STATE: 'TestController: Activate Port Groups', DESCRIPTION: None, DETAILS: None, STATUS: None
*Info 01/09 10:59:10.661 Network: MME/eNB S11/S1-U : Activated
*Info 01/09 10:59:10.661 Network: GratARP (GratARP-2) : Activated
*Info 01/09 10:59:10.663 Test Controller : Port Group Activated
*Debug 01/09 10:59:10.664 Test Controller: testName = Test1 ; stateName =  TestController: Activate Port Groups            ; eventId =  TestController: Port Group Activated ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:10.716 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:10.716 Test Controller: event ID received =  TestController: Port Group Activated
*Debug 01/09 10:59:10.716 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: Port Group Activated
*Debug 01/09 10:59:10.716 Test Controller: Test Controller FSM: Transition Action: Port Group Activated
*Debug 01/09 10:59:10.716 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: Port Group Activated
*Debug 01/09 10:59:10.716 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: Activate Port Groups            
*Info 01/09 10:59:10.862 Network: GratARP (GratARP-1) : Activated
*Info 01/09 10:59:10.862 Test Controller : Port Group Activated
*Debug 01/09 10:59:10.864 Test Controller: testName = Test1 ; stateName =  TestController: Activate Port Groups            ; eventId =  TestController: Port Group Activated ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:10.915 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:10.915 Test Controller: event ID received =  TestController: Port Group Activated
*Debug 01/09 10:59:10.915 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: Port Group Activated
*Debug 01/09 10:59:10.915 Test Controller: Test Controller FSM: Transition Action: Port Group Activated
*Debug 01/09 10:59:10.915 Test Controller: All PortGroups activated
*Debug 01/09 10:59:10.915 Test Controller: testName = Test1 ; stateName =  TestController: Activate Port Groups            ; eventId =  TestController: All Port Groups Activated ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:10.915 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: Port Group Activated
*Debug 01/09 10:59:10.915 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: Activate Port Groups            
*Debug 01/09 10:59:10.915 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:10.917 Test Controller: event ID received =  TestController: All Port Groups Activated
*Debug 01/09 10:59:10.917 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: All Port Groups Activated
*Debug 01/09 10:59:10.967 Test Controller: Test Controller FSM: EXIT Action for the State: Activate Port Groups
*Debug 01/09 10:59:11.16 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: All Port Groups Activated
*Debug 01/09 10:59:11.17 ixFSM:   *** FSM Test Controller --EXITING STATE--:  TestController: Activate Port Groups            
*Debug 01/09 10:59:11.17 ixFSM:   *** FSM Test Controller --ENTERING STATE--:  TestController: STARTING STAT REQUEST           
*Debug 01/09 10:59:11.17 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:11.17 Test Controller:              PUBLISHING PRESTATE CHANGE EVENT       
*Debug 01/09 10:59:11.17 Test Controller:  PUBLISHING STATE : [ TestController: STARTING STAT REQUEST           ]
*Debug 01/09 10:59:11.17 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:11.17 Test Controller : ixRunStateHandler received event  TestController: STARTING STAT REQUEST           
*Debug 01/09 10:59:11.73 Test Controller: Test Controller FSM: ENTRY Action for the State: STARTING STATS
*Debug 01/09 10:59:11.81 Stat Controller: setStartTime() = 1515475751072
*Debug 01/09 10:59:11.91 Test: Frame size distribution view NOT SUPPORTED - Test option is not enabled
*Debug 01/09 10:59:11.91 Stat Controller: Frame Size Distribution Enabled - False
*Debug 01/09 10:59:11.91 Stat Controller: Frame Size Distribution Enabled - False
*Debug 01/09 10:59:11.91 Stat Controller: ixViewsManager is not available
*Debug 01/09 10:59:11.92 Test: Frame size distribution view NOT SUPPORTED - Test option is not enabled
*Debug 01/09 10:59:11.92 Stat Controller: Port CPU Statistics view enabled - [(1,1,2), (1,1,3)]
*Debug 01/09 10:59:11.92 Stat Controller: L2-3 Stats for Client Ports view enabled - [(1,1,2)]
*Debug 01/09 10:59:11.92 Stat Controller: L2-3 Stats for Server Ports view enabled - [(1,1,3)]
*Debug 01/09 10:59:11.94 Stat Controller: L2-3 Throughput Stats view enabled - [(1,1,2), (1,1,3)]
*Info 01/09 10:59:11.102 Test Controller: Starting the STAT Requests...
*Debug 01/09 10:59:11.112 Stat Controller: STAT CONTROLLER: startRequests()
*Debug 01/09 10:59:11.112 Stat Controller: @ Waiting for all requests to become registered...
*Debug 01/09 10:59:11.112 Stat Controller: *** ZeroTime()->StartTime(): sleep time = 0.466000
*Debug 01/09 10:59:11.579 Stat Controller: @ Waiting for all requests to become active...
*Debug 01/09 10:59:11.680 Stat Controller: @ All requests are active...
*Debug 01/09 10:59:11.680 Stat Controller: Starting stat threads
*Debug 01/09 10:59:11.680 ixStatThread statThread[1]: Starting the stat thread statThread[1]. Polling interval = 1
*Debug 01/09 10:59:11.680 ixStatThread statThread[1]: Starting with 1 plugins
*Debug 01/09 10:59:11.681 ixStatThread statThread[2]: Starting the stat thread statThread[2]. Polling interval = 2
*Debug 01/09 10:59:11.681 ixStatThread statThread[2]: Starting with 6 plugins
*Debug 01/09 10:59:11.683 ixStatThread statThread[4]: Starting the stat thread statThread[4]. Polling interval = 4
*Debug 01/09 10:59:11.684 ixStatThread statThread[4]: Starting with 1 plugins
*Debug 01/09 10:59:11.684 Event Scheduler: addEvent() Function. interval = 0, action = <bound method ixTestControllerFSMThread._testStartEventWatchDogTimerExpired of <ixTestControllerFSMThread(Test Controller, started daemon 145276)>>, actionArguments=(()), iteration=0, startDelay=1200 and Timer Index = 4
*Debug 01/09 10:59:11.684 Event Scheduler: EVENT ADDED to the events map. Timer Index=4
*Debug 01/09 10:59:11.684 Test Controller: [ Stat Request Ready Event Watch Dog Timer created. ] Timer ID = 4 
*Debug 01/09 10:59:11.684 Test Controller: [ Configured timeout interval = 0 s, start delay = 1200 s. ]
*Debug 01/09 10:59:11.686 Test Controller: testName = Test1 ; stateName =  TestController: STARTING STAT REQUEST           ; eventId =  TestController: All Communities have started their Stats Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:11.734 Test Controller: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Test Controller, TEST NAME: Test1, PREV STATE: 'TestController: Activate Port Groups', EVENT RECEIVED:  TestController: All Port Groups Activated
  NEW STATE: 'TestController: STARTING STAT REQUEST', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:11.743 Stat Controller: tsStartTest()
*Debug 01/09 10:59:11.743 Stat Controller: Stat manager Start starts...
*Debug 01/09 10:59:11.743 Stat Controller: ixViewsManager is not available
*Debug 01/09 10:59:11.744 Test Controller : hasResultFolderCreatedAtApplyConfig = True
*Debug 01/09 10:59:11.859 Stat Controller: Stack Manager CSV Logger Stopped
*Debug 01/09 10:59:11.859 Stat Controller: Writing Stack Manager CSV files
*Debug 01/09 10:59:11.865 Stat Controller: Begin clearing SM stats ...
*Info 01/09 10:59:11.865 Network: OK - Ethernet (Ethernet-1) : Clearing stats
*Info 01/09 10:59:11.865 Network: OK - Ethernet (Ethernet-1) : Clearing stats - Done
*Info 01/09 10:59:11.867 Network: OK - MAC/VLAN (MAC/VLAN-1) : Clearing stats
*Info 01/09 10:59:11.868 Network: OK - MAC/VLAN (MAC/VLAN-1) : Clearing stats - Done
*Info 01/09 10:59:11.868 Network: OK - IP (IP-1) : Clearing stats
*Info 01/09 10:59:11.868 Network: OK - IP (IP-1) : Clearing stats - Done
*Info 01/09 10:59:11.868 Network: OK - MME/eNB S11/S1-U : Clearing stats
*Info 01/09 10:59:12.72 Network: OK - Cleared DNSPlugin stats
*Info 01/09 10:59:12.75 Network: OK - MME/eNB S11/S1-U : Clearing stats - Done
*Info 01/09 10:59:12.75 Network: OK - SM_DNS (SM_DNS-2) : Clearing stats
*Info 01/09 10:59:12.75 Network: OK - Cleared DNSPlugin stats
*Info 01/09 10:59:12.75 Network: OK - SM_DNS (SM_DNS-2) : Clearing stats - Done
*Info 01/09 10:59:12.75 Network: OK - Ethernet (Ethernet-2) : Clearing stats
*Info 01/09 10:59:12.75 Network: OK - Ethernet (Ethernet-2) : Clearing stats - Done
*Info 01/09 10:59:12.76 Network: OK - MAC/VLAN (MAC/VLAN-4) : Clearing stats
*Info 01/09 10:59:12.76 Network: OK - MAC/VLAN (MAC/VLAN-4) : Clearing stats - Done
*Info 01/09 10:59:12.78 Network: OK - IP (IP-2) : Clearing stats
*Info 01/09 10:59:12.78 Network: OK - IP (IP-2) : Clearing stats - Done
*Info 01/09 10:59:12.78 Network: OK - SM_DCPProxy (SM_DCPProxy-1) : Clearing stats
*Info 01/09 10:59:12.78 Network: OK - SM_DCPProxy (SM_DCPProxy-1) : Clearing stats - Done
*Debug 01/09 10:59:12.78 Stat Controller: Completed clearing SM stats ...
*Debug 01/09 10:59:12.250 Stat Controller: Stack Manager CSV Logger Started
*Debug 01/09 10:59:12.250 Stat Controller: statManagerStartEx()
*Debug 01/09 10:59:12.250 Stat Controller: Stat manager starts for publisher=Stackmanager with logResults=True, ignoreAction=True, resetViews=True and resetResultFolder=False ...
*Debug 01/09 10:59:15.20 Stat Controller: Stat manager started for publisher=Stackmanager with logResults=True, ignoreAction=True, resetViews=True and resetResultFolder=False
*Debug 01/09 10:59:15.22 Test Controller : hasResultFolderCreatedAtApplyConfig = True
*Debug 01/09 10:59:15.22 Stat Controller: getInterfaceViews()
*Debug 01/09 10:59:15.23 Stat Controller: statManagerStartEx()
*Debug 01/09 10:59:15.23 Stat Controller: Stat manager starts for publisher=IxLoad with logResults=True, ignoreAction=False, resetViews=True and resetResultFolder=False ...
*Debug 01/09 10:59:15.23 Stat Controller: Stat manager started for publisher=IxLoad with logResults=True, ignoreAction=False, resetViews=True and resetResultFolder=False
*Debug 01/09 10:59:15.23 Stat Controller: Stat manager Start finishes
*Debug 01/09 10:59:15.23 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:15.23 Test Controller: event ID received =  TestController: All Communities have started their Stats Successfully
*Debug 01/09 10:59:15.25 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: All Communities have started their Stats Successfully
*Debug 01/09 10:59:15.25 Test Controller: Test Controller FSM: Internal Transition Action: AllCommStatsStarted()
*Debug 01/09 10:59:15.25 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: All Communities have started their Stats Successfully
*Debug 01/09 10:59:15.25 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: STARTING STAT REQUEST           
*Debug 01/09 10:59:19.382 Test Controller : Test Controller: testServerCallback_StatRequestReady() id = -1, publisher = Stackmanager, exception = None
*Debug 01/09 10:59:19.382 Test Controller : testServerCallback_StatRequestReady - Test Controller: curState =  TestController: STARTING STAT REQUEST           
*Info 01/09 10:59:19.384 Test Controller : The Stat requests are done for publisher Stackmanager
*Debug 01/09 10:59:20.92 Test Controller : Test Controller: testServerCallback_StatRequestReady() id = -1, publisher = Stackmanager, exception = None
*Debug 01/09 10:59:20.92 Test Controller : testServerCallback_StatRequestReady - Test Controller: curState =  TestController: STARTING STAT REQUEST           
*Info 01/09 10:59:20.94 Test Controller : The Stat requests are done for publisher Stackmanager
*Debug 01/09 10:59:20.94 Test Controller : Test Controller: testServerCallback_StatRequestReady() id = -1, publisher = IxLoad, exception = None
*Debug 01/09 10:59:20.94 Test Controller: testName = Test1 ; stateName =  TestController: STARTING STAT REQUEST           ; eventId =  TestController: Received event from the Test Server - Stat Request Ready ; errDescription = None ; details = None; status = None
*Info 01/09 10:59:20.94 Test Controller : The Stat requests are done for publisher IxLoad
*Debug 01/09 10:59:20.125 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:20.125 Test Controller: event ID received =  TestController: Received event from the Test Server - Stat Request Ready
*Debug 01/09 10:59:20.125 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: Received event from the Test Server - Stat Request Ready
*Debug 01/09 10:59:20.125 Test Controller: Test Controller FSM: Internal Transition Action: TSrv_StatRequestEventRecv()
*Debug 01/09 10:59:20.125 Test Controller: testName = Test1 ; stateName =  TestController: STARTING STAT REQUEST           ; eventId =  TestController: All stats started and received the event from the test server. Run the test now ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:20.125 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: Received event from the Test Server - Stat Request Ready
*Debug 01/09 10:59:20.125 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: STARTING STAT REQUEST           
*Debug 01/09 10:59:20.125 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:20.125 Test Controller: event ID received =  TestController: All stats started and received the event from the test server. Run the test now
*Debug 01/09 10:59:20.125 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: All stats started and received the event from the test server. Run the test now
*Debug 01/09 10:59:20.125 Test Controller: << Condition >>  : Timeline type Option = 3
*Debug 01/09 10:59:20.194 Test Controller: Test Controller FSM: EXIT Action for the State: STARTING STATS
*Debug 01/09 10:59:20.194 Test Controller: [ Stopping the Stat Request Ready Event Watch Dog Timer. ] Timer ID = 4
*Debug 01/09 10:59:20.194 Event Scheduler: REMOVE Event(). Removing Event Index 4
*Debug 01/09 10:59:20.194 Event Scheduler: Stopping the timer: Event Index 4, timer (1515476951.685, 0, <bound method ixEventScheduler.callback of <Lib.Common.ixEventScheduler.ixEventScheduler object at 0x2EAB1350>>, (4,))
*Debug 01/09 10:59:20.196 Event Scheduler: deleting the event 4
*Debug 01/09 10:59:20.266 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: All stats started and received the event from the test server. Run the test now
*Debug 01/09 10:59:20.266 ixFSM:   *** FSM Test Controller --EXITING STATE--:  TestController: STARTING STAT REQUEST           
*Debug 01/09 10:59:20.266 ixFSM:   *** FSM Test Controller --ENTERING STATE--:  TestController: STARTING MATCH LONGEST TIMELINE 
*Debug 01/09 10:59:20.266 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:20.266 Test Controller:              PUBLISHING PRESTATE CHANGE EVENT       
*Debug 01/09 10:59:20.266 Test Controller:  PUBLISHING STATE : [ TestController: STARTING MATCH LONGEST TIMELINE ]
*Debug 01/09 10:59:20.267 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:20.267 Test Controller : ixRunStateHandler received event  TestController: STARTING MATCH LONGEST TIMELINE 
*Debug 01/09 10:59:20.322 Test Controller: Test Controller FSM: ENTRY Action for the State: STARTING MATCH LONGEST TIMELINE
*Debug 01/09 10:59:20.322 Test Controller: Starting the Match Longest Timeline
*Debug 01/09 10:59:20.322 Timeline Controller: Sending event for the timeline controller <Match Longest> current state =  Timeline Controller: INIT                       eventId =  Timeline Controller: Start the run description = None details = None status = None
*Debug 01/09 10:59:20.329 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:20.329 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: Start the run
*Debug 01/09 10:59:20.329 ixFSM:   *** FSM Timeline <Match Longest>: --EVENT RECEIVED--:  Timeline Controller: Start the run
*Debug 01/09 10:59:20.329 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: INIT :: <Match Longest> 
*Debug 01/09 10:59:20.329 ixFSM:   *** FSM Timeline <Match Longest> --EVENT PROCESSED--:  Timeline Controller: Start the run
*Debug 01/09 10:59:20.329 ixFSM:   *** FSM Timeline <Match Longest> --EXITING STATE--:  Timeline Controller: INIT                      
*Debug 01/09 10:59:20.329 ixFSM:   *** FSM Timeline <Match Longest> --ENTERING STATE--:  Timeline Controller: PREPARE RUN               
*Debug 01/09 10:59:20.329 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: Prepare Run :: <Match Longest> 
*Debug 01/09 10:59:20.331 Timeline Controller: <Match Longest> getIterationTime() = 140
*Debug 01/09 10:59:20.331 Timeline Controller: <Match Longest> getStandbyTime() = 0
*Debug 01/09 10:59:20.331 Timeline Controller: <Match Longest> Created Async Timer with the timer Run Duration = 360 async timer id = (1515476120.331, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 10:59:20.331 Timeline Controller: prepareRun <Match Longest>
*Debug 01/09 10:59:20.331 Timeline Controller: <Match Longest> registerActivityCallback HTTPServer1 - <Lib.TestEnvelope.ixActivity.ixActivity object at 0x2EAA04F0>
*Debug 01/09 10:59:20.331 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1]
*Debug 01/09 10:59:20.331 Timeline Controller: <Match Longest> registerActivityCallback eGTP Control Plane - <Lib.TestEnvelope.ixNetworkActivity.ixNetworkActivity object at 0x2853B330>
*Debug 01/09 10:59:20.332 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1, eGTP Control Plane]
*Debug 01/09 10:59:20.332 Community Controller: websvr_HTTPServer1 - complete_configuration
*Debug 01/09 10:59:20.332 Community Controller: Sending 'PortId=3
type=complete_configuration' to websvr_HTTPServer1 on ports [[(1,1,3)]]...
*Debug 01/09 10:59:20.332 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT RECEIVED--: 'PrepareRun Request' in state 'Configured'
*Debug 01/09 10:59:20.332 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline <Match Longest>, TEST NAME: Test1, PREV STATE: 'Timeline Controller: INIT', EVENT RECEIVED:  Timeline Controller: Start the run
  NEW STATE: 'Timeline Controller: INIT', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:20.332 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --PROCESSING EVENT--: 'PrepareRun Request' in  state 'Configured'
*Debug 01/09 10:59:20.332 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXITING STATE--:'Configured'
*Debug 01/09 10:59:20.334 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXECUTING TRANSITION--:'Generic: transition=SendPrepareRunRequest guard=null' in state 'Configured'
*Debug 01/09 10:59:20.334 ixKseCommunicator eGTP Control Plane: Sending on ports [(1,1,2)]:'<ixlagent-prepare-run-request request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'.
*Debug 01/09 10:59:20.334 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT PROCESSED--: 'PrepareRun Request' Result='Handled' in state 'Configured'
*Debug 01/09 10:59:20.335 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --ENTERING STATE--:'Prepare Run Request'
*Debug 01/09 10:59:20.335 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STARTING TIMER-- for state'Prepare Run Request'
*Debug 01/09 10:59:20.335 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STATE CHANGED-- from 'Configured' to 'Prepare Run Request' after handling event 'PrepareRun Request'
*Debug 01/09 10:59:20.375 Test Controller: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Test Controller, TEST NAME: Test1, PREV STATE: 'TestController: STARTING STAT REQUEST', EVENT RECEIVED:  TestController: All stats started and received the event from the test server. Run the test now
  NEW STATE: 'TestController: STARTING MATCH LONGEST TIMELINE', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:20.384 ixKseCommunicator eGTP Control Plane: Got from port (1,1,2): '<ixlagent-prepare-run-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'
*Debug 01/09 10:59:20.384 ixKseCommunicator eGTP Control Plane: Handling ixlagent message from port (1,1,2): '<ixlagent-prepare-run-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'
*Debug 01/09 10:59:20.385 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT RECEIVED--: 'PrepareRun Response' in state 'Prepare Run Request'
*Debug 01/09 10:59:20.385 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --PROCESSING EVENT--: 'PrepareRun Response' in  state 'Prepare Run Request'
*Debug 01/09 10:59:20.385 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STOPPING TIMER-- for state'Prepare Run Request'
*Debug 01/09 10:59:20.385 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXITING STATE--:'Prepare Run Request'
*Debug 01/09 10:59:20.385 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXECUTING TRANSITION--:'Generic: transition=GotKseResponse guard=CheckIfAllPortsDone' in state 'Prepare Run Request'
*Debug 01/09 10:59:20.387 Timeline Controller: <Match Longest> activityCallback from agent eGTP Control Plane - error = 
*Debug 01/09 10:59:20.387 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1]
*Debug 01/09 10:59:20.387 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT PROCESSED--: 'PrepareRun Response' Result='Handled' in state 'Prepare Run Request'
*Debug 01/09 10:59:20.387 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --ENTERING STATE--:'RunPrepared'
*Debug 01/09 10:59:20.387 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STATE CHANGED-- from 'Prepare Run Request' to 'RunPrepared' after handling event 'PrepareRun Response'
*Debug 01/09 10:59:20.589 Timeline Controller: <Match Longest> activityCallback from agent HTTPServer1 - error = None
*Debug 01/09 10:59:20.589 Timeline Controller: <Match Longest> asyncActivityList = []
*Debug 01/09 10:59:20.589 Timeline Controller: Sending event for the timeline controller <Match Longest> current state =  Timeline Controller: PREPARE RUN                eventId =  Timeline Controller: All activities prepared run description = None details = None status = None
*Debug 01/09 10:59:20.632 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:20.632 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities prepared run
*Debug 01/09 10:59:20.632 ixFSM:   *** FSM Timeline <Match Longest>: --EVENT RECEIVED--:  Timeline Controller: All activities prepared run
*Debug 01/09 10:59:20.634 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: PREPARE RUN :: <Match Longest> 
*Debug 01/09 10:59:20.634 Timeline Controller: <Match Longest> Clearing the Async Timer timer (1515476120.331, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 10:59:20.634 ixFSM:   *** FSM Timeline <Match Longest> --EVENT PROCESSED--:  Timeline Controller: All activities prepared run
*Debug 01/09 10:59:20.634 ixFSM:   *** FSM Timeline <Match Longest> --EXITING STATE--:  Timeline Controller: PREPARE RUN               
*Debug 01/09 10:59:20.634 ixFSM:   *** FSM Timeline <Match Longest> --ENTERING STATE--:  Timeline Controller: START LISTENING           
*Debug 01/09 10:59:20.634 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: START LISTENING :: <Match Longest> 
*Debug 01/09 10:59:20.634 Timeline Controller: <Match Longest> getIterationTime() = 140
*Debug 01/09 10:59:20.634 Timeline Controller: <Match Longest> getStandbyTime() = 0
*Debug 01/09 10:59:20.634 Timeline Controller: <Match Longest> Created Async Timer with the timer Run Duration = 450 async timer id = (1515476210.635, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 10:59:20.635 Timeline Controller: startListening <Match Longest>
*Debug 01/09 10:59:20.637 Timeline Controller: <Match Longest> registerActivityCallback HTTPServer1 - <Lib.TestEnvelope.ixActivity.ixActivity object at 0x2EAA04F0>
*Debug 01/09 10:59:20.637 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1]
*Debug 01/09 10:59:20.637 Timeline Controller: <Match Longest> registerActivityCallback eGTP Control Plane - <Lib.TestEnvelope.ixNetworkActivity.ixNetworkActivity object at 0x2853B330>
*Debug 01/09 10:59:20.637 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1, eGTP Control Plane]
*Debug 01/09 10:59:20.637 Community Controller: websvr_HTTPServer1 - Starting HTTP Server
*Debug 01/09 10:59:20.638 Community Controller: Sending 'PortId=3
type=start' to websvr_HTTPServer1 on ports [[(1,1,3)]]...
*Debug 01/09 10:59:20.638 Community Controller: Sending 'PortId=3
type=start_listening' to websvr_HTTPServer1 on ports [[(1,1,3)]]...
*Debug 01/09 10:59:20.638 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT RECEIVED--: 'Start Listening Request' in state 'RunPrepared'
*Debug 01/09 10:59:20.638 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline <Match Longest>, TEST NAME: Test1, PREV STATE: 'Timeline Controller: PREPARE RUN', EVENT RECEIVED:  Timeline Controller: All activities prepared run
  NEW STATE: 'Timeline Controller: PREPARE RUN', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:20.638 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --PROCESSING EVENT--: 'Start Listening Request' in  state 'RunPrepared'
*Debug 01/09 10:59:20.640 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXITING STATE--:'RunPrepared'
*Debug 01/09 10:59:20.641 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXECUTING TRANSITION--:'Generic: transition=SendStartListeningRequest guard=null' in state 'RunPrepared'
*Debug 01/09 10:59:20.641 ixKseCommunicator eGTP Control Plane: Sending on ports [(1,1,2)]:'<ixlagent-start-listening-request request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'.
*Debug 01/09 10:59:20.641 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT PROCESSED--: 'Start Listening Request' Result='Handled' in state 'RunPrepared'
*Debug 01/09 10:59:20.642 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --ENTERING STATE--:'Start Listening Request'
*Debug 01/09 10:59:20.644 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STARTING TIMER-- for state'Start Listening Request'
*Debug 01/09 10:59:20.645 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STATE CHANGED-- from 'RunPrepared' to 'Start Listening Request' after handling event 'Start Listening Request'
*Debug 01/09 10:59:20.688 ixKseCommunicator eGTP Control Plane: Got from port (1,1,2): '<ixlagent-start-listening-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'
*Debug 01/09 10:59:20.688 ixKseCommunicator eGTP Control Plane: Handling ixlagent message from port (1,1,2): '<ixlagent-start-listening-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'
*Debug 01/09 10:59:20.690 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT RECEIVED--: 'Start Listening Response' in state 'Start Listening Request'
*Debug 01/09 10:59:20.690 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --PROCESSING EVENT--: 'Start Listening Response' in  state 'Start Listening Request'
*Debug 01/09 10:59:20.691 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STOPPING TIMER-- for state'Start Listening Request'
*Debug 01/09 10:59:20.693 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXITING STATE--:'Start Listening Request'
*Debug 01/09 10:59:20.693 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXECUTING TRANSITION--:'Generic: transition=GotKseResponse guard=CheckIfAllPortsDone' in state 'Start Listening Request'
*Debug 01/09 10:59:20.693 Timeline Controller: <Match Longest> activityCallback from agent eGTP Control Plane - error = 
*Debug 01/09 10:59:20.694 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1]
*Debug 01/09 10:59:20.694 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT PROCESSED--: 'Start Listening Response' Result='Handled' in state 'Start Listening Request'
*Debug 01/09 10:59:20.694 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --ENTERING STATE--:'Listening'
*Debug 01/09 10:59:20.694 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STATE CHANGED-- from 'Start Listening Request' to 'Listening' after handling event 'Start Listening Response'
*Debug 01/09 10:59:21.42 Timeline Controller: <Match Longest> activityCallback from agent HTTPServer1 - error = None
*Debug 01/09 10:59:21.42 Timeline Controller: <Match Longest> asyncActivityList = []
*Debug 01/09 10:59:21.42 Timeline Controller: Sending event for the timeline controller <Match Longest> current state =  Timeline Controller: START LISTENING            eventId =  Timeline Controller: All activities started listening description = None details = None status = None
*Debug 01/09 10:59:21.140 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:21.140 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities started listening
*Debug 01/09 10:59:21.140 ixFSM:   *** FSM Timeline <Match Longest>: --EVENT RECEIVED--:  Timeline Controller: All activities started listening
*Debug 01/09 10:59:21.140 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: START LISTENING :: <Match Longest> 
*Debug 01/09 10:59:21.141 Timeline Controller: <Match Longest> Clearing the Async Timer timer (1515476210.635, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 10:59:21.141 Test Controller: testName = Test1 ; stateName =  TestController: STARTING MATCH LONGEST TIMELINE ; eventId =  TestController: Timeline Started Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:21.141 ixFSM:   *** FSM Timeline <Match Longest> --EVENT PROCESSED--:  Timeline Controller: All activities started listening
*Debug 01/09 10:59:21.141 ixFSM:   *** FSM Timeline <Match Longest> --EXITING STATE--:  Timeline Controller: START LISTENING           
*Debug 01/09 10:59:21.142 ixFSM:   *** FSM Timeline <Match Longest> --ENTERING STATE--:  Timeline Controller: STANDBY                   
*Debug 01/09 10:59:21.142 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: STANDBY :: <Match Longest> 
*Debug 01/09 10:59:21.142 Timeline Controller: <Match Longest> getStandbyTime() = 0
*Debug 01/09 10:59:21.144 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline <Match Longest>, TEST NAME: Test1, PREV STATE: 'Timeline Controller: START LISTENING', EVENT RECEIVED:  Timeline Controller: All activities started listening
  NEW STATE: 'Timeline Controller: START LISTENING', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:21.176 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:21.176 Test Controller: event ID received =  TestController: Timeline Started Successfully
*Debug 01/09 10:59:21.176 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: Timeline Started Successfully
*Debug 01/09 10:59:21.177 Test Controller: << Condition >>  : Match Network Timeline Option = False
*Debug 01/09 10:59:21.177 Test Controller: Test Controller FSM: Internal Transition Action: _TransAction_CheckAllTimelinesStarted()
*Debug 01/09 10:59:21.177 Test Controller: Total number of timelines = 2
*Debug 01/09 10:59:21.177 Test Controller: Timelines started so far = 1
*Debug 01/09 10:59:21.230 Test Controller: Test Controller FSM: EXIT Action for the State: STARTING MATCH LONGEST TIMELINE
*Debug 01/09 10:59:21.273 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: Timeline Started Successfully
*Debug 01/09 10:59:21.273 ixFSM:   *** FSM Test Controller --EXITING STATE--:  TestController: STARTING MATCH LONGEST TIMELINE 
*Debug 01/09 10:59:21.273 ixFSM:   *** FSM Test Controller --ENTERING STATE--:  TestController: STARTING TIMELINES              
*Debug 01/09 10:59:21.273 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:21.273 Test Controller:              PUBLISHING PRESTATE CHANGE EVENT       
*Debug 01/09 10:59:21.273 Test Controller:  PUBLISHING STATE : [ TestController: STARTING TIMELINES              ]
*Debug 01/09 10:59:21.273 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:21.273 Test Controller : ixRunStateHandler received event  TestController: STARTING TIMELINES              
*Debug 01/09 10:59:21.315 Test Controller: Test Controller FSM: ENTRY Action for the State: STARTING TIMELINES
*Debug 01/09 10:59:21.315 Test Controller: Sending 'Start Run' event to all the Timeline Controllers
*Debug 01/09 10:59:21.315 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: INIT                       eventId =  Timeline Controller: Start the run description = None details = None status = None
*Debug 01/09 10:59:21.344 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:21.344 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: Start the run
*Debug 01/09 10:59:21.344 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: Start the run
*Debug 01/09 10:59:21.344 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: INIT :: Timeline1 
*Debug 01/09 10:59:21.344 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: Start the run
*Debug 01/09 10:59:21.344 ixFSM:   *** FSM Timeline Timeline1 --EXITING STATE--:  Timeline Controller: INIT                      
*Debug 01/09 10:59:21.344 ixFSM:   *** FSM Timeline Timeline1 --ENTERING STATE--:  Timeline Controller: PREPARE RUN               
*Debug 01/09 10:59:21.344 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: Prepare Run :: Timeline1 
*Debug 01/09 10:59:21.345 Timeline Controller: Timeline1 getIterationTime() = 140
*Debug 01/09 10:59:21.345 Timeline Controller: Timeline1 getStandbyTime() = 0
*Debug 01/09 10:59:21.345 Timeline Controller: Timeline1 Created Watch Dog Timer with the timer Run Duration = 775 watch dog timer id = (1515476536.345, 0, <bound method ixTimelineController.watchDogIterationDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 10:59:21.345 Timeline Controller: Timeline1 Created Async Timer with the timer Run Duration = 360 async timer id = (1515476121.345, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 10:59:21.345 Timeline Controller: prepareRun Timeline1
*Debug 01/09 10:59:21.345 Timeline Controller: Timeline1 registerActivityCallback HTTPClient1 - <Lib.TestEnvelope.ixActivity.ixActivity object at 0x287DCA70>
*Debug 01/09 10:59:21.345 Timeline Controller: Timeline1 asyncActivityList = [HTTPClient1]
*Debug 01/09 10:59:21.345 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT RECEIVED--: 'PrepareRun Request' in state 'Configured'
*Debug 01/09 10:59:21.345 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: INIT', EVENT RECEIVED:  Timeline Controller: Start the run
  NEW STATE: 'Timeline Controller: INIT', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:21.345 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --PROCESSING EVENT--: 'PrepareRun Request' in  state 'Configured'
*Debug 01/09 10:59:21.346 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXITING STATE--:'Configured'
*Debug 01/09 10:59:21.346 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXECUTING TRANSITION--:'Generic: transition=SendPrepareRunRequest guard=null' in state 'Configured'
*Debug 01/09 10:59:21.346 ixKseCommunicator HTTPClient1: Sending on ports [(1,1,2)]:'<ixlagent-prepare-run-request request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'.
*Debug 01/09 10:59:21.346 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT PROCESSED--: 'PrepareRun Request' Result='Handled' in state 'Configured'
*Debug 01/09 10:59:21.346 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --ENTERING STATE--:'Prepare Run Request'
*Debug 01/09 10:59:21.346 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STARTING TIMER-- for state'Prepare Run Request'
*Debug 01/09 10:59:21.346 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STATE CHANGED-- from 'Configured' to 'Prepare Run Request' after handling event 'PrepareRun Request'
*Debug 01/09 10:59:21.355 Test Controller: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Test Controller, TEST NAME: Test1, PREV STATE: 'TestController: STARTING MATCH LONGEST TIMELINE', EVENT RECEIVED:  TestController: Timeline Started Successfully
  NEW STATE: 'TestController: STARTING TIMELINES', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:21.369 Timeline Controller: Sending event for the timeline controller <Match Longest> current state =  Timeline Controller: STANDBY                    eventId =  Timeline Controller: Standby timer expired description = None details = None status = None
*Debug 01/09 10:59:21.394 ixKseCommunicator HTTPClient1: Got from port (1,1,2): '<ixlagent-prepare-run-response request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'
*Debug 01/09 10:59:21.394 ixKseCommunicator HTTPClient1: Handling ixlagent message from port (1,1,2): '<ixlagent-prepare-run-response request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'
*Debug 01/09 10:59:21.395 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT RECEIVED--: 'PrepareRun Response' in state 'Prepare Run Request'
*Debug 01/09 10:59:21.395 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --PROCESSING EVENT--: 'PrepareRun Response' in  state 'Prepare Run Request'
*Debug 01/09 10:59:21.397 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STOPPING TIMER-- for state'Prepare Run Request'
*Debug 01/09 10:59:21.397 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXITING STATE--:'Prepare Run Request'
*Debug 01/09 10:59:21.397 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXECUTING TRANSITION--:'Generic: transition=GotKseResponse guard=CheckIfAllPortsDone' in state 'Prepare Run Request'
*Debug 01/09 10:59:21.397 Timeline Controller: Timeline1 activityCallback from agent HTTPClient1 - error = 
*Debug 01/09 10:59:21.397 Timeline Controller: Timeline1 asyncActivityList = []
*Debug 01/09 10:59:21.397 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: PREPARE RUN                eventId =  Timeline Controller: All activities prepared run description = None details = None status = None
*Debug 01/09 10:59:21.398 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT PROCESSED--: 'PrepareRun Response' Result='Handled' in state 'Prepare Run Request'
*Debug 01/09 10:59:21.398 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --ENTERING STATE--:'RunPrepared'
*Debug 01/09 10:59:21.398 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STATE CHANGED-- from 'Prepare Run Request' to 'RunPrepared' after handling event 'PrepareRun Response'
*Debug 01/09 10:59:21.446 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:21.446 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: Standby timer expired
*Debug 01/09 10:59:21.446 ixFSM:   *** FSM Timeline <Match Longest>: --EVENT RECEIVED--:  Timeline Controller: Standby timer expired
*Debug 01/09 10:59:21.447 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: STANDBY :: <Match Longest> 
*Debug 01/09 10:59:21.447 ixFSM:   *** FSM Timeline <Match Longest> --EVENT PROCESSED--:  Timeline Controller: Standby timer expired
*Debug 01/09 10:59:21.447 ixFSM:   *** FSM Timeline <Match Longest> --EXITING STATE--:  Timeline Controller: STANDBY                   
*Debug 01/09 10:59:21.447 ixFSM:   *** FSM Timeline <Match Longest> --ENTERING STATE--:  Timeline Controller: START TRAFFIC             
*Debug 01/09 10:59:21.447 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: START TRAFFIC :: <Match Longest> 
*Debug 01/09 10:59:21.447 Timeline Controller: <Match Longest> Created Async Timer with the timer Run Duration = 360 async timer id = (1515476121.447, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 10:59:21.447 Timeline Controller: startTraffic <Match Longest>
*Debug 01/09 10:59:21.447 Timeline Controller: <Match Longest> registerActivityCallback HTTPServer1 - <Lib.TestEnvelope.ixActivity.ixActivity object at 0x2EAA04F0>
*Debug 01/09 10:59:21.447 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1]
*Debug 01/09 10:59:21.447 Timeline Controller: <Match Longest> registerActivityCallback eGTP Control Plane - <Lib.TestEnvelope.ixNetworkActivity.ixNetworkActivity object at 0x2853B330>
*Debug 01/09 10:59:21.447 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1, eGTP Control Plane]
*Debug 01/09 10:59:21.447 Community Controller: Sending 'PortId=3
type=start_traffic' to websvr_HTTPServer1 on ports [[(1,1,3)]]...
*Debug 01/09 10:59:21.447 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT RECEIVED--: 'Run Request' in state 'Listening'
*Debug 01/09 10:59:21.447 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline <Match Longest>, TEST NAME: Test1, PREV STATE: 'Timeline Controller: STANDBY', EVENT RECEIVED:  Timeline Controller: Standby timer expired
  NEW STATE: 'Timeline Controller: STANDBY', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:21.448 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --PROCESSING EVENT--: 'Run Request' in  state 'Listening'
*Debug 01/09 10:59:21.448 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:21.448 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXITING STATE--:'Listening'
*Debug 01/09 10:59:21.450 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities prepared run
*Debug 01/09 10:59:21.450 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXECUTING TRANSITION--:'Generic: transition=SendRunRequest guard=null' in state 'Listening'
*Debug 01/09 10:59:21.450 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: All activities prepared run
*Debug 01/09 10:59:21.450 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: PREPARE RUN :: Timeline1 
*Debug 01/09 10:59:21.450 ixKseCommunicator eGTP Control Plane: Sending on ports [(1,1,2)]:'<ixlagent-run-request request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'.
*Debug 01/09 10:59:21.450 Timeline Controller: Timeline1 Clearing the Async Timer timer (1515476121.345, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 10:59:21.451 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT PROCESSED--: 'Run Request' Result='Handled' in state 'Listening'
*Debug 01/09 10:59:21.451 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: All activities prepared run
*Debug 01/09 10:59:21.451 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --ENTERING STATE--:'Run Request'
*Debug 01/09 10:59:21.453 ixFSM:   *** FSM Timeline Timeline1 --EXITING STATE--:  Timeline Controller: PREPARE RUN               
*Debug 01/09 10:59:21.453 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STARTING TIMER-- for state'Run Request'
*Debug 01/09 10:59:21.453 ixFSM:   *** FSM Timeline Timeline1 --ENTERING STATE--:  Timeline Controller: START LISTENING           
*Debug 01/09 10:59:21.453 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STATE CHANGED-- from 'Listening' to 'Run Request' after handling event 'Run Request'
*Debug 01/09 10:59:21.453 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: START LISTENING :: Timeline1 
*Debug 01/09 10:59:21.453 Timeline Controller: Timeline1 getIterationTime() = 140
*Debug 01/09 10:59:21.453 Timeline Controller: Timeline1 getStandbyTime() = 0
*Debug 01/09 10:59:21.453 Timeline Controller: Watch Dog Timer already exists for timeline Timeline1! Cancelling timer.
*Debug 01/09 10:59:21.453 Timeline Controller: Timeline1 Clearing the watch dog timer (1515476536.345, 0, <bound method ixTimelineController.watchDogIterationDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 10:59:21.453 Timeline Controller: Timeline1 Created Watch Dog Timer with the timer Run Duration = 775 watch dog timer id = (1515476536.454, 0, <bound method ixTimelineController.watchDogIterationDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 10:59:21.453 Timeline Controller: Timeline1 Created Async Timer with the timer Run Duration = 450 async timer id = (1515476211.454, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 10:59:21.453 Timeline Controller: startListening Timeline1
*Debug 01/09 10:59:21.453 Timeline Controller: Timeline1 registerActivityCallback HTTPClient1 - <Lib.TestEnvelope.ixActivity.ixActivity object at 0x287DCA70>
*Debug 01/09 10:59:21.453 Timeline Controller: Timeline1 asyncActivityList = [HTTPClient1]
*Debug 01/09 10:59:21.454 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT RECEIVED--: 'Start Listening Request' in state 'RunPrepared'
*Debug 01/09 10:59:21.454 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: PREPARE RUN', EVENT RECEIVED:  Timeline Controller: All activities prepared run
  NEW STATE: 'Timeline Controller: PREPARE RUN', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:21.454 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --PROCESSING EVENT--: 'Start Listening Request' in  state 'RunPrepared'
*Debug 01/09 10:59:21.454 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXITING STATE--:'RunPrepared'
*Debug 01/09 10:59:21.454 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXECUTING TRANSITION--:'Generic: transition=SendStartListeningRequest guard=null' in state 'RunPrepared'
*Debug 01/09 10:59:21.454 ixKseCommunicator HTTPClient1: Sending on ports [(1,1,2)]:'<ixlagent-start-listening-request request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'.
*Debug 01/09 10:59:21.456 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT PROCESSED--: 'Start Listening Request' Result='Handled' in state 'RunPrepared'
*Debug 01/09 10:59:21.456 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --ENTERING STATE--:'Start Listening Request'
*Debug 01/09 10:59:21.456 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STARTING TIMER-- for state'Start Listening Request'
*Debug 01/09 10:59:21.456 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STATE CHANGED-- from 'RunPrepared' to 'Start Listening Request' after handling event 'Start Listening Request'
*Debug 01/09 10:59:21.494 Timeline Controller: <Match Longest> activityCallback from agent HTTPServer1 - error = None
*Debug 01/09 10:59:21.494 Timeline Controller: <Match Longest> asyncActivityList = [eGTP Control Plane]
*Debug 01/09 10:59:21.499 ixKseCommunicator eGTP Control Plane: Got from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"><started/></ixlagent-run-preliminary-response><ixlagent-run-preliminary-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"><transition><stage><ramping-up/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 10:59:21.499 ixKseCommunicator eGTP Control Plane: Handling ixlagent message from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"><started/></ixlagent-run-preliminary-response>'
*Debug 01/09 10:59:21.500 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT RECEIVED--: 'Start Run Response' in state 'Run Request'
*Debug 01/09 10:59:21.502 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --PROCESSING EVENT--: 'Start Run Response' in  state 'Run Request'
*Debug 01/09 10:59:21.502 ixKseCommunicator eGTP Control Plane: Handling ixlagent message from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"><transition><stage><ramping-up/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 10:59:21.503 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STOPPING TIMER-- for state'Run Request'
*Debug 01/09 10:59:21.505 Traffic1 eGTP Control Plane: Got Run update: <transition><stage><ramping-up/></stage></transition> from port 0
*Debug 01/09 10:59:21.505 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXITING STATE--:'Run Request'
*Debug 01/09 10:59:21.505 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXECUTING TRANSITION--:'Generic: transition=GotStartRunResponse guard=CheckIfAllPortsDone' in state 'Run Request'
*Debug 01/09 10:59:21.505 Timeline Controller: <Match Longest> activityCallback from agent eGTP Control Plane - error = 
*Debug 01/09 10:59:21.505 Timeline Controller: <Match Longest> asyncActivityList = []
*Debug 01/09 10:59:21.506 Timeline Controller: Sending event for the timeline controller <Match Longest> current state =  Timeline Controller: START TRAFFIC              eventId =  Timeline Controller: All activities started traffic description = None details = None status = None
*Debug 01/09 10:59:21.506 ixKseCommunicator eGTP Control Plane: Got from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"><transition><stage><sustaining/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 10:59:21.506 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT PROCESSED--: 'Start Run Response' Result='Handled' in state 'Run Request'
*Debug 01/09 10:59:21.506 ixKseCommunicator eGTP Control Plane: Handling ixlagent message from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"><transition><stage><sustaining/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 10:59:21.506 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --ENTERING STATE--:'Running'
*Debug 01/09 10:59:21.507 Traffic1 eGTP Control Plane: Got Run update: <transition><stage><sustaining/></stage></transition> from port 0
*Debug 01/09 10:59:21.509 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STARTING TIMER-- for state'Running'
*Debug 01/09 10:59:21.509 Traffic1 eGTP Control Plane: Delaying timer with 1
*Debug 01/09 10:59:21.509 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STATE CHANGED-- from 'Run Request' to 'Running' after handling event 'Start Run Response'
*Debug 01/09 10:59:21.509 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --DELAYING TIMER-- for state'Running' with 1 seconds
*Debug 01/09 10:59:21.555 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:21.555 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities started traffic
*Debug 01/09 10:59:21.555 ixFSM:   *** FSM Timeline <Match Longest>: --EVENT RECEIVED--:  Timeline Controller: All activities started traffic
*Debug 01/09 10:59:21.555 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: START TRAFFIC :: <Match Longest> 
*Debug 01/09 10:59:21.555 Timeline Controller: <Match Longest> Clearing the Async Timer timer (1515476121.447, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 10:59:21.555 Timeline Controller: <Match Longest> getIterationTime() = 140
*Debug 01/09 10:59:21.555 Timeline Controller: <Match Longest> Created Run Stopped Check Timer with the timer Run Duration = 112 run stopped check timer id = (1515475873.555, 0, <bound method ixTimelineController.runStoppedCheckDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 10:59:21.555 ixFSM:   *** FSM Timeline <Match Longest> --EVENT PROCESSED--:  Timeline Controller: All activities started traffic
*Debug 01/09 10:59:21.555 ixFSM:   *** FSM Timeline <Match Longest> --EXITING STATE--:  Timeline Controller: START TRAFFIC             
*Debug 01/09 10:59:21.555 ixFSM:   *** FSM Timeline <Match Longest> --ENTERING STATE--:  Timeline Controller: RUNNING                   
*Debug 01/09 10:59:21.555 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: RUNNING  :: <Match Longest> 
*Debug 01/09 10:59:21.555 Timeline Controller: startRunning <Match Longest>
*Debug 01/09 10:59:21.555 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline <Match Longest>, TEST NAME: Test1, PREV STATE: 'Timeline Controller: START TRAFFIC', EVENT RECEIVED:  Timeline Controller: All activities started traffic
  NEW STATE: 'Timeline Controller: START TRAFFIC', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:21.713 ixKseCommunicator HTTPClient1: Got from port (1,1,2): '<ixlagent-start-listening-response request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'
*Debug 01/09 10:59:21.713 ixKseCommunicator HTTPClient1: Handling ixlagent message from port (1,1,2): '<ixlagent-start-listening-response request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'
*Debug 01/09 10:59:21.714 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT RECEIVED--: 'Start Listening Response' in state 'Start Listening Request'
*Debug 01/09 10:59:21.714 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --PROCESSING EVENT--: 'Start Listening Response' in  state 'Start Listening Request'
*Debug 01/09 10:59:21.716 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STOPPING TIMER-- for state'Start Listening Request'
*Debug 01/09 10:59:21.716 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXITING STATE--:'Start Listening Request'
*Debug 01/09 10:59:21.716 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXECUTING TRANSITION--:'Generic: transition=GotKseResponse guard=CheckIfAllPortsDone' in state 'Start Listening Request'
*Debug 01/09 10:59:21.716 Timeline Controller: Timeline1 activityCallback from agent HTTPClient1 - error = 
*Debug 01/09 10:59:21.716 Timeline Controller: Timeline1 asyncActivityList = []
*Debug 01/09 10:59:21.716 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: START LISTENING            eventId =  Timeline Controller: All activities started listening description = None details = None status = None
*Debug 01/09 10:59:21.717 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT PROCESSED--: 'Start Listening Response' Result='Handled' in state 'Start Listening Request'
*Debug 01/09 10:59:21.717 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --ENTERING STATE--:'Listening'
*Debug 01/09 10:59:21.717 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STATE CHANGED-- from 'Start Listening Request' to 'Listening' after handling event 'Start Listening Response'
*Debug 01/09 10:59:21.756 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:21.756 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities started listening
*Debug 01/09 10:59:21.756 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: All activities started listening
*Debug 01/09 10:59:21.756 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: START LISTENING :: Timeline1 
*Debug 01/09 10:59:21.756 Timeline Controller: Timeline1 Clearing the Async Timer timer (1515476211.454, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 10:59:21.756 Test Controller: testName = Test1 ; stateName =  TestController: STARTING TIMELINES              ; eventId =  TestController: Timeline Started Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:21.756 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: All activities started listening
*Debug 01/09 10:59:21.757 ixFSM:   *** FSM Timeline Timeline1 --EXITING STATE--:  Timeline Controller: START LISTENING           
*Debug 01/09 10:59:21.757 ixFSM:   *** FSM Timeline Timeline1 --ENTERING STATE--:  Timeline Controller: STANDBY                   
*Debug 01/09 10:59:21.757 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: STANDBY :: Timeline1 
*Debug 01/09 10:59:21.757 Timeline Controller: Timeline1 getStandbyTime() = 0
*Debug 01/09 10:59:21.757 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: START LISTENING', EVENT RECEIVED:  Timeline Controller: All activities started listening
  NEW STATE: 'Timeline Controller: START LISTENING', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:21.855 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:21.855 Test Controller: event ID received =  TestController: Timeline Started Successfully
*Debug 01/09 10:59:21.855 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: Timeline Started Successfully
*Debug 01/09 10:59:21.855 Test Controller: Test Controller FSM: Internal Transition Action: _TransAction_CheckAllTimelinesStarted()
*Debug 01/09 10:59:21.855 Test Controller: Total number of timelines = 2
*Debug 01/09 10:59:21.855 Test Controller: Timelines started so far = 2
*Debug 01/09 10:59:21.855 Test Controller: testName = Test1 ; stateName =  TestController: STARTING TIMELINES              ; eventId =  TestController: All Timelines Started Successfully ; errDescription = None ; details = None; status = None
*Debug 01/09 10:59:21.855 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: Timeline Started Successfully
*Debug 01/09 10:59:21.857 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: STARTING TIMELINES              
*Debug 01/09 10:59:21.857 Test Controller: Fetching the next event from the queue
*Debug 01/09 10:59:21.857 Test Controller: event ID received =  TestController: All Timelines Started Successfully
*Debug 01/09 10:59:21.857 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: All Timelines Started Successfully
*Debug 01/09 10:59:21.869 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: STANDBY                    eventId =  Timeline Controller: Standby timer expired description = None details = None status = None
*Debug 01/09 10:59:21.957 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:21.957 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: Standby timer expired
*Debug 01/09 10:59:21.957 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: Standby timer expired
*Debug 01/09 10:59:21.957 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: STANDBY :: Timeline1 
*Debug 01/09 10:59:21.957 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: Standby timer expired
*Debug 01/09 10:59:21.957 ixFSM:   *** FSM Timeline Timeline1 --EXITING STATE--:  Timeline Controller: STANDBY                   
*Debug 01/09 10:59:21.957 ixFSM:   *** FSM Timeline Timeline1 --ENTERING STATE--:  Timeline Controller: START TRAFFIC             
*Debug 01/09 10:59:21.957 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: START TRAFFIC :: Timeline1 
*Debug 01/09 10:59:21.959 Timeline Controller: Timeline1 Created Async Timer with the timer Run Duration = 360 async timer id = (1515476121.958, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 10:59:21.959 Timeline Controller: startTraffic Timeline1
*Debug 01/09 10:59:21.959 Timeline Controller: Timeline1 registerActivityCallback HTTPClient1 - <Lib.TestEnvelope.ixActivity.ixActivity object at 0x287DCA70>
*Debug 01/09 10:59:21.959 Timeline Controller: Timeline1 asyncActivityList = [HTTPClient1]
*Debug 01/09 10:59:21.959 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT RECEIVED--: 'Run Request' in state 'Listening'
*Debug 01/09 10:59:21.959 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --PROCESSING EVENT--: 'Run Request' in  state 'Listening'
*Debug 01/09 10:59:21.959 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: STANDBY', EVENT RECEIVED:  Timeline Controller: Standby timer expired
  NEW STATE: 'Timeline Controller: STANDBY', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:21.959 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXITING STATE--:'Listening'
*Debug 01/09 10:59:21.960 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXECUTING TRANSITION--:'Generic: transition=SendRunRequest guard=null' in state 'Listening'
*Debug 01/09 10:59:21.960 ixKseCommunicator HTTPClient1: Sending on ports [(1,1,2)]:'<ixlagent-run-request request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'.
*Debug 01/09 10:59:21.960 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: All Timelines Started Successfully
*Debug 01/09 10:59:21.961 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT PROCESSED--: 'Run Request' Result='Handled' in state 'Listening'
*Debug 01/09 10:59:21.961 ixFSM:   *** FSM Test Controller --EXITING STATE--:  TestController: STARTING TIMELINES              
*Debug 01/09 10:59:21.961 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --ENTERING STATE--:'Run Request'
*Debug 01/09 10:59:21.961 ixFSM:   *** FSM Test Controller --ENTERING STATE--:  TestController: RUNNING                         
*Debug 01/09 10:59:21.961 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STARTING TIMER-- for state'Run Request'
*Debug 01/09 10:59:21.961 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:21.963 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STATE CHANGED-- from 'Listening' to 'Run Request' after handling event 'Run Request'
*Debug 01/09 10:59:21.963 Test Controller:              PUBLISHING PRESTATE CHANGE EVENT       
*Debug 01/09 10:59:21.963 Test Controller:  PUBLISHING STATE : [ TestController: RUNNING                         ]
*Debug 01/09 10:59:21.963 Test Controller: **********************************************************************************************
*Debug 01/09 10:59:21.963 Test Controller : ixRunStateHandler received event  TestController: RUNNING                         
*Debug 01/09 10:59:21.969 ixKseCommunicator HTTPClient1: Got from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475742" activityName="HTTPClient1" port-id="0"><started/></ixlagent-run-preliminary-response><ixlagent-run-preliminary-response request-id="1515475742" activityName="HTTPClient1" port-id="0"><transition><stage><ramping-up/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 10:59:21.970 ixKseCommunicator HTTPClient1: Handling ixlagent message from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475742" activityName="HTTPClient1" port-id="0"><started/></ixlagent-run-preliminary-response>'
*Debug 01/09 10:59:21.970 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT RECEIVED--: 'Start Run Response' in state 'Run Request'
*Debug 01/09 10:59:21.970 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --PROCESSING EVENT--: 'Start Run Response' in  state 'Run Request'
*Debug 01/09 10:59:21.971 ixKseCommunicator HTTPClient1: Handling ixlagent message from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475742" activityName="HTTPClient1" port-id="0"><transition><stage><ramping-up/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 10:59:21.971 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STOPPING TIMER-- for state'Run Request'
*Debug 01/09 10:59:21.973 Traffic1 HTTPClient1: Got Run update: <transition><stage><ramping-up/></stage></transition> from port 0
*Debug 01/09 10:59:21.973 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXITING STATE--:'Run Request'
*Debug 01/09 10:59:21.973 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXECUTING TRANSITION--:'Generic: transition=GotStartRunResponse guard=CheckIfAllPortsDone' in state 'Run Request'
*Debug 01/09 10:59:21.974 Timeline Controller: Timeline1 activityCallback from agent HTTPClient1 - error = 
*Debug 01/09 10:59:21.974 Timeline Controller: Timeline1 asyncActivityList = []
*Debug 01/09 10:59:21.974 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: START TRAFFIC              eventId =  Timeline Controller: All activities started traffic description = None details = None status = None
*Debug 01/09 10:59:21.974 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT PROCESSED--: 'Start Run Response' Result='Handled' in state 'Run Request'
*Debug 01/09 10:59:21.974 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --ENTERING STATE--:'Running'
*Debug 01/09 10:59:21.974 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STARTING TIMER-- for state'Running'
*Debug 01/09 10:59:21.974 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STATE CHANGED-- from 'Run Request' to 'Running' after handling event 'Start Run Response'
*Debug 01/09 10:59:22.9 Test Controller: Test Controller FSM: ENTRY Action for the State: RUNNING
*Info 01/09 10:59:22.9 Test Controller: Test is Running.
*Debug 01/09 10:59:22.16 Test Controller : Creating the Test.XMD file...
*Debug 01/09 10:59:22.26 Test Controller : Successfully created the Test.XMD file and saved to the folder: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed 
*Debug 01/09 10:59:22.59 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:22.59 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities started traffic
*Debug 01/09 10:59:22.59 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: All activities started traffic
*Debug 01/09 10:59:22.59 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: START TRAFFIC :: Timeline1 
*Debug 01/09 10:59:22.59 Timeline Controller: Timeline1 Clearing the Async Timer timer (1515476121.958, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 10:59:22.59 Timeline Controller: Timeline1 getIterationTime() = 140
*Debug 01/09 10:59:22.59 Timeline Controller: Timeline1 Created Run Stopped Check Timer with the timer Run Duration = 112 run stopped check timer id = (1515475874.06, 0, <bound method ixTimelineController.runStoppedCheckDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 10:59:22.61 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: All activities started traffic
*Debug 01/09 10:59:22.61 ixFSM:   *** FSM Timeline Timeline1 --EXITING STATE--:  Timeline Controller: START TRAFFIC             
*Debug 01/09 10:59:22.61 ixFSM:   *** FSM Timeline Timeline1 --ENTERING STATE--:  Timeline Controller: RUNNING                   
*Debug 01/09 10:59:22.61 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: RUNNING  :: Timeline1 
*Debug 01/09 10:59:22.61 Timeline Controller: startRunning Timeline1
*Debug 01/09 10:59:22.61 Timeline Controller: Timeline1 registerActivityCallback HTTPClient1 - <Lib.TestEnvelope.ixActivity.ixActivity object at 0x287DCA70>
*Debug 01/09 10:59:22.61 Timeline Controller: Timeline1 asyncActivityList = [HTTPClient1]
*Debug 01/09 10:59:22.61 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: START TRAFFIC', EVENT RECEIVED:  Timeline Controller: All activities started traffic
  NEW STATE: 'Timeline Controller: START TRAFFIC', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:22.69 Test Controller : Successfully created the Network.xml file and saved to the folder: C:\Program Files (x86)\Ixia\IxLoad\8.10-EA\TclScripts\Samples\RESULTS\IxLoad_VOLTE_affirmed 
*Debug 01/09 10:59:22.69 Event Scheduler: addEvent() Function. interval = 900, action = <bound method ixTestControllerFSMThread._memoryTrimTimerFired of <ixTestControllerFSMThread(Test Controller, started daemon 145276)>>, actionArguments=(()), iteration=0, startDelay=900 and Timer Index = 5
*Debug 01/09 10:59:22.69 Event Scheduler: EVENT ADDED to the events map. Timer Index=5
*Debug 01/09 10:59:22.69 Test Controller: [ Memory Trim Timer created. ] Timer ID = 5 
*Debug 01/09 10:59:22.69 Test Controller: [ Configured timeout interval = 900 s, start delay = 900 s. ]
*Debug 01/09 10:59:22.161 Test Controller: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Test Controller, TEST NAME: Test1, PREV STATE: 'TestController: STARTING TIMELINES', EVENT RECEIVED:  TestController: All Timelines Started Successfully
  NEW STATE: 'TestController: RUNNING', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:23.678 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: RUNNING                    eventId =  Timeline Controller: Received run state update description = None details = None status = None
*Debug 01/09 10:59:23.681 Timeline Controller: Sending event for the timeline controller <Match Longest> current state =  Timeline Controller: RUNNING                    eventId =  Timeline Controller: Received run state update description = None details = None status = None
*Debug 01/09 10:59:23.762 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:23.762 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: Received run state update
*Debug 01/09 10:59:23.763 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: Received run state update
*Debug 01/09 10:59:23.763 Timeline Controller: statViewerMarkers took 0.000 s
*Debug 01/09 10:59:23.763 Timeline Controller: _publishEvent took 0.000 s
*Debug 01/09 10:59:23.763 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: Received run state update
*Debug 01/09 10:59:23.763 ixFSM:   *** FSM Timeline Timeline1 --INTERNAL EVENT. STAYING IN STATE--:  Timeline Controller: RUNNING                   
*Debug 01/09 10:59:23.763 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: START TRAFFIC', EVENT RECEIVED:  Timeline Controller: Received run state update
  NEW STATE: 'Ramp Up', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 10:59:23.763 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 10:59:23.763 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: Received run state update
*Debug 01/09 10:59:23.765 ixFSM:   *** FSM Timeline <Match Longest>: --EVENT RECEIVED--:  Timeline Controller: Received run state update
*Debug 01/09 10:59:23.765 Timeline Controller: statViewerMarkers took 0.000 s
*Debug 01/09 10:59:23.765 Timeline Controller: _publishEvent took 0.000 s
*Debug 01/09 10:59:23.765 ixFSM:   *** FSM Timeline <Match Longest> --EVENT PROCESSED--:  Timeline Controller: Received run state update
*Debug 01/09 10:59:23.766 ixFSM:   *** FSM Timeline <Match Longest> --INTERNAL EVENT. STAYING IN STATE--:  Timeline Controller: RUNNING                   
*Debug 01/09 10:59:23.766 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline <Match Longest>, TEST NAME: Test1, PREV STATE: 'Timeline Controller: START TRAFFIC', EVENT RECEIVED:  Timeline Controller: Received run state update
  NEW STATE: 'Sustain', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:00.984 ixKseCommunicator HTTPClient1: Got from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475742" activityName="HTTPClient1" port-id="0"><transition><stage><sustaining/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 11:01:00.984 ixKseCommunicator HTTPClient1: Handling ixlagent message from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475742" activityName="HTTPClient1" port-id="0"><transition><stage><sustaining/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 11:01:00.987 Traffic1 HTTPClient1: Got Run update: <transition><stage><sustaining/></stage></transition> from port 0
*Debug 01/09 11:01:02.676 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: RUNNING                    eventId =  Timeline Controller: Received run state update description = None details = None status = None
*Debug 01/09 11:01:02.680 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 11:01:02.680 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: Received run state update
*Debug 01/09 11:01:02.680 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: Received run state update
*Debug 01/09 11:01:02.681 Timeline Controller: statViewerMarkers took 0.000 s
*Debug 01/09 11:01:02.681 Timeline Controller: _publishEvent took 0.000 s
*Debug 01/09 11:01:02.681 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: Received run state update
*Debug 01/09 11:01:02.681 ixFSM:   *** FSM Timeline Timeline1 --INTERNAL EVENT. STAYING IN STATE--:  Timeline Controller: RUNNING                   
*Debug 01/09 11:01:02.683 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: START TRAFFIC', EVENT RECEIVED:  Timeline Controller: Received run state update
  NEW STATE: 'Sustain', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:13.875 Timeline Controller: <Match Longest> runStoppedCheckDurationExpired() (1515475873.555, 0, <bound method ixTimelineController.runStoppedCheckDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 11:01:14.375 Timeline Controller: Timeline1 runStoppedCheckDurationExpired() (1515475874.06, 0, <bound method ixTimelineController.runStoppedCheckDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 11:01:21.987 ixKseCommunicator HTTPClient1: Got from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475742" activityName="HTTPClient1" port-id="0"><transition><stage><ramping-down/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 11:01:21.989 ixKseCommunicator HTTPClient1: Handling ixlagent message from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475742" activityName="HTTPClient1" port-id="0"><transition><stage><ramping-down/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 11:01:21.990 Traffic1 HTTPClient1: Got Run update: <transition><stage><ramping-down/></stage></transition> from port 0
*Debug 01/09 11:01:23.677 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: RUNNING                    eventId =  Timeline Controller: Received run state update description = None details = None status = None
*Debug 01/09 11:01:23.683 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 11:01:23.683 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: Received run state update
*Debug 01/09 11:01:23.684 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: Received run state update
*Debug 01/09 11:01:23.686 Timeline Controller: statViewerMarkers took 0.000 s
*Debug 01/09 11:01:23.687 Timeline Controller: _publishEvent took 0.001 s
*Debug 01/09 11:01:23.687 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: Received run state update
*Debug 01/09 11:01:23.687 ixFSM:   *** FSM Timeline Timeline1 --INTERNAL EVENT. STAYING IN STATE--:  Timeline Controller: RUNNING                   
*Debug 01/09 11:01:23.688 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: START TRAFFIC', EVENT RECEIVED:  Timeline Controller: Received run state update
  NEW STATE: 'Ramp Down', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:42.509 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --DELAYING TIMER-- for state'Running' with 3600 seconds
*Debug 01/09 11:01:42.989 ixKseCommunicator eGTP Control Plane: Got from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"><transition><stage><ramping-down/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 11:01:42.990 ixKseCommunicator eGTP Control Plane: Handling ixlagent message from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"><transition><stage><ramping-down/></stage></transition></ixlagent-run-preliminary-response>'
*Debug 01/09 11:01:42.993 Traffic1 eGTP Control Plane: Got Run update: <transition><stage><ramping-down/></stage></transition> from port 0
*Debug 01/09 11:01:43.678 ixRunStateStatPlugin: The HTTPClient1@Traffic1@Network1, had some pending users while stopping. statName = State/HTTPClient1:Pending Users, statValue = 100
*Warning 01/09 11:01:43.680 ixRunStateStatPlugin: Activities for the HTTPClient1@Traffic1@Network1 were still in progress at the end of ramp down. Some statistics may be incomplete.
*Debug 01/09 11:01:47.973 ixKseCommunicator HTTPClient1: Got from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475742" activityName="HTTPClient1" port-id="0"><completed-cleanly/></ixlagent-run-preliminary-response><ixlagent-run-response request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'
*Debug 01/09 11:01:47.973 ixKseCommunicator HTTPClient1: Handling ixlagent message from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475742" activityName="HTTPClient1" port-id="0"><completed-cleanly/></ixlagent-run-preliminary-response>'
*Debug 01/09 11:01:47.976 Traffic1 HTTPClient1: Got Run update: <completed-cleanly/> from port 0
*Debug 01/09 11:01:47.976 ixKseCommunicator HTTPClient1: Handling ixlagent message from port (1,1,2): '<ixlagent-run-response request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'
*Debug 01/09 11:01:47.976 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT RECEIVED--: 'Run Response' in state 'Running'
*Debug 01/09 11:01:47.977 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --PROCESSING EVENT--: 'Run Response' in  state 'Running'
*Debug 01/09 11:01:47.979 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STOPPING TIMER-- for state'Running'
*Debug 01/09 11:01:47.979 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXITING STATE--:'Running'
*Debug 01/09 11:01:47.979 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXECUTING TRANSITION--:'Generic: transition=GotRunResponse guard=CheckIfAllPortsDone' in state 'Running'
*Debug 01/09 11:01:47.980 Timeline Controller: Timeline1 activityCallback from agent HTTPClient1 - error = 
*Debug 01/09 11:01:47.980 Timeline Controller: Timeline1 asyncActivityList = []
*Debug 01/09 11:01:47.980 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: RUNNING                    eventId =  Timeline Controller: End of iteration received description = None details = None status = None
*Debug 01/09 11:01:47.980 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT PROCESSED--: 'Run Response' Result='Handled' in state 'Running'
*Debug 01/09 11:01:47.980 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --ENTERING STATE--:'Listening'
*Debug 01/09 11:01:47.980 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STATE CHANGED-- from 'Running' to 'Listening' after handling event 'Run Response'
*Debug 01/09 11:01:47.990 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 11:01:47.990 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: End of iteration received
*Debug 01/09 11:01:47.990 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: End of iteration received
*Debug 01/09 11:01:47.990 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: RUNNING  :: Timeline1 
*Debug 01/09 11:01:47.990 Timeline Controller: stopRunning Timeline1
*Debug 01/09 11:01:47.992 Timeline Controller: statViewerMarkers took 0.000 s
*Debug 01/09 11:01:47.992 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: End of iteration received
*Debug 01/09 11:01:47.992 ixFSM:   *** FSM Timeline Timeline1 --EXITING STATE--:  Timeline Controller: RUNNING                   
*Debug 01/09 11:01:47.992 ixFSM:   *** FSM Timeline Timeline1 --ENTERING STATE--:  Timeline Controller: STOP TRAFFIC              
*Debug 01/09 11:01:47.992 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: STOP TRAFFIC :: Timeline1 
*Debug 01/09 11:01:47.993 Timeline Controller: Timeline1 Clearing the watch dog timer (1515476536.454, 0, <bound method ixTimelineController.watchDogIterationDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 11:01:47.993 Timeline Controller: Timeline1 Created Async Timer with the timer Run Duration = 360 async timer id = (1515476267.993, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 11:01:47.993 Timeline Controller: stopTraffic Timeline1
*Debug 01/09 11:01:47.993 Timeline Controller: Timeline1 registerActivityCallback HTTPClient1 - <Lib.TestEnvelope.ixActivity.ixActivity object at 0x287DCA70>
*Debug 01/09 11:01:47.993 Timeline Controller: Timeline1 asyncActivityList = [HTTPClient1]
*Debug 01/09 11:01:47.994 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT RECEIVED--: 'Stop Request' in state 'Listening'
*Debug 01/09 11:01:47.994 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: RUNNING', EVENT RECEIVED:  Timeline Controller: End of iteration received
  NEW STATE: 'Idle', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:47.994 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --PROCESSING EVENT--: 'Stop Request' in  state 'Listening'
*Debug 01/09 11:01:47.996 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXECUTING TRANSITION--:'Generic: transition=AlreadyStopped guard=null' in state 'Listening'
*Debug 01/09 11:01:47.996 Timeline Controller: Timeline1 activityCallback from agent HTTPClient1 - error = 
*Debug 01/09 11:01:47.996 Timeline Controller: Timeline1 asyncActivityList = []
*Debug 01/09 11:01:47.996 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: STOP TRAFFIC               eventId =  Timeline Controller: All activities stopped traffic description = None details = None status = None
*Debug 01/09 11:01:47.996 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT PROCESSED--: 'Stop Request' Result='Handled' in state 'Listening'
*Debug 01/09 11:01:47.997 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --INTERNAL TRANSITION-- in state 'Listening' at level 0
*Debug 01/09 11:01:48.95 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 11:01:48.95 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities stopped traffic
*Debug 01/09 11:01:48.95 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: All activities stopped traffic
*Debug 01/09 11:01:48.95 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: STOP TRAFFIC :: Timeline1 
*Debug 01/09 11:01:48.95 Timeline Controller: Timeline1 Clearing the Async Timer timer (1515476267.993, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 11:01:48.95 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: All activities stopped traffic
*Debug 01/09 11:01:48.95 ixFSM:   *** FSM Timeline Timeline1 --EXITING STATE--:  Timeline Controller: STOP TRAFFIC              
*Debug 01/09 11:01:48.95 ixFSM:   *** FSM Timeline Timeline1 --ENTERING STATE--:  Timeline Controller: STOP LISTENING            
*Debug 01/09 11:01:48.96 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: STOP LISTENING :: Timeline1 
*Debug 01/09 11:01:48.96 Timeline Controller: Timeline1 Created Async Timer with the timer Run Duration = 360 async timer id = (1515476268.097, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 11:01:48.96 Timeline Controller: stopListening Timeline1
*Debug 01/09 11:01:48.96 Timeline Controller: Timeline1 registerActivityCallback HTTPClient1 - <Lib.TestEnvelope.ixActivity.ixActivity object at 0x287DCA70>
*Debug 01/09 11:01:48.96 Timeline Controller: Timeline1 asyncActivityList = [HTTPClient1]
*Debug 01/09 11:01:48.96 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT RECEIVED--: 'Stop Listening Request' in state 'Listening'
*Debug 01/09 11:01:48.98 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: STOP TRAFFIC', EVENT RECEIVED:  Timeline Controller: All activities stopped traffic
  NEW STATE: 'Timeline Controller: STOP TRAFFIC', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:48.98 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --PROCESSING EVENT--: 'Stop Listening Request' in  state 'Listening'
*Debug 01/09 11:01:48.98 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXITING STATE--:'Listening'
*Debug 01/09 11:01:48.98 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXECUTING TRANSITION--:'Generic: transition=SendStopListeningRequest guard=null' in state 'Listening'
*Debug 01/09 11:01:48.98 ixKseCommunicator HTTPClient1: Sending on ports [(1,1,2)]:'<ixlagent-stop-listening-request request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'.
*Debug 01/09 11:01:48.98 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT PROCESSED--: 'Stop Listening Request' Result='Handled' in state 'Listening'
*Debug 01/09 11:01:48.98 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --ENTERING STATE--:'Stop Listening Request'
*Debug 01/09 11:01:48.98 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STARTING TIMER-- for state'Stop Listening Request'
*Debug 01/09 11:01:48.99 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STATE CHANGED-- from 'Listening' to 'Stop Listening Request' after handling event 'Stop Listening Request'
*Debug 01/09 11:01:48.128 ixKseCommunicator eGTP Control Plane: Got from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"><completed-cleanly/></ixlagent-run-preliminary-response><ixlagent-run-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'
*Debug 01/09 11:01:48.130 ixKseCommunicator eGTP Control Plane: Handling ixlagent message from port (1,1,2): '<ixlagent-run-preliminary-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"><completed-cleanly/></ixlagent-run-preliminary-response>'
*Debug 01/09 11:01:48.131 Traffic1 eGTP Control Plane: Got Run update: <completed-cleanly/> from port 0
*Debug 01/09 11:01:48.131 ixKseCommunicator eGTP Control Plane: Handling ixlagent message from port (1,1,2): '<ixlagent-run-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'
*Debug 01/09 11:01:48.132 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT RECEIVED--: 'Run Response' in state 'Running'
*Debug 01/09 11:01:48.132 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --PROCESSING EVENT--: 'Run Response' in  state 'Running'
*Debug 01/09 11:01:48.134 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STOPPING TIMER-- for state'Running'
*Debug 01/09 11:01:48.134 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXITING STATE--:'Running'
*Debug 01/09 11:01:48.134 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXECUTING TRANSITION--:'Generic: transition=GotRunResponse guard=CheckIfAllPortsDone' in state 'Running'
*Debug 01/09 11:01:48.134 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT PROCESSED--: 'Run Response' Result='Handled' in state 'Running'
*Debug 01/09 11:01:48.134 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --ENTERING STATE--:'Listening'
*Debug 01/09 11:01:48.134 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STATE CHANGED-- from 'Running' to 'Listening' after handling event 'Run Response'
*Debug 01/09 11:01:48.342 ixKseCommunicator HTTPClient1: Got from port (1,1,2): '<ixlagent-stop-listening-response request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'
*Debug 01/09 11:01:48.342 ixKseCommunicator HTTPClient1: Handling ixlagent message from port (1,1,2): '<ixlagent-stop-listening-response request-id="1515475742" activityName="HTTPClient1" port-id="0"/>'
*Debug 01/09 11:01:48.344 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT RECEIVED--: 'Stop Listening Response' in state 'Stop Listening Request'
*Debug 01/09 11:01:48.345 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --PROCESSING EVENT--: 'Stop Listening Response' in  state 'Stop Listening Request'
*Debug 01/09 11:01:48.345 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STOPPING TIMER-- for state'Stop Listening Request'
*Debug 01/09 11:01:48.345 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXITING STATE--:'Stop Listening Request'
*Debug 01/09 11:01:48.345 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EXECUTING TRANSITION--:'Generic: transition=GotKseResponse guard=CheckIfAllPortsDone' in state 'Stop Listening Request'
*Debug 01/09 11:01:48.346 Timeline Controller: Timeline1 activityCallback from agent HTTPClient1 - error = 
*Debug 01/09 11:01:48.346 Timeline Controller: Timeline1 asyncActivityList = []
*Debug 01/09 11:01:48.346 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: STOP LISTENING             eventId =  Timeline Controller: All activities stopped listening description = None details = None status = None
*Debug 01/09 11:01:48.348 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --EVENT PROCESSED--: 'Stop Listening Response' Result='Handled' in state 'Stop Listening Request'
*Debug 01/09 11:01:48.348 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --ENTERING STATE--:'Configured'
*Debug 01/09 11:01:48.348 Traffic1 HTTPClient1:   *** HSM 'Traffic1_HTTPClient1_2' --STATE CHANGED-- from 'Stop Listening Request' to 'Configured' after handling event 'Stop Listening Response'
*Debug 01/09 11:01:48.398 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 11:01:48.398 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities stopped listening
*Debug 01/09 11:01:48.398 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: All activities stopped listening
*Debug 01/09 11:01:48.398 Timeline Controller: << Timeline1 Condition Abort Iteration Check>> : Timeline Aborted = False, Iteration left = False, All run stopped stats received = False
*Debug 01/09 11:01:48.398 Timeline Controller: << Condition Abort Iteration Check Returning>> :  waiting
*Debug 01/09 11:01:48.398 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: STOP LISTENING :: Timeline1 
*Debug 01/09 11:01:48.400 Timeline Controller: Timeline1 Clearing the Async Timer timer (1515476268.097, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 11:01:48.400 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: All activities stopped listening
*Debug 01/09 11:01:48.400 ixFSM:   *** FSM Timeline Timeline1 --EXITING STATE--:  Timeline Controller: STOP LISTENING            
*Debug 01/09 11:01:48.400 ixFSM:   *** FSM Timeline Timeline1 --ENTERING STATE--:  Timeline Controller: WAITING FOR STOP STAT     
*Debug 01/09 11:01:48.400 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: WAITING FOR STOP STAT :: Timeline1 
*Debug 01/09 11:01:48.401 Timeline Controller: Timeline1 Created StopStat Timer with the timer Run Duration = 600 stopStat timer id = (1515476508.401, 0, <bound method ixTimelineController.stopStatCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 11:01:48.401 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: STOP LISTENING', EVENT RECEIVED:  Timeline Controller: All activities stopped listening
  NEW STATE: 'Timeline Controller: STOP LISTENING', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:49.677 ixRunStateStatPlugin: For the timeline Timeline1 the agent HTTPClient1 within the community Traffic1@Network1 has stopped successfully on 1 port(s)
*Debug 01/09 11:01:49.677 ixRunStateStatPlugin: All the activities for the timeline controller Timeline1 have stopped successfully on 1 port(s).
*Debug 01/09 11:01:49.677 Timeline Controller: Sending event for the timeline controller Timeline1 current state =  Timeline Controller: WAITING FOR STOP STAT      eventId =  Timeline Controller: All activities sent run stopped stat description = None details = None status = None
*Debug 01/09 11:01:49.678 ixRunStateStatPlugin: For the timeline <Match Longest> the agent eGTP Control Plane within the community Traffic1@Network1 has stopped successfully on 1 port(s)
*Debug 01/09 11:01:49.701 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 11:01:49.701 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities sent run stopped stat
*Debug 01/09 11:01:49.701 ixFSM:   *** FSM Timeline Timeline1: --EVENT RECEIVED--:  Timeline Controller: All activities sent run stopped stat
*Debug 01/09 11:01:49.701 Timeline Controller: Timeline Controller FSM: _TransAction_Stopped :: Timeline1 
*Debug 01/09 11:01:49.701 Test Controller: testName = Test1 ; stateName =  TestController: RUNNING                         ; eventId =  Timeline Controller: Timeline stopped ; errDescription = None ; details = None; status = None
*Debug 01/09 11:01:49.703 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: WAITING FOR STOP STAT :: Timeline1 
*Debug 01/09 11:01:49.703 Timeline Controller: Timeline1 Clearing the StopStat Timer timer (1515476508.401, 0, <bound method ixTimelineController.stopStatCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EB70B30>>, ())
*Debug 01/09 11:01:49.703 ixFSM:   *** FSM Timeline Timeline1 --EVENT PROCESSED--:  Timeline Controller: All activities sent run stopped stat
*Debug 01/09 11:01:49.703 ixFSM:   *** FSM Timeline Timeline1 --EXITING STATE--:  Timeline Controller: WAITING FOR STOP STAT     
*Debug 01/09 11:01:49.703 ixFSM:   *** FSM Timeline Timeline1 --ENTERING STATE--:  Timeline Controller: INIT                      
*Debug 01/09 11:01:49.703 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: INIT
*Debug 01/09 11:01:49.703 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline Timeline1, TEST NAME: Test1, PREV STATE: 'Timeline Controller: WAITING FOR STOP STAT', EVENT RECEIVED:  Timeline Controller: All activities sent run stopped stat
  NEW STATE: 'Timeline Controller: WAITING FOR STOP STAT', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:49.786 Test Controller: Fetching the next event from the queue
*Debug 01/09 11:01:49.786 Test Controller: event ID received =  Timeline Controller: Timeline stopped
*Debug 01/09 11:01:49.786 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  Timeline Controller: Timeline stopped
*Debug 01/09 11:01:49.786 Test Controller: Test Controller FSM: Internal Transition Action: _TransAction_checkAllTimelinesStopped()
*Debug 01/09 11:01:49.786 Test Controller: Test Controller FSM: checkAllTimelinesStopped()
*Debug 01/09 11:01:49.786 Test Controller: Timelines: Started: 2, Running timelines: 2, Match-longest started: 1, Total: 2
*Debug 01/09 11:01:49.786 Test Controller: Timelines: Running: 1, Match-longest started: 1, Total: 2
*Debug 01/09 11:01:49.786 Test Controller: Sending 'Stop Server only timeline' event to server only Timeline Controller(s)
*Debug 01/09 11:01:49.786 Timeline Controller: Sending event for the timeline controller <Match Longest> current state =  Timeline Controller: RUNNING                    eventId =  Timeline Controller: Stop server only timeline description = None details = None status = None
*Debug 01/09 11:01:49.788 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  Timeline Controller: Timeline stopped
*Debug 01/09 11:01:49.788 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: RUNNING                         
*Debug 01/09 11:01:49.803 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 11:01:49.803 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: Stop server only timeline
*Debug 01/09 11:01:49.803 ixFSM:   *** FSM Timeline <Match Longest>: --EVENT RECEIVED--:  Timeline Controller: Stop server only timeline
*Debug 01/09 11:01:49.803 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: RUNNING  :: <Match Longest> 
*Debug 01/09 11:01:49.805 Timeline Controller: stopRunning <Match Longest>
*Debug 01/09 11:01:49.805 Timeline Controller: statViewerMarkers took 0.000 s
*Debug 01/09 11:01:49.805 ixFSM:   *** FSM Timeline <Match Longest> --EVENT PROCESSED--:  Timeline Controller: Stop server only timeline
*Debug 01/09 11:01:49.805 ixFSM:   *** FSM Timeline <Match Longest> --EXITING STATE--:  Timeline Controller: RUNNING                   
*Debug 01/09 11:01:49.805 ixFSM:   *** FSM Timeline <Match Longest> --ENTERING STATE--:  Timeline Controller: STOP TRAFFIC              
*Debug 01/09 11:01:49.805 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: STOP TRAFFIC :: <Match Longest> 
*Debug 01/09 11:01:49.805 Timeline Controller: <Match Longest> Created Async Timer with the timer Run Duration = 360 async timer id = (1515476269.806, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 11:01:49.806 Timeline Controller: stopTraffic <Match Longest>
*Debug 01/09 11:01:49.806 Timeline Controller: <Match Longest> registerActivityCallback HTTPServer1 - <Lib.TestEnvelope.ixActivity.ixActivity object at 0x2EAA04F0>
*Debug 01/09 11:01:49.806 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1]
*Debug 01/09 11:01:49.806 Timeline Controller: <Match Longest> registerActivityCallback eGTP Control Plane - <Lib.TestEnvelope.ixNetworkActivity.ixNetworkActivity object at 0x2853B330>
*Debug 01/09 11:01:49.806 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1, eGTP Control Plane]
*Debug 01/09 11:01:49.808 Community Controller: Sending 'PortId=3
type=stop_traffic' to websvr_HTTPServer1 on ports [[(1,1,3)]]...
*Debug 01/09 11:01:49.808 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT RECEIVED--: 'Stop Request' in state 'Listening'
*Debug 01/09 11:01:49.809 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --PROCESSING EVENT--: 'Stop Request' in  state 'Listening'
*Debug 01/09 11:01:49.809 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline <Match Longest>, TEST NAME: Test1, PREV STATE: 'Timeline Controller: RUNNING', EVENT RECEIVED:  Timeline Controller: Stop server only timeline
  NEW STATE: 'Idle', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:49.809 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXECUTING TRANSITION--:'Generic: transition=AlreadyStopped guard=null' in state 'Listening'
*Debug 01/09 11:01:49.811 Timeline Controller: <Match Longest> activityCallback from agent eGTP Control Plane - error = 
*Debug 01/09 11:01:49.811 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1]
*Debug 01/09 11:01:49.811 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT PROCESSED--: 'Stop Request' Result='Handled' in state 'Listening'
*Debug 01/09 11:01:49.812 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --INTERNAL TRANSITION-- in state 'Listening' at level 0
*Debug 01/09 11:01:49.822 Timeline Controller: <Match Longest> activityCallback from agent HTTPServer1 - error = None
*Debug 01/09 11:01:49.822 Timeline Controller: <Match Longest> asyncActivityList = []
*Debug 01/09 11:01:49.822 Timeline Controller: Sending event for the timeline controller <Match Longest> current state =  Timeline Controller: STOP TRAFFIC               eventId =  Timeline Controller: All activities stopped traffic description = None details = None status = None
*Debug 01/09 11:01:49.911 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 11:01:49.911 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities stopped traffic
*Debug 01/09 11:01:49.911 ixFSM:   *** FSM Timeline <Match Longest>: --EVENT RECEIVED--:  Timeline Controller: All activities stopped traffic
*Debug 01/09 11:01:49.911 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: STOP TRAFFIC :: <Match Longest> 
*Debug 01/09 11:01:49.911 Timeline Controller: <Match Longest> Clearing the Async Timer timer (1515476269.806, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 11:01:49.911 ixFSM:   *** FSM Timeline <Match Longest> --EVENT PROCESSED--:  Timeline Controller: All activities stopped traffic
*Debug 01/09 11:01:49.911 ixFSM:   *** FSM Timeline <Match Longest> --EXITING STATE--:  Timeline Controller: STOP TRAFFIC              
*Debug 01/09 11:01:49.913 ixFSM:   *** FSM Timeline <Match Longest> --ENTERING STATE--:  Timeline Controller: STOP LISTENING            
*Debug 01/09 11:01:49.913 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: STOP LISTENING :: <Match Longest> 
*Debug 01/09 11:01:49.913 Timeline Controller: <Match Longest> Created Async Timer with the timer Run Duration = 360 async timer id = (1515476269.913, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 11:01:49.914 Timeline Controller: stopListening <Match Longest>
*Debug 01/09 11:01:49.914 Timeline Controller: <Match Longest> registerActivityCallback HTTPServer1 - <Lib.TestEnvelope.ixActivity.ixActivity object at 0x2EAA04F0>
*Debug 01/09 11:01:49.914 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1]
*Debug 01/09 11:01:49.914 Timeline Controller: <Match Longest> registerActivityCallback eGTP Control Plane - <Lib.TestEnvelope.ixNetworkActivity.ixNetworkActivity object at 0x2853B330>
*Debug 01/09 11:01:49.914 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1, eGTP Control Plane]
*Debug 01/09 11:01:49.914 Community Controller: Sending 'PortId=3
type=stop_listening' to websvr_HTTPServer1 on ports [[(1,1,3)]]...
*Debug 01/09 11:01:49.914 Community Controller: websvr_HTTPServer1 - Stopping HTTP Server
*Debug 01/09 11:01:49.914 Community Controller: Sending 'PortId=3
type=stop' to websvr_HTTPServer1 on ports [[(1,1,3)]]...
*Debug 01/09 11:01:49.915 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT RECEIVED--: 'Stop Listening Request' in state 'Listening'
*Debug 01/09 11:01:49.915 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline <Match Longest>, TEST NAME: Test1, PREV STATE: 'Timeline Controller: STOP TRAFFIC', EVENT RECEIVED:  Timeline Controller: All activities stopped traffic
  NEW STATE: 'Timeline Controller: STOP TRAFFIC', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:49.915 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --PROCESSING EVENT--: 'Stop Listening Request' in  state 'Listening'
*Debug 01/09 11:01:49.917 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXITING STATE--:'Listening'
*Debug 01/09 11:01:49.917 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXECUTING TRANSITION--:'Generic: transition=SendStopListeningRequest guard=null' in state 'Listening'
*Debug 01/09 11:01:49.917 ixKseCommunicator eGTP Control Plane: Sending on ports [(1,1,2)]:'<ixlagent-stop-listening-request request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'.
*Debug 01/09 11:01:49.918 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT PROCESSED--: 'Stop Listening Request' Result='Handled' in state 'Listening'
*Debug 01/09 11:01:49.918 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --ENTERING STATE--:'Stop Listening Request'
*Debug 01/09 11:01:49.918 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STARTING TIMER-- for state'Stop Listening Request'
*Debug 01/09 11:01:49.920 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STATE CHANGED-- from 'Listening' to 'Stop Listening Request' after handling event 'Stop Listening Request'
*Debug 01/09 11:01:49.934 ixKseCommunicator eGTP Control Plane: Got from port (1,1,2): '<ixlagent-stop-listening-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'
*Debug 01/09 11:01:49.934 ixKseCommunicator eGTP Control Plane: Handling ixlagent message from port (1,1,2): '<ixlagent-stop-listening-response request-id="1515475743" activityName="eGTP Control Plane" port-id="0"/>'
*Debug 01/09 11:01:49.937 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT RECEIVED--: 'Stop Listening Response' in state 'Stop Listening Request'
*Debug 01/09 11:01:49.937 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --PROCESSING EVENT--: 'Stop Listening Response' in  state 'Stop Listening Request'
*Debug 01/09 11:01:49.937 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STOPPING TIMER-- for state'Stop Listening Request'
*Debug 01/09 11:01:49.937 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXITING STATE--:'Stop Listening Request'
*Debug 01/09 11:01:49.938 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EXECUTING TRANSITION--:'Generic: transition=GotKseResponse guard=CheckIfAllPortsDone' in state 'Stop Listening Request'
*Debug 01/09 11:01:49.938 Timeline Controller: <Match Longest> activityCallback from agent eGTP Control Plane - error = 
*Debug 01/09 11:01:49.940 Timeline Controller: <Match Longest> asyncActivityList = [HTTPServer1]
*Debug 01/09 11:01:49.940 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --EVENT PROCESSED--: 'Stop Listening Response' Result='Handled' in state 'Stop Listening Request'
*Debug 01/09 11:01:49.940 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --ENTERING STATE--:'Configured'
*Debug 01/09 11:01:49.940 Traffic1 eGTP Control Plane:   *** HSM 'Traffic1_eGTP Control Plane_2' --STATE CHANGED-- from 'Stop Listening Request' to 'Configured' after handling event 'Stop Listening Response'
*Debug 01/09 11:01:52.342 Timeline Controller: <Match Longest> activityCallback from agent HTTPServer1 - error = None
*Debug 01/09 11:01:52.342 Timeline Controller: <Match Longest> asyncActivityList = []
*Debug 01/09 11:01:52.342 Timeline Controller: Sending event for the timeline controller <Match Longest> current state =  Timeline Controller: STOP LISTENING             eventId =  Timeline Controller: All activities stopped listening description = None details = None status = None
*Debug 01/09 11:01:52.417 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 11:01:52.417 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities stopped listening
*Debug 01/09 11:01:52.417 ixFSM:   *** FSM Timeline <Match Longest>: --EVENT RECEIVED--:  Timeline Controller: All activities stopped listening
*Debug 01/09 11:01:52.417 Timeline Controller: << <Match Longest> Condition Abort Iteration Check>> : Timeline Aborted = False, Iteration left = False, All run stopped stats received = False
*Debug 01/09 11:01:52.417 Timeline Controller: << Condition Abort Iteration Check Returning>> :  waiting
*Debug 01/09 11:01:52.417 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: STOP LISTENING :: <Match Longest> 
*Debug 01/09 11:01:52.417 Timeline Controller: <Match Longest> Clearing the Async Timer timer (1515476269.913, 0, <bound method ixTimelineController.asyncCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 11:01:52.418 ixFSM:   *** FSM Timeline <Match Longest> --EVENT PROCESSED--:  Timeline Controller: All activities stopped listening
*Debug 01/09 11:01:52.418 ixFSM:   *** FSM Timeline <Match Longest> --EXITING STATE--:  Timeline Controller: STOP LISTENING            
*Debug 01/09 11:01:52.418 ixFSM:   *** FSM Timeline <Match Longest> --ENTERING STATE--:  Timeline Controller: WAITING FOR STOP STAT     
*Debug 01/09 11:01:52.420 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: WAITING FOR STOP STAT :: <Match Longest> 
*Debug 01/09 11:01:52.420 Timeline Controller: <Match Longest> Created StopStat Timer with the timer Run Duration = 600 stopStat timer id = (1515476512.42, 0, <bound method ixTimelineController.stopStatCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 11:01:52.420 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline <Match Longest>, TEST NAME: Test1, PREV STATE: 'Timeline Controller: STOP LISTENING', EVENT RECEIVED:  Timeline Controller: All activities stopped listening
  NEW STATE: 'Timeline Controller: STOP LISTENING', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:52.676 ixRunStateStatPlugin: For the timeline <Match Longest> the agent HTTPServer1 within the community Traffic2@Network2 has stopped successfully on 1 port(s)
*Debug 01/09 11:01:52.676 ixRunStateStatPlugin: All the activities for the timeline controller <Match Longest> have stopped successfully on 1 port(s).
*Debug 01/09 11:01:52.677 Timeline Controller: Sending event for the timeline controller <Match Longest> current state =  Timeline Controller: WAITING FOR STOP STAT      eventId =  Timeline Controller: All activities sent run stopped stat description = None details = None status = None
*Debug 01/09 11:01:52.720 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 11:01:52.720 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: All activities sent run stopped stat
*Debug 01/09 11:01:52.720 ixFSM:   *** FSM Timeline <Match Longest>: --EVENT RECEIVED--:  Timeline Controller: All activities sent run stopped stat
*Debug 01/09 11:01:52.721 Timeline Controller: Timeline Controller FSM: _TransAction_Stopped :: <Match Longest> 
*Debug 01/09 11:01:52.721 Test Controller: testName = Test1 ; stateName =  TestController: RUNNING                         ; eventId =  Timeline Controller: Timeline stopped ; errDescription = None ; details = None; status = None
*Debug 01/09 11:01:52.721 Timeline Controller: Timeline Controller FSM: EXIT Action for the State: WAITING FOR STOP STAT :: <Match Longest> 
*Debug 01/09 11:01:52.721 Timeline Controller: <Match Longest> Clearing the StopStat Timer timer (1515476512.42, 0, <bound method ixTimelineController.stopStatCallbackDurationExpired of <Lib.TestController.ixTimelineController.ixTimelineController object at 0x2EAB1BF0>>, ())
*Debug 01/09 11:01:52.723 ixFSM:   *** FSM Timeline <Match Longest> --EVENT PROCESSED--:  Timeline Controller: All activities sent run stopped stat
*Debug 01/09 11:01:52.723 ixFSM:   *** FSM Timeline <Match Longest> --EXITING STATE--:  Timeline Controller: WAITING FOR STOP STAT     
*Debug 01/09 11:01:52.723 ixFSM:   *** FSM Timeline <Match Longest> --ENTERING STATE--:  Timeline Controller: INIT                      
*Debug 01/09 11:01:52.723 Timeline Controller: Timeline Controller FSM: ENTRY Action for the State: INIT
*Debug 01/09 11:01:52.723 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline <Match Longest>, TEST NAME: Test1, PREV STATE: 'Timeline Controller: WAITING FOR STOP STAT', EVENT RECEIVED:  Timeline Controller: All activities sent run stopped stat
  NEW STATE: 'Timeline Controller: WAITING FOR STOP STAT', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:52.788 Test Controller: Fetching the next event from the queue
*Debug 01/09 11:01:52.788 Test Controller: event ID received =  Timeline Controller: Timeline stopped
*Debug 01/09 11:01:52.789 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  Timeline Controller: Timeline stopped
*Debug 01/09 11:01:52.789 Test Controller: Test Controller FSM: Internal Transition Action: _TransAction_checkAllTimelinesStopped()
*Debug 01/09 11:01:52.789 Test Controller: Test Controller FSM: checkAllTimelinesStopped()
*Debug 01/09 11:01:52.789 Test Controller: Timelines: Started: 1, Running timelines: 1, Match-longest started: 1, Total: 2
*Debug 01/09 11:01:52.789 Test Controller: Timelines: Running: 0, Match-longest started: 1, Total: 2
*Debug 01/09 11:01:52.789 Test Controller: Sending 'Stop Server only timeline' event to server only Timeline Controller(s)
*Debug 01/09 11:01:52.789 Timeline Controller: Sending event for the timeline controller <Match Longest> current state =  Timeline Controller: INIT                       eventId =  Timeline Controller: Stop server only timeline description = None details = None status = None
*Debug 01/09 11:01:52.790 Test Controller: testName = Test1 ; stateName =  TestController: RUNNING                         ; eventId =  TestController: All Timelines stopped successfully. ; errDescription = None ; details = None; status = None
*Debug 01/09 11:01:52.790 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  Timeline Controller: Timeline stopped
*Debug 01/09 11:01:52.790 ixFSM:   *** FSM Test Controller --INTERNAL EVENT. STAYING IN STATE--:  TestController: RUNNING                         
*Debug 01/09 11:01:52.790 Test Controller: Fetching the next event from the queue
*Debug 01/09 11:01:52.790 Test Controller: event ID received =  TestController: All Timelines stopped successfully.
*Debug 01/09 11:01:52.792 ixFSM:   *** FSM Test Controller: --EVENT RECEIVED--:  TestController: All Timelines stopped successfully.
*Debug 01/09 11:01:52.823 Timeline Controller ixThreadFSM: Fetching the next event from the queue
*Debug 01/09 11:01:52.823 Timeline Controller ixThreadFSM: event ID received =  Timeline Controller: Stop server only timeline
*Debug 01/09 11:01:52.823 ixFSM:   *** FSM Timeline <Match Longest>: --EVENT RECEIVED--:  Timeline Controller: Stop server only timeline
*Debug 01/09 11:01:52.823 ixFSM:   *** FSM Timeline <Match Longest> --EVENT PROCESSED--:  Timeline Controller: Stop server only timeline
*Debug 01/09 11:01:52.823 ixFSM:   *** FSM Timeline <Match Longest>  --DEFAULT EVENT. STAYING IN STATE--:  Timeline Controller: INIT                      
*Debug 01/09 11:01:52.825 Timeline Controller ixThreadFSM: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Timeline <Match Longest>, TEST NAME: Test1, PREV STATE: 'Timeline Controller: WAITING FOR STOP STAT', EVENT RECEIVED:  Timeline Controller: Stop server only timeline
  NEW STATE: 'Timeline Controller: INIT', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:52.844 Test Controller: Test Controller FSM: EXIT Action for the State: RUNNING
*Debug 01/09 11:01:52.897 Activity HTTPServer1: clientUsingCpsKo
*Debug 01/09 11:01:52.900 Activity HTTPServer1: clientUsingTputKo
*Debug 01/09 11:01:52.904 ixDodRuleEngine: Starting rule resolution
*Debug 01/09 11:01:52.904 ixDodRuleEngine: Now matching for (['Kone', 'KSE SSL HTTP', 'Kone Compatible'])
*Debug 01/09 11:01:52.904 ixDodRuleEngine: Checking rule 0.
*Debug 01/09 11:01:52.904 ixDodRuleEngine: match returns False for NoneOf(Kone)
*Debug 01/09 11:01:52.904 ixDodRuleEngine: Checking rule 1.
*Debug 01/09 11:01:52.904 ixDodRuleEngine: match returns False for KSE New SSL
*Debug 01/09 11:01:52.905 ixDodRuleEngine: Checking rule 2.
*Debug 01/09 11:01:52.905 ixDodRuleEngine: match returns False for Replay
*Debug 01/09 11:01:52.905 ixDodRuleEngine: Checking rule 3.
*Debug 01/09 11:01:52.905 ixDodRuleEngine: match returns True for KeepAnyOf(Kone Compatible)
*Debug 01/09 11:01:52.905 ixDodRuleEngine: match returns False for KeepAnyOf(TCP TPUT,TCP CC,TCP CPS)
*Debug 01/09 11:01:52.905 ixDodRuleEngine: Checking rule 4.
*Debug 01/09 11:01:52.905 ixDodRuleEngine: match returns True for KeepAnyOf(Kone Compatible)
*Debug 01/09 11:01:52.905 ixDodRuleEngine: match returns True for NoneOf(UDP PSTREAM,TCP TPUT,TCP CC,TCP CPS)
*Debug 01/09 11:01:52.905 ixDodRuleEngine: Rule 4 fired.
*Debug 01/09 11:01:52.905 ixDodRuleEngine:   Added packages ['Plugins/agent/Common/linuxStackAdapter.tar']
*Debug 01/09 11:01:52.905 ixDodRuleEngine: Now matching for ['Kone', 'KSE SSL HTTP', 'Kone Compatible']
*Debug 01/09 11:01:52.905 ixDodRuleEngine: Checking rule 5.
*Debug 01/09 11:01:52.905 ixDodRuleEngine: match returns True for KeepAnyOf(Kone Compatible)
*Debug 01/09 11:01:52.905 ixDodRuleEngine: match returns False for KeepAnyOf(UDP PSTREAM)
*Debug 01/09 11:01:52.905 ixDodRuleEngine: Checking rule 6.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: match returns False for TCP Packet Switch
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 7.
*Debug 01/09 11:01:52.907 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 8.
*Debug 01/09 11:01:52.907 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 9.
*Debug 01/09 11:01:52.907 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 10.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: match returns False for KeepAnyOf(kInfoProviderIxDataPubFeature)
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 11.
*Debug 01/09 11:01:52.907 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 12.
*Debug 01/09 11:01:52.907 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 13.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: match returns True for NoneOf(Replay)
*Debug 01/09 11:01:52.907 ixDodRuleEngine: match returns False for NoneOf(Kone)
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 14.
*Debug 01/09 11:01:52.907 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 15.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: match returns False for NoneOf(Kone Compatible)
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 16.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: match returns True for KeepAnyOf(KSE SSL,KSE SSL HTTP,KSE SSL CAVIUM)
*Debug 01/09 11:01:52.907 ixDodRuleEngine: match returns False for NoneOf(Kone)
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 17.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: match returns False for NoneOf(Kone Compatible)
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 18.
*Debug 01/09 11:01:52.907 ixDodRuleEngine: match returns True for NoneOf(TCP TPUT,TCP CC,TCP CPS)
*Debug 01/09 11:01:52.907 ixDodRuleEngine: match returns False for NoneOf(Kone)
*Debug 01/09 11:01:52.907 ixDodRuleEngine: Checking rule 19.
*Debug 01/09 11:01:52.907 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.908 ixDodRuleEngine: Checking rule 20.
*Debug 01/09 11:01:52.908 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.908 ixDodRuleEngine: Checking rule 21.
*Debug 01/09 11:01:52.908 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.908 ixDodRuleEngine: Checking rule 22.
*Debug 01/09 11:01:52.908 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.908 ixDodRuleEngine: Checking rule 23.
*Debug 01/09 11:01:52.908 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.908 ixDodRuleEngine: Checking rule 24.
*Debug 01/09 11:01:52.908 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.908 ixDodRuleEngine: Checking rule 25.
*Debug 01/09 11:01:52.908 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.910 ixDodRuleEngine: Checking rule 26.
*Debug 01/09 11:01:52.910 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.910 ixDodRuleEngine: Checking rule 27.
*Debug 01/09 11:01:52.910 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.910 ixDodRuleEngine: Checking rule 28.
*Debug 01/09 11:01:52.910 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.910 ixDodRuleEngine: Checking rule 29.
*Debug 01/09 11:01:52.910 ixDodRuleEngine: match returns False for NoneOf(Kone Compatible)
*Debug 01/09 11:01:52.910 ixDodRuleEngine: Checking rule 30.
*Debug 01/09 11:01:52.910 ixDodRuleEngine: match returns False for NoneOf(Kone Compatible)
*Debug 01/09 11:01:52.910 ixDodRuleEngine: Checking rule 31.
*Debug 01/09 11:01:52.910 ixDodRuleEngine: match returns False for NoneOf(Kone Compatible)
*Debug 01/09 11:01:52.910 ixDodRuleEngine: Checking rule 32.
*Debug 01/09 11:01:52.910 ixDodRuleEngine: match returns False for Replay
*Debug 01/09 11:01:52.910 ixDodRuleEngine: Checking rule 33.
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns True for KeepAnyOf(Kone Compatible)
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns True for KeepAnyOf(Kone)
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns False for Replay w/Advanced Stats
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Checking rule 34.
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns False for Replay
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Checking rule 35.
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns False for KeepAnyOf(Conditional View)
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Checking rule 36.
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns False for KeepAnyOf(Conditional View)
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Checking rule 37.
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns False for Port Event Viewer
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Checking rule 38.
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns False for Port Event Viewer
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Checking rule 39.
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns True for NoneOf(Conditional View)
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns True for Kone
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Rule 39 fired.
*Debug 01/09 11:01:52.911 ixDodRuleEngine:   Added packages ['IxLoad_framework_kone.tar', 'Plugins/agent/Common/koneLib.tar', 'Plugins/agent/Common/stackAdapter.tar']
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Now matching for ['KSE SSL HTTP', 'Kone Compatible']
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Checking rule 40.
*Debug 01/09 11:01:52.911 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Checking rule 41.
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns False for Port Event Viewer
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Checking rule 42.
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns True for KeepAnyOf(Kone Compatible)
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Rule 42 fired.
*Debug 01/09 11:01:52.911 ixDodRuleEngine:   Added packages ['Plugins/agent/Common/stackAdapter.tar']
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Now matching for ['KSE SSL HTTP', 'Kone Compatible']
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Checking rule 43.
*Debug 01/09 11:01:52.911 ixDodRuleEngine: match returns False for High Precision
*Debug 01/09 11:01:52.911 ixDodRuleEngine: Checking rule 44.
*Debug 01/09 11:01:52.913 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.913 ixDodRuleEngine: Checking rule 45.
*Debug 01/09 11:01:52.913 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.913 ixDodRuleEngine: Checking rule 46.
*Debug 01/09 11:01:52.913 ixDodRuleEngine: match returns False for kInfoProviderIxDataPubFeature
*Debug 01/09 11:01:52.913 ixDodRuleEngine: Checking rule 47.
*Debug 01/09 11:01:52.913 ixDodRuleEngine: match returns False for Conditional View
*Debug 01/09 11:01:52.913 ixDodRuleEngine: Checking rule 48.
*Debug 01/09 11:01:52.913 ixDodRuleEngine: match returns False for SSL Kernel
*Debug 01/09 11:01:52.913 ixDodRuleEngine: Checking rule 49.
*Debug 01/09 11:01:52.913 ixDodRuleEngine: match returns False for kThreadedFeature
*Debug 01/09 11:01:52.913 ixDodRuleEngine: Checking rule 50.
*Debug 01/09 11:01:52.913 ixDodRuleEngine: match returns True for NoneOf(kClockworkFeature)
*Debug 01/09 11:01:52.913 ixDodRuleEngine: match returns False for TCP CPS
*Debug 01/09 11:01:52.913 ixDodRuleEngine: Checking rule 51.
*Debug 01/09 11:01:52.913 ixDodRuleEngine: match returns False for AnyOf(TCP TPUT,UDP PSTREAM)
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Checking rule 52.
*Debug 01/09 11:01:52.914 ixDodRuleEngine: match returns False for AnyOf(UDP PSTREAM,TCP CC)
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Checking rule 53.
*Debug 01/09 11:01:52.914 ixDodRuleEngine: match returns False for Replay w/Advanced Stats
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Checking rule 54.
*Debug 01/09 11:01:52.914 ixDodRuleEngine: match returns False for Replay
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Checking rule 55.
*Debug 01/09 11:01:52.914 ixDodRuleEngine: match returns True for Kone Compatible
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Rule 55 fired.
*Debug 01/09 11:01:52.914 ixDodRuleEngine:   Added packages ['Plugins/agent/Common/stackAdapter.tar']
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Now matching for ['KSE SSL HTTP']
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Checking rule 56.
*Debug 01/09 11:01:52.914 ixDodRuleEngine: match returns False for Kone
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Checking rule 57.
*Debug 01/09 11:01:52.914 ixDodRuleEngine: match returns False for Replay
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Checking rule 58.
*Debug 01/09 11:01:52.914 ixDodRuleEngine: match returns False for Port Event Viewer
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Checking rule 59.
*Debug 01/09 11:01:52.914 ixDodRuleEngine: match returns False for KSE SSL
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Checking rule 60.
*Debug 01/09 11:01:52.914 ixDodRuleEngine: match returns True for KSE SSL HTTP
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Rule 60 fired.
*Debug 01/09 11:01:52.914 ixDodRuleEngine:   Added packages ['Plugins/agent/Common/libksessl_http.tar']
*Debug 01/09 11:01:52.914 ixDodRuleEngine: No more features to match.
*Debug 01/09 11:01:52.914 ixDodRuleEngine:  Done resolving rules. Features resolve to (initial) DOD packages ['kKseSslHttp']
*Debug 01/09 11:01:52.914 ixDodRuleEngine: Features resolve to DOD package groups: {'kGroupKone': ['kKone'], 'kGroupStackAdapterType': ['kLinuxStackAdapter'], 'kGroupStackAdapter': ['kStackAdapter'], 'kGroupSsl': ['kKseSslHttp'], 'kGroupFramework': ['kFrameworkKone']} 
*Debug 01/09 11:01:52.914 Traffic Traffic1: getMatchingGlobalPackagesFromRule: returns packageNameList = ['IxLoad_framework_kone.tar', 'Plugins/agent/Common/stackAdapter.tar', 'Plugins/agent/Common/linuxStackAdapter.tar', 'Plugins/agent/Common/koneLib.tar', 'Plugins/agent/Common/libksessl_http.tar']
*Console 01/09 11:01:52.915 : ++++ [New SSl 0 :  KernSSL 0 : KseSSL 0 : KseSSLHTTP 1 ]
*Debug 01/09 11:01:52.937 Traffic Traffic1: Traffic Traffic1 Agent HTTPClient1 featureList = {0: True, 1: False, 2: False, 3: True, 4: False, 5: False, 6: False, 7: False, 8: False, 9: False, 10: False}
*Debug 01/09 11:01:52.937 Traffic Traffic1: Traffic Traffic1 Agent eGTP Control Plane featureList = {0: 1, 1: 0, 2: 1}
*Debug 01/09 11:01:52.937 Traffic Traffic1: getMatchingPluginPackagesFromRule featureDict =  {0: 1, 1: 0, 2: 0, 3: 1, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0}
*Debug 01/09 11:01:52.937 Traffic Traffic1: getMatchingPluginPackagesFromRule ruleObj.packageNameMap =  [([0], ('', [])), ([0, 1, 2], ('_profile', [])), ([0, 1], ('_profile', [])), ([0, 1, 4], ('_profile', [])), ([0, 4], ('_pipeline', [])), ([0, 2], ('_maxCR', [])), ([0, 1, 2, 3], ('_quick', [])), ([0, 1, 3], ('_quick', [])), ([0, 2, 3], ('_quick', [])), ([0, 3], ('_quick', [])), ([0, 4, 2], ('_pipeline', [])), ([0, 1, 4, 2], ('_profile', [])), ([0, 9], ('_streaming', [])), ([0, 9, 2], ('_streaming_maxCR', [])), ([0, 6, 2], ('_ce', [])), ([0, 6, 7, 2], ('_ce_md5', [])), ([0, 6, 7, 1, 4, 2], ('_ce_profile', [])), ([0, 5], ('_granular_stats', [])), ([0, 1, 2, 5], ('_profile_granular_stats', [])), ([0, 1, 5], ('_profile_granular_stats', [])), ([0, 1, 4, 5], ('_profile_granular_stats', [])), ([0, 4, 5], ('_pipeline_granular_stats', [])), ([0, 2, 5], ('_maxCR_granular_stats', [])), ([0, 1, 2, 3, 5], ('_quick_granular_stats', [])), ([0, 1, 3, 5], ('_quick_granular_stats', [])), ([0, 2, 3, 5], ('_quick_granular_stats', [])), ([0, 3, 5], ('_quick_granular_stats', [])), ([0, 4, 2, 5], ('_pipeline_granular_stats', [])), ([0, 1, 4, 2, 5], ('_profile_granular_stats', [])), ([0, 9, 5], ('_streaming_granular_stats', [])), ([0, 9, 2, 5], ('_streaming_maxCR_granular_stats', [])), ([0, 6, 5, 2], ('_ce_granular_stats', [])), ([0, 6, 7, 5, 2], ('_ce_md5_granular_stats', [])), ([0, 6, 7, 1, 4, 5, 2], ('_ce_profile_granular_stats', [])), ([0, 6, 7, 1, 4, 5, 2], ('_ce_profile_granular_stats', [])), ([0, 8], ('_new_ssl', [])), ([0, 8, 5], ('_new_ssl_granular_stats', [])), ([0, 10], ('_consumer_profile', []))]
*Console 01/09 11:01:52.938 : getMatchingPluginPackagesFromRule: returns packageNameList = ['Plugins/agent/HTTP_Client/httpClient_quick.tar']
*Debug 01/09 11:01:52.938 Traffic Traffic1: getTrafficPackages returns ['Plugins/agent/HTTP_Client/httpClient_quick.tar']
*Debug 01/09 11:01:52.938 Traffic Traffic1: getMatchingPluginPackagesFromRule featureDict =  {0: 1, 1: 0, 2: 1}
*Debug 01/09 11:01:52.938 Traffic Traffic1: getMatchingPluginPackagesFromRule ruleObj.packageNameMap =  [([0, 1], ('_granular_stats', [])), ([0, 2], ('_kone', [])), ([0, 2, 1], ('_kone_granular_stats', [])), ([0], ('', []))]
*Console 01/09 11:01:52.940 : getMatchingPluginPackagesFromRule: returns packageNameList = ['Plugins/agent/network_Peer/networkPeer_kone.tar']
*Debug 01/09 11:01:52.940 Traffic Traffic1: getTrafficPackages returns ['Plugins/agent/network_Peer/networkPeer_kone.tar']
*Debug 01/09 11:01:52.940 ixDodRuleEngine: Starting rule resolution
*Debug 01/09 11:01:52.940 ixDodRuleEngine: Now matching for (['TCP CC', 'Kone Compatible', 'Force Kone Compatible'])
*Debug 01/09 11:01:52.940 ixDodRuleEngine: Checking rule 0.
*Debug 01/09 11:01:52.940 ixDodRuleEngine: match returns True for NoneOf(Kone)
*Debug 01/09 11:01:52.940 ixDodRuleEngine: match returns False for Eval
*Debug 01/09 11:01:52.940 ixDodRuleEngine: Checking rule 1.
*Debug 01/09 11:01:52.941 ixDodRuleEngine: match returns False for KSE New SSL
*Debug 01/09 11:01:52.941 ixDodRuleEngine: Checking rule 2.
*Debug 01/09 11:01:52.941 ixDodRuleEngine: match returns False for Replay
*Debug 01/09 11:01:52.941 ixDodRuleEngine: Checking rule 3.
*Debug 01/09 11:01:52.941 ixDodRuleEngine: match returns True for KeepAnyOf(Kone Compatible)
*Debug 01/09 11:01:52.941 ixDodRuleEngine: match returns True for KeepAnyOf(TCP TPUT,TCP CC,TCP CPS)
*Debug 01/09 11:01:52.941 ixDodRuleEngine: match returns True for NoneOf(UDP PSTREAM)
*Debug 01/09 11:01:52.941 ixDodRuleEngine: Rule 3 fired.
*Debug 01/09 11:01:52.941 ixDodRuleEngine:   Added packages ['Plugins/agent/Common/ixStackAdapter.tar']
*Debug 01/09 11:01:52.941 ixDodRuleEngine: Now matching for ['TCP CC', 'Kone Compatible', 'Force Kone Compatible']
*Debug 01/09 11:01:52.941 ixDodRuleEngine: Checking rule 4.
*Debug 01/09 11:01:52.941 ixDodRuleEngine: match returns True for KeepAnyOf(Kone Compatible)
*Debug 01/09 11:01:52.941 ixDodRuleEngine: match returns False for NoneOf(UDP PSTREAM,TCP TPUT,TCP CC,TCP CPS)
*Debug 01/09 11:01:52.941 ixDodRuleEngine: Checking rule 5.
*Debug 01/09 11:01:52.941 ixDodRuleEngine: match returns True for KeepAnyOf(Kone Compatible)
*Debug 01/09 11:01:52.943 ixDodRuleEngine: match returns False for KeepAnyOf(UDP PSTREAM)
*Debug 01/09 11:01:52.943 ixDodRuleEngine: Checking rule 6.
*Debug 01/09 11:01:52.943 ixDodRuleEngine: match returns False for TCP Packet Switch
*Debug 01/09 11:01:52.943 ixDodRuleEngine: Checking rule 7.
*Debug 01/09 11:01:52.943 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.943 ixDodRuleEngine: Checking rule 8.
*Debug 01/09 11:01:52.943 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.943 ixDodRuleEngine: Checking rule 9.
*Debug 01/09 11:01:52.943 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 10.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: match returns False for KeepAnyOf(kInfoProviderIxDataPubFeature)
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 11.
*Debug 01/09 11:01:52.944 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 12.
*Debug 01/09 11:01:52.944 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 13.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: match returns True for NoneOf(Replay)
*Debug 01/09 11:01:52.944 ixDodRuleEngine: match returns True for NoneOf(Kone)
*Debug 01/09 11:01:52.944 ixDodRuleEngine: match returns True for AnyOf(Kone Compatible)
*Debug 01/09 11:01:52.944 ixDodRuleEngine: match returns False for KeepAnyOf(Conditional View)
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 14.
*Debug 01/09 11:01:52.944 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 15.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: match returns False for NoneOf(Kone Compatible)
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 16.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: match returns False for KeepAnyOf(KSE SSL,KSE SSL HTTP,KSE SSL CAVIUM)
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 17.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: match returns False for NoneOf(Kone Compatible)
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 18.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: match returns False for NoneOf(TCP TPUT,TCP CC,TCP CPS)
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 19.
*Debug 01/09 11:01:52.944 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 20.
*Debug 01/09 11:01:52.944 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 21.
*Debug 01/09 11:01:52.944 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.944 ixDodRuleEngine: Checking rule 22.
*Debug 01/09 11:01:52.944 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.946 ixDodRuleEngine: Checking rule 23.
*Debug 01/09 11:01:52.946 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.946 ixDodRuleEngine: Checking rule 24.
*Debug 01/09 11:01:52.946 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.946 ixDodRuleEngine: Checking rule 25.
*Debug 01/09 11:01:52.946 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.946 ixDodRuleEngine: Checking rule 26.
*Debug 01/09 11:01:52.946 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.946 ixDodRuleEngine: Checking rule 27.
*Debug 01/09 11:01:52.946 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.946 ixDodRuleEngine: Checking rule 28.
*Debug 01/09 11:01:52.946 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.946 ixDodRuleEngine: Checking rule 29.
*Debug 01/09 11:01:52.946 ixDodRuleEngine: match returns False for NoneOf(Kone Compatible)
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 30.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for NoneOf(Kone Compatible)
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 31.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for NoneOf(Kone Compatible)
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 32.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for Replay
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 33.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns True for KeepAnyOf(Kone Compatible)
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for KeepAnyOf(Kone)
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 34.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for Replay
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 35.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for KeepAnyOf(Conditional View)
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 36.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for KeepAnyOf(Conditional View)
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 37.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for Port Event Viewer
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 38.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for Port Event Viewer
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 39.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns True for NoneOf(Conditional View)
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for Kone
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 40.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for Port Event Viewer
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 41.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns False for Port Event Viewer
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Checking rule 42.
*Debug 01/09 11:01:52.947 ixDodRuleEngine: match returns True for KeepAnyOf(Kone Compatible)
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Rule 42 fired.
*Debug 01/09 11:01:52.947 ixDodRuleEngine:   Added packages ['Plugins/agent/Common/stackAdapter.tar']
*Debug 01/09 11:01:52.947 ixDodRuleEngine: Now matching for ['TCP CC', 'Kone Compatible', 'Force Kone Compatible']
*Debug 01/09 11:01:52.948 ixDodRuleEngine: Checking rule 43.
*Debug 01/09 11:01:52.948 ixDodRuleEngine: match returns False for High Precision
*Debug 01/09 11:01:52.948 ixDodRuleEngine: Checking rule 44.
*Debug 01/09 11:01:52.948 ixDodRuleEngine: match returns True for NoneOf(kInfoProviderIxDataPubFeature)
*Debug 01/09 11:01:52.948 ixDodRuleEngine: match returns False for Kone
*Debug 01/09 11:01:52.948 ixDodRuleEngine: Checking rule 45.
*Debug 01/09 11:01:52.948 ixDodRuleEngine: match returns False for KeepAnyOf(kInfoProviderIxDataPubFeature,Kone)
*Debug 01/09 11:01:52.948 ixDodRuleEngine: Checking rule 46.
*Debug 01/09 11:01:52.948 ixDodRuleEngine: match returns False for kInfoProviderIxDataPubFeature
*Debug 01/09 11:01:52.948 ixDodRuleEngine: Checking rule 47.
*Debug 01/09 11:01:52.948 ixDodRuleEngine: match returns False for Conditional View
*Debug 01/09 11:01:52.948 ixDodRuleEngine: Checking rule 48.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns False for SSL Kernel
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 49.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns False for kThreadedFeature
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 50.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns True for NoneOf(kClockworkFeature)
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns False for TCP CPS
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 51.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns False for AnyOf(TCP TPUT,UDP PSTREAM)
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 52.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns True for AnyOf(UDP PSTREAM,TCP CC)
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns True for NoneOf(kClockworkFeature)
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Rule 52 fired.
*Debug 01/09 11:01:52.950 ixDodRuleEngine:   Added packages ['../aptixia/components/common/ixTcpStack_cc.tar', '../aptixia/components/common/clockwork.tar']
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Now matching for ['Kone Compatible', 'Force Kone Compatible']
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 53.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns False for Replay w/Advanced Stats
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 54.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns False for Replay
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 55.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns True for Kone Compatible
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Rule 55 fired.
*Debug 01/09 11:01:52.950 ixDodRuleEngine:   Added packages ['Plugins/agent/Common/stackAdapter.tar']
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Now matching for ['Force Kone Compatible']
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 56.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns False for Kone
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 57.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns False for Replay
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 58.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns False for Port Event Viewer
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 59.
*Debug 01/09 11:01:52.950 ixDodRuleEngine: match returns False for KSE SSL
*Debug 01/09 11:01:52.950 ixDodRuleEngine: Checking rule 60.
*Debug 01/09 11:01:52.951 ixDodRuleEngine: match returns False for KSE SSL HTTP
*Debug 01/09 11:01:52.951 ixDodRuleEngine: Checking rule 61.
*Debug 01/09 11:01:52.951 ixDodRuleEngine: match returns False for KSE SSL CAVIUM
*Debug 01/09 11:01:52.951 ixDodRuleEngine: Checking rule 62.
*Debug 01/09 11:01:52.951 ixDodRuleEngine: match returns False for kMailLibFeature
*Debug 01/09 11:01:52.951 ixDodRuleEngine: Checking rule 63.
*Debug 01/09 11:01:52.951 ixDodRuleEngine: match returns False for kMailLibDiFeature
*Debug 01/09 11:01:52.951 ixDodRuleEngine: Checking rule 64.
*Debug 01/09 11:01:52.951 ixDodRuleEngine: match returns False for KeepAnyOf(kClockworkFeature)
*Debug 01/09 11:01:52.951 ixDodRuleEngine: Checking rule 65.
*Debug 01/09 11:01:52.951 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.951 ixDodRuleEngine: Checking rule 66.
*Debug 01/09 11:01:52.951 ixDodRuleEngine:   match returns False because more features required than in search list.
*Debug 01/09 11:01:52.951 ixDodRuleEngine: Checking rule 67.
*Debug 01/09 11:01:52.951 ixDodRuleEngine: match returns False for RDGE DI
*Debug 01/09 11:01:52.951 ixDodRuleEngine:  Done resolving rules. Features resolve to (initial) DOD packages ['kRdgePackage']
*Debug 01/09 11:01:52.953 ixDodRuleEngine: Features resolve to DOD package groups: {'kGroupStackAdapterType': ['kIxStackAdapter'], 'kGroupStackAdapter': ['kStackAdapter'], 'kGroupClockwork': ['kClockwork'], 'kGroupFastTcpStack': ['kFastTcpStackCc']} 
*Debug 01/09 11:01:52.953 ixDodRuleEngine: Adding default package kFrameworkBasic for Group: kGroupFramework
*Debug 01/09 11:01:52.953 Traffic Traffic2: getMatchingGlobalPackagesFromRule: returns packageNameList = ['IxLoad_framework.tar', '../aptixia/components/common/clockwork.tar', '../aptixia/components/common/ixTcpStack_cc.tar', 'Plugins/agent/Common/stackAdapter.tar', 'Plugins/agent/Common/ixStackAdapter.tar']
*Debug 01/09 11:01:52.953 Activity HTTPServer1: clientUsingCpsKo
*Debug 01/09 11:01:52.957 Activity HTTPServer1: clientUsingTputKo
*Debug 01/09 11:01:52.957 Traffic Traffic2: Traffic Traffic2 Agent HTTPServer1 featureList = {0: 1, 1: False, 2: True, 3: True, 4: False, 5: False, 6: False, 7: False, 8: False, 9: False, 10: False, 11: False, 12: False}
*Debug 01/09 11:01:52.957 Traffic Traffic2: getMatchingPluginPackagesFromRule featureDict =  {0: 1, 1: 0, 2: 1, 3: 1, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0}
*Debug 01/09 11:01:52.957 Traffic Traffic2: getMatchingPluginPackagesFromRule ruleObj.packageNameMap =  [([0], ('', [])), ([0, 1], ('', [])), ([0, 2], ('', [])), ([0, 1, 2], ('_maxCR', [])), ([0, 3], ('_quick', [])), ([0, 1, 3], ('_quick', [])), ([0, 2, 3], ('_quick', [])), ([0, 1, 2, 3], ('_quick', [])), ([0, 4], ('_tput', [])), ([0, 1, 4], ('_tput', [])), ([0, 2, 4], ('_tput', [])), ([0, 1, 2, 4], ('_tput', [])), ([0, 5], ('', ['Plugins/agent/common/sslProxy.tar'])), ([0, 10], ('', ['Plugins/agent/common/sslProxy_new_ssl.tar'])), ([0, 11], ('', ['Plugins/agent/common/sslProxy_new_ssl_perip.tar'])), ([0, 5, 6], ('', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 1, 5], ('_maxCR', ['Plugins/agent/common/sslProxy.tar'])), ([0, 1, 5, 6], ('_maxCR', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 1, 3, 5], ('_quick', ['Plugins/agent/common/sslProxy.tar'])), ([0, 1, 3, 5, 6], ('_quick', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 7], ('_ssl', [])), ([0, 1, 7], ('_ssl', [])), ([0, 1, 3, 7], ('_ssl', [])), ([0, 3, 7], ('_ssl', [])), ([0, 4, 7], ('_ssl', [])), ([0, 5, 7], ('_ssl', [])), ([0, 5, 4], ('_tput', ['Plugins/agent/common/sslProxy.tar'])), ([0, 5, 3], ('_quick', ['Plugins/agent/common/sslProxy.tar'])), ([0, 5, 4, 6], ('_tput', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 5, 3, 6], ('_quick', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 8], ('_granular_stats', [])), ([0, 1, 8], ('_granular_stats', [])), ([0, 2, 8], ('_granular_stats', [])), ([0, 1, 2, 8], ('_maxCR_granular_stats', [])), ([0, 3, 8], ('_quick_granular_stats', [])), ([0, 1, 3, 8], ('_quick_granular_stats', [])), ([0, 2, 3, 8], ('_quick_granular_stats', [])), ([0, 1, 2, 3, 8], ('_quick_granular_stats', [])), ([0, 4, 8], ('_tput_granular_stats', [])), ([0, 1, 4, 8], ('_tput_granular_stats', [])), ([0, 2, 4, 8], ('_tput_granular_stats', [])), ([0, 1, 2, 4, 8], ('_tput_granular_stats', [])), ([0, 5, 8], ('_granular_stats', ['Plugins/agent/common/sslProxy.tar'])), ([0, 10, 8], ('_granular_stats', ['Plugins/agent/common/sslProxy_new_ssl.tar'])), ([0, 11, 8], ('_granular_stats', ['Plugins/agent/common/sslProxy_new_ssl_perip.tar'])), ([0, 5, 6, 8], ('_granular_stats', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 5, 7, 8], ('_ssl_granular_stats', [])), ([0, 5, 4, 8], ('_tput_granular_stats', ['Plugins/agent/common/sslProxy.tar'])), ([0, 5, 3, 8], ('_quick_granular_stats', ['Plugins/agent/common/sslProxy.tar'])), ([0, 5, 4, 6, 8], ('_tput_granular_stats', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 5, 3, 6, 8], ('_quick_granular_stats', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 1, 5, 8], ('_maxCR_granular_stats', ['Plugins/agent/common/sslProxy.tar'])), ([0, 1, 5, 6, 8], ('_maxCR_granular_stats', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 1, 3, 5, 8], ('_quick_granular_stats', ['Plugins/agent/common/sslProxy.tar'])), ([0, 1, 3, 5, 6, 8], ('_quick_granular_stats', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 7, 8], ('_ssl_granular_stats', [])), ([0, 5, 7, 8], ('_ssl_granular_stats', [])), ([0, 1, 7, 8], ('_ssl_granular_stats', [])), ([0, 1, 3, 7, 8], ('_ssl_granular_stats', [])), ([0, 3, 7, 8], ('_ssl_granular_stats', [])), ([0, 4, 7, 8], ('_ssl_granular_stats', [])), ([0, 9], ('_kone', [])), ([0, 1, 9], ('_kone', [])), ([0, 2, 9], ('_kone', [])), ([0, 1, 2, 9], ('_kone_maxCR', [])), ([0, 3, 9], ('_kone_quick', [])), ([0, 1, 3, 9], ('_kone_quick', [])), ([0, 2, 3, 9], ('_kone_quick', [])), ([0, 1, 2, 3, 9], ('_kone_quick', [])), ([0, 4, 9], ('_kone_tput', [])), ([0, 1, 4, 9], ('_kone_tput', [])), ([0, 2, 4, 9], ('_kone_tput', [])), ([0, 1, 2, 4, 9], ('_kone_tput', [])), ([0, 5, 9], ('_kone', ['Plugins/agent/common/sslProxy.tar'])), ([0, 5, 6, 9], ('_kone', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 1, 5, 9], ('_kone_maxCR', ['Plugins/agent/common/sslProxy.tar'])), ([0, 1, 5, 6, 9], ('_kone_maxCR', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 1, 3, 5, 9], ('_kone_quick', ['Plugins/agent/common/sslProxy.tar'])), ([0, 1, 3, 5, 6, 9], ('_kone_quick', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 7, 9], ('_kone', [])), ([0, 1, 7, 9], ('_kone', [])), ([0, 1, 3, 7, 9], ('_kone', [])), ([0, 3, 7, 9], ('_kone', [])), ([0, 4, 7, 9], ('_kone', [])), ([0, 2, 4, 7, 9], ('_kone', [])), ([0, 5, 7, 9], ('_kone', [])), ([0, 5, 4, 9], ('_kone_tput', ['Plugins/agent/common/sslProxy.tar'])), ([0, 5, 3, 9], ('_kone_quick', ['Plugins/agent/common/sslProxy.tar'])), ([0, 5, 4, 6, 9], ('_kone_tput', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 5, 3, 6, 9], ('_kone_quick', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 8, 9], ('_kone_granular_stats', [])), ([0, 1, 8, 9], ('_kone_granular_stats', [])), ([0, 2, 8, 9], ('_kone_granular_stats', [])), ([0, 1, 2, 8, 9], ('_kone_maxCR_granular_stats', [])), ([0, 3, 8, 9], ('_kone_quick_granular_stats', [])), ([0, 1, 3, 8, 9], ('_kone_quick_granular_stats', [])), ([0, 2, 3, 8, 9], ('_kone_quick_granular_stats', [])), ([0, 1, 2, 3, 8, 9], ('_kone_quick_granular_stats', [])), ([0, 4, 8, 9], ('_kone_tput_granular_stats', [])), ([0, 1, 4, 8, 9], ('_kone_tput_granular_stats', [])), ([0, 2, 4, 8, 9], ('_kone_tput_granular_stats', [])), ([0, 1, 2, 4, 8, 9], ('_kone_tput_granular_stats', [])), ([0, 5, 8, 9], ('_kone_granular_stats', ['Plugins/agent/common/sslProxy.tar'])), ([0, 5, 6, 8, 9], ('_kone_granular_stats', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 5, 7, 8, 9], ('_kone_granular_stats', [])), ([0, 5, 4, 8, 9], ('_kone_tput_granular_stats', ['Plugins/agent/common/sslProxy.tar'])), ([0, 5, 3, 8, 9], ('_kone_quick_granular_stats', ['Plugins/agent/common/sslProxy.tar'])), ([0, 5, 4, 6, 8, 9], ('_kone_tput_granular_stats', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 5, 3, 6, 8, 9], ('_kone_quick_granular_stats', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 1, 5, 8, 9], ('_kone_maxCR_granular_stats', ['Plugins/agent/common/sslProxy.tar'])), ([0, 1, 5, 6, 8, 9], ('_kone_maxCR_granular_stats', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 1, 3, 5, 8, 9], ('_kone_quick_granular_stats', ['Plugins/agent/common/sslProxy.tar'])), ([0, 1, 3, 5, 6, 8, 9], ('_kone_quick_granular_stats', ['Plugins/agent/common/sslProxy_perip.tar'])), ([0, 7, 8, 9], ('_kone_granular_stats', [])), ([0, 5, 7, 8, 9], ('_kone_granular_stats', [])), ([0, 1, 7, 8, 9], ('_kone_granular_stats', [])), ([0, 1, 3, 7, 8, 9], ('_kone_granular_stats', [])), ([0, 3, 7, 8, 9], ('_kone_granular_stats', [])), ([0, 4, 7, 8, 9], ('_kone_granular_stats', [])), ([0, 9, 12], ('_kone', [])), ([0, 1, 9, 12], ('_kone', [])), ([0, 2, 9, 12], ('_kone', [])), ([0, 1, 2, 9, 12], ('_kone', [])), ([0, 3, 9, 12], ('_kone', [])), ([0, 1, 3, 9, 12], ('_kone', [])), ([0, 2, 3, 9, 12], ('_kone', [])), ([0, 1, 2, 3, 9, 12], ('_kone', [])), ([0, 4, 9, 12], ('_kone', [])), ([0, 1, 4, 9, 12], ('_kone', [])), ([0, 2, 4, 9, 12], ('_kone', [])), ([0, 1, 2, 4, 9, 12], ('_kone', [])), ([0, 5, 9, 12], ('_kone', [])), ([0, 5, 6, 9, 12], ('_kone', [])), ([0, 1, 5, 9, 12], ('_kone', [])), ([0, 1, 5, 6, 9, 12], ('_kone', [])), ([0, 1, 3, 5, 9, 12], ('_kone', [])), ([0, 1, 3, 5, 6, 9, 12], ('_kone', [])), ([0, 7, 9, 12], ('_kone', [])), ([0, 1, 7, 9, 12], ('_kone', [])), ([0, 1, 3, 7, 9, 12], ('_kone', [])), ([0, 3, 7, 9, 12], ('_kone', [])), ([0, 4, 7, 9, 12], ('_kone', [])), ([0, 2, 4, 7, 9, 12], ('_kone', [])), ([0, 5, 7, 9, 12], ('_kone', [])), ([0, 5, 4, 9, 12], ('_kone', [])), ([0, 5, 3, 9, 12], ('_kone', [])), ([0, 5, 4, 6, 9, 12], ('_kone', [])), ([0, 5, 3, 6, 9, 12], ('_kone', [])), ([0, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 2, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 2, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 3, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 3, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 2, 3, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 2, 3, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 4, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 4, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 2, 4, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 2, 4, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 5, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 5, 6, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 5, 7, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 5, 4, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 5, 3, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 5, 4, 6, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 5, 3, 6, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 5, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 5, 6, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 3, 5, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 3, 5, 6, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 7, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 5, 7, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 7, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 1, 3, 7, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 3, 7, 8, 9, 12], ('_kone_granular_stats', [])), ([0, 4, 7, 8, 9, 12], ('_kone_granular_stats', []))]
*Console 01/09 11:01:52.963 : getMatchingPluginPackagesFromRule: returns packageNameList = ['Plugins/agent/HTTP_Server/httpServer_quick.tar']
*Debug 01/09 11:01:52.963 Traffic Traffic2: getTrafficPackages returns ['Plugins/agent/HTTP_Server/httpServer_quick.tar']
*Debug 01/09 11:01:52.974 Test Controller: [ Stopping the Memory Trim Timer. ] Timer ID = 5
*Debug 01/09 11:01:52.974 Event Scheduler: REMOVE Event(). Removing Event Index 5
*Debug 01/09 11:01:52.976 Event Scheduler: Stopping the timer: Event Index 5, timer (1515476662.07, 0, <bound method ixEventScheduler.callback of <Lib.Common.ixEventScheduler.ixEventScheduler object at 0x2EAB1350>>, (5,))
*Debug 01/09 11:01:52.976 Event Scheduler: deleting the event 5
*Debug 01/09 11:01:53.55 ixFSM:   *** FSM Test Controller --EVENT PROCESSED--:  TestController: All Timelines stopped successfully.
*Debug 01/09 11:01:53.55 ixFSM:   *** FSM Test Controller --EXITING STATE--:  TestController: RUNNING                         
*Debug 01/09 11:01:53.55 ixFSM:   *** FSM Test Controller --ENTERING STATE--:  TestController: STOPPING                        
*Debug 01/09 11:01:53.55 Test Controller: **********************************************************************************************
*Debug 01/09 11:01:53.55 Test Controller:              PUBLISHING PRESTATE CHANGE EVENT       
*Debug 01/09 11:01:53.56 Test Controller:  PUBLISHING STATE : [ TestController: STOPPING                        ]
*Debug 01/09 11:01:53.56 Test Controller: **********************************************************************************************
*Debug 01/09 11:01:53.56 Test Controller : ixRunStateHandler received event  TestController: STOPPING                        
*Debug 01/09 11:01:53.94 Test Controller: Test Controller FSM: ENTRY Action for the State: STOPPING
*Debug 01/09 11:01:53.94 Test Controller: __stopTest()
*Debug 01/09 11:01:53.94 Test Controller : SM Cancel being invoked
*Debug 01/09 11:01:53.95 Test Controller : SM Cancel completed
*Debug 01/09 11:01:53.134 Test Controller: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Test Controller, TEST NAME: Test1, PREV STATE: 'TestController: RUNNING', EVENT RECEIVED:  TestController: All Timelines stopped successfully.
  NEW STATE: 'TestController: STOPPING', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:53.141 Community Controller Traffic2@Network2: Fetching the next event from the queue
*Debug 01/09 11:01:53.141 Community Controller Traffic2@Network2: event ID received =  TestController: Stop the Test Run
*Debug 01/09 11:01:53.141 ixFSM:   *** FSM Community Controller Traffic2@Network2: --EVENT RECEIVED--:  TestController: Stop the Test Run
*Debug 01/09 11:01:53.142 Community Controller Traffic1@Network1: Fetching the next event from the queue
*Debug 01/09 11:01:53.142 Community Controller Traffic1@Network1: event ID received =  TestController: Stop the Test Run
*Debug 01/09 11:01:53.144 ixFSM:   *** FSM Community Controller Traffic1@Network1: --EVENT RECEIVED--:  TestController: Stop the Test Run
*Debug 01/09 11:01:53.148 Community Controller: Community Traffic1@Network1 has the stop timestamp of 157.0
*Debug 01/09 11:01:53.148 Community Controller: Community Traffic2@Network2 has the stop timestamp of 157.0
*Debug 01/09 11:01:53.148 Community Controller: Scheduled Plugin Stop after next stat: HTTP Client  HTTPClient1 Traffic1@Network1_CSV6 with Timestamp: 154.0. Community stop timestamp was 157.0
*Debug 01/09 11:01:53.148 Community Controller: Scheduled Plugin Stop after next stat: Test Server  HTTPServer1 Traffic2@Network2_CSV1 with Timestamp: 156.0. Community stop timestamp was 157.0
*Debug 01/09 11:01:53.148 Community Controller: Scheduled Plugin Stop after next stat: HTTP Client - Default CSV Logs HTTPClient1 Traffic1@Network1_CSV3 with Timestamp: 154.0. Community stop timestamp was 157.0
*Debug 01/09 11:01:53.150 Community Controller: Scheduled Plugin Stop after next stat: HTTP Server - Default CSV Logs HTTPServer1 Traffic2@Network2_CSV5 with Timestamp: 154.0. Community stop timestamp was 157.0
*Debug 01/09 11:01:53.150 Community Controller: Scheduled Plugin Stop after next stat: Test Client  HTTPClient1 Traffic1@Network1_CSV2 with Timestamp: 156.0. Community stop timestamp was 157.0
*Debug 01/09 11:01:53.150 Community Controller: Scheduled Plugin Stop after next stat: HTTP Server  HTTPServer1 Traffic2@Network2_CSV4 with Timestamp: 154.0. Community stop timestamp was 157.0
*Debug 01/09 11:01:53.150 Community Controller: Scheduled Plugin Stop after next stat: HTTP_THROLLE_0 with Timestamp: 156.0. Community stop timestamp was 157.0
*Debug 01/09 11:01:53.150 Community Controller Traffic2@Network2: Community Controller FSM: EXIT Action for the State: RUNNING  :: Traffic2@Network2 
*Debug 01/09 11:01:53.151 Community Controller Traffic1@Network1: Community Controller FSM: EXIT Action for the State: RUNNING  :: Traffic1@Network1 
*Debug 01/09 11:01:53.154 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EVENT PROCESSED--:  TestController: Stop the Test Run
*Debug 01/09 11:01:53.154 ixFSM:   *** FSM Community Controller Traffic2@Network2 --EXITING STATE--:  Community Controller: RUNNING              
*Debug 01/09 11:01:53.154 ixFSM:   *** FSM Community Controller Traffic2@Network2 --ENTERING STATE--:  Community Controller: STOPPING             
*Debug 01/09 11:01:53.154 Community Controller Traffic2@Network2: Community Controller FSM: ENTRY Action for the State: STOPPING  :: Traffic2@Network2 
*Debug 01/09 11:01:53.154 Community Controller Traffic2@Network2: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic2@Network2, TEST NAME: Test1, PREV STATE: 'Community Controller: RUNNING', EVENT RECEIVED:  TestController: Stop the Test Run
  NEW STATE: 'Community Controller: STOPPING', DESCRIPTION: None, DETAILS: None, STATUS: None
*Info 01/09 11:01:53.359 Network: MME/eNB S11/S1-U : Deactivating Done
*Debug 01/09 11:01:53.361 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EVENT PROCESSED--:  TestController: Stop the Test Run
*Debug 01/09 11:01:53.362 ixFSM:   *** FSM Community Controller Traffic1@Network1 --EXITING STATE--:  Community Controller: RUNNING              
*Debug 01/09 11:01:53.362 ixFSM:   *** FSM Community Controller Traffic1@Network1 --ENTERING STATE--:  Community Controller: STOPPING             
*Debug 01/09 11:01:53.362 Community Controller Traffic1@Network1: Community Controller FSM: ENTRY Action for the State: STOPPING  :: Traffic1@Network1 
*Debug 01/09 11:01:53.364 Community Controller Traffic1@Network1: ***********************PUBLISHING STATE CHANGE EVENT***********************
  PUBLISHER MODULE: Community Controller Traffic1@Network1, TEST NAME: Test1, PREV STATE: 'Community Controller: RUNNING', EVENT RECEIVED:  TestController: Stop the Test Run
  NEW STATE: 'Community Controller: STOPPING', DESCRIPTION: None, DETAILS: None, STATUS: None
*Debug 01/09 11:01:53.676 ixStatApiCsvFilePlugin: stop(): Stopping stat plugin Test Server  for HTTPServer1
*Debug 01/09 11:01:53.687 ixStatApiCsvFilePlugin: stop(): Stopping stat plugin Test Client  for HTTPClient1
*Debug 01/09 11:01:55.677 ixStatApiCsvFilePlugin: stop(): Stopping stat plugin HTTP Server - Default CSV Logs for HTTPServer1
*Debug 01/09 11:01:55.684 ixStatApiCsvFilePlugin: stop(): Stopping stat plugin HTTP Server  for HTTPServer1
*Debug 01/09 11:01:55.684 HTTP Client: stop(): Stopping stat plugin ThrottleStat1 for HTTPClient1
*Debug 01/09 11:01:55.686 ixStatThread statThread[4]: exiting thread
*Debug 01/09 11:01:55.686 ixStatThread statThread[4]: Stat Thread statThread[4]: Average time per poll = 0.00s (total of 0.00s over 41 polls)
*Debug 01/09 11:01:55.687 ixStatThread statThread[4]: ixStatThread statThread[4] exit() - force=True, isThreadStopped=False
*Debug 01/09 11:01:55.688 ixStatPoller HTTP_THROLLE_0: Exiting Stat Plugin.
*Debug 01/09 11:01:55.694 ixStatApiCsvFilePlugin: stop(): Stopping stat plugin HTTP Client - Default CSV Logs for HTTPClient1
*Debug 01/09 11:01:55.698 Stat Controller: STAT CONTROLLER: DE-REGISTER THE Plugin with the STAT CONTROLLER : HTTP_THROLLE_0
*Debug 01/09 11:01:55.698 ixStatApiCsvFilePlugin: stop(): Stopping stat plugin HTTP Client  for HTTPClient1
*Debug 01/09 11:01:55.700 Stat Controller: deregister plugin HTTP_THROLLE_0 acquireStatEngineLock() called
*Debug 01/09 11:01:55.703 Stat Controller: deregister plugin HTTP_THROLLE_0 acquireStatEngineLock() done
*Debug 01/09 11:01:55.703 Stat Controller: deregister plugin HTTP_THROLLE_0 _deregister() called
*Debug 01/09 11:01:55.703 Stat Controller: _deregister plugin HTTP_THROLLE_0 started
*Debug 01/09 11:01:55.704 Stat Controller: UnRegister() req <C ixStatRequest instance at _48261137_p_StatRequest> called
*Debug 01/09 11:01:55.706 Stat Controller: UnRegister() req <C ixStatRequest instance at _48261137_p_StatRequest> done
*Debug 01/09 11:01:55.707 Stat Controller: _deregister plugin HTTP_THROLLE_0 stopped
*Debug 01/09 11:01:55.707 Stat Controller: deregister plugin HTTP_THROLLE_0 releaseStatEngineLock() called
*Debug 01/09 11:01:55.709 Stat Controller: deregister plugin HTTP_THROLLE_0 releaseStatEngineLock() done
*Debug 01/09 11:01:55.710 ixStatThread statThread[4]: Clearing pollers on stat thread statThread[4]
*Debug 01/09 11:01:55.710 ixStatThread statThread[4]: thread stopped gracefully
*Debug 01/09 11:01:55.713 ixStatThread statThread[2]: exiting thread
*Debug 01/09 11:01:55.713 ixStatThread statThread[2]: Stat Thread statThread[2]: Average time per poll = 0.02s (total of 1.73s over 82 polls)

################################################################################
## 01/09/2018 11:01:55: Log Rotate
################################################################################

