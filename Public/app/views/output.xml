<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180117 16:16:40.414" generator="Robot 3.0.2 (Python 2.7.13 on win32)">
<suite source="C:\xampp\htdocs\VNFXchange\Genric_Script\SBC_Onboarding_TestCases.robot" id="s1" name="SBC Onboarding TestCases">
<test id="s1-t1" name="TC1_Verification of on-boarded vnf on RHOSP">
<kw name="ImportDetails" library="Genric_Keywords">
<arguments>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Server}</var>
</assign>
<kw name="Parseconfdata" library="Library">
<arguments>
<arg>${ConfigPath}</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Param}</var>
</assign>
<msg timestamp="20180117 16:16:41.081" level="INFO">@{Param} = [ "RedHat" | SBC_Oracle | sbc-oracle-img | qcow2 | /root/auto_heatfiles | bare | C:\xampp\htdocs\VNFXchange | nova:compute2 | default | TCP | Ingress | ipv4 | Oracle_SBC_Flavour_Template.txt | nnSCZ73...</msg>
<status status="PASS" endtime="20180117 16:16:41.081" starttime="20180117 16:16:41.080"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${server}</var>
</assign>
<msg timestamp="20180117 16:16:41.082" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20180117 16:16:41.082" starttime="20180117 16:16:41.081"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${VNFName}</var>
</assign>
<msg timestamp="20180117 16:16:41.082" level="INFO">${VNFName} = SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:16:41.082" starttime="20180117 16:16:41.082"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${ImageName}</var>
</assign>
<msg timestamp="20180117 16:16:41.083" level="INFO">${ImageName} = sbc-oracle-img</msg>
<status status="PASS" endtime="20180117 16:16:41.083" starttime="20180117 16:16:41.082"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${DiskFormat}</var>
</assign>
<msg timestamp="20180117 16:16:41.083" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20180117 16:16:41.083" starttime="20180117 16:16:41.083"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${ImageFilePath}</var>
</assign>
<msg timestamp="20180117 16:16:41.084" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20180117 16:16:41.084" starttime="20180117 16:16:41.084"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${ConatinerFormat}</var>
</assign>
<msg timestamp="20180117 16:16:41.084" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20180117 16:16:41.085" starttime="20180117 16:16:41.084"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>6</arg>
</arguments>
<assign>
<var>${FlavorP}</var>
</assign>
<msg timestamp="20180117 16:16:41.085" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20180117 16:16:41.085" starttime="20180117 16:16:41.085"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>7</arg>
</arguments>
<assign>
<var>${AvZone}</var>
</assign>
<msg timestamp="20180117 16:16:41.085" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20180117 16:16:41.086" starttime="20180117 16:16:41.085"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${Security}</var>
</assign>
<msg timestamp="20180117 16:16:41.086" level="INFO">${Security} = default</msg>
<status status="PASS" endtime="20180117 16:16:41.086" starttime="20180117 16:16:41.086"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${Protocol}</var>
</assign>
<msg timestamp="20180117 16:16:41.086" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20180117 16:16:41.087" starttime="20180117 16:16:41.086"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>10</arg>
</arguments>
<assign>
<var>${Direction}</var>
</assign>
<msg timestamp="20180117 16:16:41.087" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20180117 16:16:41.087" starttime="20180117 16:16:41.087"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>11</arg>
</arguments>
<assign>
<var>${Ethertype}</var>
</assign>
<msg timestamp="20180117 16:16:41.087" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20180117 16:16:41.087" starttime="20180117 16:16:41.087"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${FN}</var>
</assign>
<msg timestamp="20180117 16:16:41.088" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180117 16:16:41.088" starttime="20180117 16:16:41.088"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<assign>
<var>${ImageFileName}</var>
</assign>
<msg timestamp="20180117 16:16:41.088" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180117 16:16:41.088" starttime="20180117 16:16:41.088"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic1}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:41.089" starttime="20180117 16:16:41.089"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic2}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:41.089" starttime="20180117 16:16:41.089"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic3}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:41.089" starttime="20180117 16:16:41.089"></status>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<doc>Splits the extension from the given path.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${FlavourName}</var>
<var>${Ext}</var>
</assign>
<msg timestamp="20180117 16:16:41.090" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<msg timestamp="20180117 16:16:41.090" level="INFO">${Ext} = txt</msg>
<status status="PASS" endtime="20180117 16:16:41.090" starttime="20180117 16:16:41.090"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFileName}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.091" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180117 16:16:41.091" starttime="20180117 16:16:41.090"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.091" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180117 16:16:41.091" starttime="20180117 16:16:41.091"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavourName}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.092" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20180117 16:16:41.092" starttime="20180117 16:16:41.092"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.092" level="INFO">${VNFName} = SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:16:41.092" starttime="20180117 16:16:41.092"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${server}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.093" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20180117 16:16:41.093" starttime="20180117 16:16:41.093"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageName}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.093" level="INFO">${ImageName} = sbc-oracle-img</msg>
<status status="PASS" endtime="20180117 16:16:41.094" starttime="20180117 16:16:41.093"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DiskFormat}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.094" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20180117 16:16:41.094" starttime="20180117 16:16:41.094"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFilePath}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.095" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20180117 16:16:41.095" starttime="20180117 16:16:41.094"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ConatinerFormat}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.095" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20180117 16:16:41.095" starttime="20180117 16:16:41.095"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavorP}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.096" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20180117 16:16:41.096" starttime="20180117 16:16:41.095"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AvZone}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.096" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20180117 16:16:41.096" starttime="20180117 16:16:41.096"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Security}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.097" level="INFO">${Security} = default</msg>
<status status="PASS" endtime="20180117 16:16:41.097" starttime="20180117 16:16:41.096"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Protocol}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.097" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20180117 16:16:41.097" starttime="20180117 16:16:41.097"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Direction}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.098" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20180117 16:16:41.098" starttime="20180117 16:16:41.098"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ethertype}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.098" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20180117 16:16:41.098" starttime="20180117 16:16:41.098"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic1}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:41.099" starttime="20180117 16:16:41.099"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic2}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:41.099" starttime="20180117 16:16:41.099"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.099" level="INFO">${VNFName} = SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:16:41.100" starttime="20180117 16:16:41.099"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic3}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:41.100" starttime="20180117 16:16:41.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${server}=="RedHat"</arg>
<arg>Return From Keyword</arg>
<arg>@{RedHat}</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>@{RedHat}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.101" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20180117 16:16:41.101" starttime="20180117 16:16:41.100"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:41.101" starttime="20180117 16:16:41.100"></status>
</kw>
<msg timestamp="20180117 16:16:41.101" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20180117 16:16:41.101" starttime="20180117 16:16:41.080"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{Server}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.102" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20180117 16:16:41.102" starttime="20180117 16:16:41.102"></status>
</kw>
<kw name="Server_Login" library="Genric_Keywords">
<arguments>
<arg>@{Server}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${HOST}</var>
</assign>
<msg timestamp="20180117 16:16:41.103" level="INFO">${HOST} = 10.53.214.10</msg>
<status status="PASS" endtime="20180117 16:16:41.103" starttime="20180117 16:16:41.103"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${USERNAME}</var>
</assign>
<msg timestamp="20180117 16:16:41.104" level="INFO">${USERNAME} = root</msg>
<status status="PASS" endtime="20180117 16:16:41.104" starttime="20180117 16:16:41.103"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${PASSWORD}</var>
</assign>
<msg timestamp="20180117 16:16:41.104" level="INFO">${PASSWORD} = techm123</msg>
<status status="PASS" endtime="20180117 16:16:41.104" starttime="20180117 16:16:41.104"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<msg timestamp="20180117 16:16:41.105" level="INFO">${Index} = 1</msg>
<status status="PASS" endtime="20180117 16:16:41.105" starttime="20180117 16:16:41.105"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Login</arg>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180117 16:16:41.106" level="INFO">Logging into '10.53.214.10:22' as 'root'.</msg>
<msg timestamp="20180117 16:16:47.514" level="INFO">Read output: Last login: Wed Jan 17 05:33:09 2018 from 10.53.172.9
[root@controller ~]#</msg>
<status status="PASS" endtime="20180117 16:16:47.514" starttime="20180117 16:16:41.106"></status>
</kw>
<msg timestamp="20180117 16:16:47.514" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180117 16:16:47.514" starttime="20180117 16:16:41.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:47.516" starttime="20180117 16:16:47.515"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20180117 16:16:47.516" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20180117 16:16:47.516" starttime="20180117 16:16:47.516"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:47.517" starttime="20180117 16:16:41.105"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:47.517" starttime="20180117 16:16:41.104"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation**********************</arg>
</arguments>
<msg timestamp="20180117 16:16:47.517" level="INFO">*****************ServerLogin_Validation**********************</msg>
<status status="PASS" endtime="20180117 16:16:47.517" starttime="20180117 16:16:47.517"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>ifconfig | grep inet</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ifconfig | grep inet</arg>
</arguments>
<msg timestamp="20180117 16:16:47.523" level="INFO">ifconfig | grep inet</msg>
<status status="PASS" endtime="20180117 16:16:47.523" starttime="20180117 16:16:47.519"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:47.523" starttime="20180117 16:16:47.518"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:16:51.524" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:16:51.524" starttime="20180117 16:16:47.524"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:16:51.526" level="INFO">[01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::4d7:59ff:fe85:5f45  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.80.1.8  netmask 255.255.255.0  broadcast 10.80.1.255
        [01;31m[Kinet[m[K6 fe80::fc8a:54ff:fe8a:974e  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.81.1.8  netmask 255.255.255.0  broadcast 10.81.1.255
        [01;31m[Kinet[m[K6 fe80::283b:ecff:fee2:1e40  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.53.214.10  netmask 255.255.255.0  broadcast 10.53.214.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cc  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 127.0.0.1  netmask 255.0.0.0
        [01;31m[Kinet[m[K6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@controller ~]#</msg>
<msg timestamp="20180117 16:16:51.527" level="INFO">${output} =         [01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m...</msg>
<status status="PASS" endtime="20180117 16:16:51.527" starttime="20180117 16:16:51.525"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:51.529" starttime="20180117 16:16:51.528"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation Completed**********************</arg>
</arguments>
<msg timestamp="20180117 16:16:51.530" level="INFO">*****************ServerLogin_Validation Completed**********************</msg>
<status status="PASS" endtime="20180117 16:16:51.531" starttime="20180117 16:16:51.530"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>source keystonerc_admin</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source keystonerc_admin</arg>
</arguments>
<msg timestamp="20180117 16:16:51.539" level="INFO">source keystonerc_admin</msg>
<status status="PASS" endtime="20180117 16:16:51.539" starttime="20180117 16:16:51.533"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:51.540" starttime="20180117 16:16:51.531"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:16:51.541" level="INFO">[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:16:51.541" level="INFO">${output} = [root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:16:51.541" starttime="20180117 16:16:51.540"></status>
</kw>
<msg timestamp="20180117 16:16:51.542" level="INFO">${Index} = 1</msg>
<status status="PASS" endtime="20180117 16:16:51.542" starttime="20180117 16:16:41.102"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>Server Logged</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:51.545" starttime="20180117 16:16:51.544"></status>
</kw>
<kw name="SBC_CreateFlavor" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:51.548" starttime="20180117 16:16:51.547"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:51.549" starttime="20180117 16:16:51.549"></status>
</kw>
<kw name="Create Flavor" library="Genric_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>********************Create Flavor start*****************************</arg>
</arguments>
<msg timestamp="20180117 16:16:51.552" level="INFO">********************Create Flavor start*****************************</msg>
<status status="PASS" endtime="20180117 16:16:51.552" starttime="20180117 16:16:51.551"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\</arg>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20180117 16:16:51.554" level="INFO">${path} = C:\xampp\htdocs\VNFXchange\Genric_Script\Config\Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180117 16:16:51.554" starttime="20180117 16:16:51.553"></status>
</kw>
<kw name="ImportFlavor" library="Genric_Keywords">
<arguments>
<arg>${path}</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${Path}</arg>
</arguments>
<assign>
<var>${File}</var>
</assign>
<msg timestamp="20180117 16:16:51.557" html="yes" level="INFO">Getting file '&lt;a href="file://C:\xampp\htdocs\VNFXchange\Genric_Script\Config\Oracle_SBC_Flavour_Template.txt"&gt;C:\xampp\htdocs\VNFXchange\Genric_Script\Config\Oracle_SBC_Flavour_Template.txt&lt;/a&gt;'.</msg>
<msg timestamp="20180117 16:16:51.559" level="INFO">${File} = Ram:8192
disk:80
vcpus:4</msg>
<status status="PASS" endtime="20180117 16:16:51.559" starttime="20180117 16:16:51.556"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${Flavor_list}</var>
</assign>
<msg timestamp="20180117 16:16:51.560" level="INFO">${Flavor_list} = []</msg>
<status status="PASS" endtime="20180117 16:16:51.560" starttime="20180117 16:16:51.559"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${File}</arg>
</arguments>
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20180117 16:16:51.562" level="INFO">3 lines returned</msg>
<msg timestamp="20180117 16:16:51.562" level="INFO">@{list} = [ Ram:8192 | disk:80 | vcpus:4 ]</msg>
<status status="PASS" endtime="20180117 16:16:51.562" starttime="20180117 16:16:51.561"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${i}</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:51.563" starttime="20180117 16:16:51.563"></status>
</kw>
<kw type="for" name="${line} IN [ @{list} ]">
<kw type="foritem" name="${line} = Ram:8192">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>${line}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:51.565" starttime="20180117 16:16:51.565"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${line}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20180117 16:16:51.567" level="INFO">@{data} = [ Ram | 8192 ]</msg>
<status status="PASS" endtime="20180117 16:16:51.567" starttime="20180117 16:16:51.566"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${data}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Value}</var>
</assign>
<msg timestamp="20180117 16:16:51.569" level="INFO">${Value} = 8192</msg>
<status status="PASS" endtime="20180117 16:16:51.569" starttime="20180117 16:16:51.568"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>${Value}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:51.571" starttime="20180117 16:16:51.570"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:51.571" starttime="20180117 16:16:51.564"></status>
</kw>
<kw type="foritem" name="${line} = disk:80">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>${line}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:51.572" starttime="20180117 16:16:51.572"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${line}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20180117 16:16:51.574" level="INFO">@{data} = [ disk | 80 ]</msg>
<status status="PASS" endtime="20180117 16:16:51.574" starttime="20180117 16:16:51.573"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${data}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Value}</var>
</assign>
<msg timestamp="20180117 16:16:51.576" level="INFO">${Value} = 80</msg>
<status status="PASS" endtime="20180117 16:16:51.576" starttime="20180117 16:16:51.575"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>${Value}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:51.577" starttime="20180117 16:16:51.576"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:51.578" starttime="20180117 16:16:51.571"></status>
</kw>
<kw type="foritem" name="${line} = vcpus:4">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>${line}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:51.579" starttime="20180117 16:16:51.579"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${line}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20180117 16:16:51.581" level="INFO">@{data} = [ vcpus | 4 ]</msg>
<status status="PASS" endtime="20180117 16:16:51.581" starttime="20180117 16:16:51.580"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${data}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Value}</var>
</assign>
<msg timestamp="20180117 16:16:51.583" level="INFO">${Value} = 4</msg>
<status status="PASS" endtime="20180117 16:16:51.583" starttime="20180117 16:16:51.582"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>${Value}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:51.585" starttime="20180117 16:16:51.583"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:51.585" starttime="20180117 16:16:51.578"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:51.585" starttime="20180117 16:16:51.564"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${Ram}</var>
</assign>
<msg timestamp="20180117 16:16:51.587" level="INFO">${Ram} = 8192</msg>
<status status="PASS" endtime="20180117 16:16:51.587" starttime="20180117 16:16:51.585"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Disk}</var>
</assign>
<msg timestamp="20180117 16:16:51.588" level="INFO">${Disk} = 80</msg>
<status status="PASS" endtime="20180117 16:16:51.588" starttime="20180117 16:16:51.587"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${CPU}</var>
</assign>
<msg timestamp="20180117 16:16:51.590" level="INFO">${CPU} = 4</msg>
<status status="PASS" endtime="20180117 16:16:51.591" starttime="20180117 16:16:51.589"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ram}</arg>
</arguments>
<msg timestamp="20180117 16:16:51.592" level="INFO">${Ram} = 8192</msg>
<status status="PASS" endtime="20180117 16:16:51.593" starttime="20180117 16:16:51.591"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Disk}</arg>
</arguments>
<msg timestamp="20180117 16:16:51.594" level="INFO">${Disk} = 80</msg>
<status status="PASS" endtime="20180117 16:16:51.595" starttime="20180117 16:16:51.593"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CPU}</arg>
</arguments>
<msg timestamp="20180117 16:16:51.596" level="INFO">${CPU} = 4</msg>
<status status="PASS" endtime="20180117 16:16:51.596" starttime="20180117 16:16:51.595"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:51.597" starttime="20180117 16:16:51.554"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova flavor-create</arg>
<arg>${FlavourName}</arg>
<arg>auto</arg>
<arg>${Ram}</arg>
<arg>${Disk}</arg>
<arg>${CPU}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180117 16:16:51.599" level="INFO">${str} = nova flavor-create Oracle_SBC_Flavour_Template auto 8192 80 4</msg>
<status status="PASS" endtime="20180117 16:16:51.599" starttime="20180117 16:16:51.597"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180117 16:16:51.608" level="INFO">nova flavor-create Oracle_SBC_Flavour_Templ ate auto 8192 80 4</msg>
<status status="PASS" endtime="20180117 16:16:51.608" starttime="20180117 16:16:51.600"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:16:56.609" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:16:56.609" starttime="20180117 16:16:51.609"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:16:56.611" level="INFO">+--------------------------------------+-----------------------------+-----------+------+-----------+------+-------+-------------+-----------+
| ID                                   | Name                        | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public |
+--------------------------------------+-----------------------------+-----------+------+-----------+------+-------+-------------+-----------+
| 560ff24d-5dfe-4eca-8db7-c6ffb4de006c | Oracle_SBC_Flavour_Template | 8192      | 80   | 0         |      | 4     | 1.0         | True      |
+--------------------------------------+-----------------------------+-----------+------+-----------+------+-------+-------------+-----------+
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:16:56.611" level="INFO">${output} = +--------------------------------------+-----------------------------+-----------+------+-----------+------+-------+-------------+-----------+
| ID                                   | Name           ...</msg>
<status status="PASS" endtime="20180117 16:16:56.611" starttime="20180117 16:16:56.610"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>********************Create Flavor Complete*****************************</arg>
</arguments>
<msg timestamp="20180117 16:16:56.613" level="INFO">********************Create Flavor Complete*****************************</msg>
<status status="PASS" endtime="20180117 16:16:56.613" starttime="20180117 16:16:56.612"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:56.613" starttime="20180117 16:16:51.550"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******SBC_CreateFlavor Done******</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:56.615" starttime="20180117 16:16:56.614"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:56.616" starttime="20180117 16:16:51.546"></status>
</kw>
<kw name="Flavor_Validation" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:56.619" starttime="20180117 16:16:56.618"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:16:56.620" starttime="20180117 16:16:56.619"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova flavor-list |grep \ -i</arg>
<arg>${FlavourName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180117 16:16:56.622" level="INFO">${str} = nova flavor-list |grep  -i Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20180117 16:16:56.622" starttime="20180117 16:16:56.621"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180117 16:16:56.631" level="INFO">nova flavor-list |grep  -i Oracle_SBC_Flavo ur_Template</msg>
<status status="PASS" endtime="20180117 16:16:56.632" starttime="20180117 16:16:56.624"></status>
</kw>
<status status="PASS" endtime="20180117 16:16:56.632" starttime="20180117 16:16:56.623"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180117 16:17:06.632" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180117 16:17:06.632" starttime="20180117 16:16:56.632"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:17:06.634" level="INFO">| 560ff24d-5dfe-4eca-8db7-c6ffb4de006c | [01;31m[KOracle_SBC_Flavour_Template[m[K | 8192      | 80   | 0         |      | 4     | 1.0         | True      |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:17:06.635" level="INFO">${output} = | 560ff24d-5dfe-4eca-8db7-c6ffb4de006c | [01;31m[KOracle_SBC_Flavour_Template[m[K | 8192      | 80   | 0         |      | 4     | 1.0         | True      |
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:17:06.635" starttime="20180117 16:17:06.633"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${FlavourName}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.637" starttime="20180117 16:17:06.635"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******Flavor_Validation Done *******</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.639" starttime="20180117 16:17:06.637"></status>
</kw>
<status status="PASS" endtime="20180117 16:17:06.640" starttime="20180117 16:16:56.617"></status>
</kw>
<kw name="SBC_CreateImage" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.643" starttime="20180117 16:17:06.642"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.645" starttime="20180117 16:17:06.644"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>**************Push Image started***********</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.646" starttime="20180117 16:17:06.645"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>PushimagefiletoServer</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.647" starttime="20180117 16:17:06.646"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>**************Push Image Completed***********</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.648" starttime="20180117 16:17:06.648"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************Image Create Started ***********</arg>
</arguments>
<msg timestamp="20180117 16:17:06.650" level="INFO">**************Image Create Started ***********</msg>
<status status="PASS" endtime="20180117 16:17:06.650" starttime="20180117 16:17:06.649"></status>
</kw>
<kw name="GlanceImageUpload" library="Genric_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>******************Create Image on Glance Started*******************</arg>
</arguments>
<msg timestamp="20180117 16:17:06.652" level="INFO">******************Create Image on Glance Started*******************</msg>
<status status="PASS" endtime="20180117 16:17:06.652" starttime="20180117 16:17:06.651"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Switch Connection</arg>
<arg>${Index}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.653" starttime="20180117 16:17:06.653"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${IN}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.654" starttime="20180117 16:17:06.654"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${DF}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.655" starttime="20180117 16:17:06.655"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${IFP}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.656" starttime="20180117 16:17:06.656"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${CF}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.657" starttime="20180117 16:17:06.657"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${FP}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.659" starttime="20180117 16:17:06.658"></status>
</kw>
<kw name="Getimagename" library="Library">
<arguments>
<arg>${ImageFilePath}</arg>
<arg>${ImageFileName}</arg>
</arguments>
<assign>
<var>${remotepathwithimagename}</var>
</assign>
<msg timestamp="20180117 16:17:06.661" level="INFO">${remotepathwithimagename} = /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180117 16:17:06.661" starttime="20180117 16:17:06.660"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${dstImage}</arg>
<arg>Catenate</arg>
<arg>SEPERATOR=/</arg>
<arg>/root/auto_heatfiles</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.662" starttime="20180117 16:17:06.661"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${IN}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:06.663" starttime="20180117 16:17:06.663"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>glance image-create --name</arg>
<arg>${ImageName}</arg>
</arguments>
<assign>
<var>${str1}</var>
</assign>
<msg timestamp="20180117 16:17:06.665" level="INFO">${str1} = glance image-create --name sbc-oracle-img</msg>
<status status="PASS" endtime="20180117 16:17:06.665" starttime="20180117 16:17:06.664"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--disk-format</arg>
<arg>${DiskFormat}</arg>
</arguments>
<assign>
<var>${str2}</var>
</assign>
<msg timestamp="20180117 16:17:06.667" level="INFO">${str2} = --disk-format qcow2</msg>
<status status="PASS" endtime="20180117 16:17:06.667" starttime="20180117 16:17:06.666"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--file</arg>
<arg>${remotepathwithimagename}</arg>
</arguments>
<assign>
<var>${str3}</var>
</assign>
<msg timestamp="20180117 16:17:06.669" level="INFO">${str3} = --file /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180117 16:17:06.669" starttime="20180117 16:17:06.668"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--container-format</arg>
<arg>${ConatinerFormat}</arg>
</arguments>
<assign>
<var>${str4}</var>
</assign>
<msg timestamp="20180117 16:17:06.671" level="INFO">${str4} = --container-format bare</msg>
<status status="PASS" endtime="20180117 16:17:06.671" starttime="20180117 16:17:06.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${str1}</arg>
<arg>${str2}</arg>
<arg>${str4}</arg>
<arg>${str3}</arg>
</arguments>
<assign>
<var>${str5}</var>
</assign>
<msg timestamp="20180117 16:17:06.673" level="INFO">${str5} = glance image-create --name sbc-oracle-img --disk-format qcow2 --container-format bare --file /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180117 16:17:06.673" starttime="20180117 16:17:06.671"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str5}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str5}</arg>
</arguments>
<msg timestamp="20180117 16:17:06.686" level="INFO">glance image-create --name sbc-oracle-img - -disk-format qcow2 --container-format bare --file /root/auto_heatfiles/nnSCZ739p 1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180117 16:17:06.686" starttime="20180117 16:17:06.675"></status>
</kw>
<status status="PASS" endtime="20180117 16:17:06.687" starttime="20180117 16:17:06.674"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15</arg>
</arguments>
<msg timestamp="20180117 16:17:21.688" level="INFO">Slept 15 seconds</msg>
<status status="PASS" endtime="20180117 16:17:21.689" starttime="20180117 16:17:06.687"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>******************Create Image on Glance completed*******************</arg>
</arguments>
<msg timestamp="20180117 16:17:21.690" level="INFO">******************Create Image on Glance completed*******************</msg>
<status status="PASS" endtime="20180117 16:17:21.690" starttime="20180117 16:17:21.689"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:17:21.692" level="INFO">+------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum         | 9c12c518d6358b2826b30d82597d4feb     |
| container_format | bare                                 |
| created_at       | 2018-01-17T10:46:15Z                 |
| disk_format      | qcow2                                |
| id               | 08798b66-853e-48a5-9671-4873b7c195db |
| min_disk         | 0                                    |
| min_ram          | 0                                    |
| name             | sbc-oracle-img                       |
| owner            | 8f6857039a224ab1b596bfd42147dc88     |
| protected        | False                                |
| size             | 93847552                             |
| status           | active                               |
| tags             | []                                   |
| updated_at       | 2018-01-17T10:46:16Z                 |
| virtual_size     | None                                 |
| visibility       | private                              |
+------------------+--------------------------------------+
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:17:21.693" level="INFO">${output} = +------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum       ...</msg>
<status status="PASS" endtime="20180117 16:17:21.693" starttime="20180117 16:17:21.691"></status>
</kw>
<status status="PASS" endtime="20180117 16:17:21.693" starttime="20180117 16:17:06.650"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************Image Create Completed ***********</arg>
</arguments>
<msg timestamp="20180117 16:17:21.695" level="INFO">**************Image Create Completed ***********</msg>
<status status="PASS" endtime="20180117 16:17:21.695" starttime="20180117 16:17:21.694"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******SBC_CreateImage Done*******</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:21.698" starttime="20180117 16:17:21.696"></status>
</kw>
<status status="PASS" endtime="20180117 16:17:21.698" starttime="20180117 16:17:06.641"></status>
</kw>
<kw name="Image_Validation" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:21.702" starttime="20180117 16:17:21.701"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:21.704" starttime="20180117 16:17:21.702"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************************Image Validation Started**********************</arg>
</arguments>
<msg timestamp="20180117 16:17:21.705" level="INFO">*****************************Image Validation Started**********************</msg>
<status status="PASS" endtime="20180117 16:17:21.706" starttime="20180117 16:17:21.704"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova image-list |grep \ -i</arg>
<arg>${ImageName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180117 16:17:21.708" level="INFO">${str} = nova image-list |grep  -i sbc-oracle-img</msg>
<status status="PASS" endtime="20180117 16:17:21.708" starttime="20180117 16:17:21.706"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180117 16:17:21.717" level="INFO">nova image-list |grep  -i sbc-oracle-img</msg>
<status status="PASS" endtime="20180117 16:17:21.718" starttime="20180117 16:17:21.710"></status>
</kw>
<status status="PASS" endtime="20180117 16:17:21.718" starttime="20180117 16:17:21.709"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:17:26.719" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:17:26.720" starttime="20180117 16:17:21.718"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:17:26.721" level="INFO">| 08798b66-853e-48a5-9671-4873b7c195db | [01;31m[Ksbc-oracle-img[m[K                                  | ACTIVE |                                      |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:17:26.722" level="INFO">${output} = | 08798b66-853e-48a5-9671-4873b7c195db | [01;31m[Ksbc-oracle-img[m[K                                  | ACTIVE |                                      |
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:17:26.722" starttime="20180117 16:17:26.720"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${ImageName}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:26.724" starttime="20180117 16:17:26.723"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************************Image Validation Completed**********************</arg>
</arguments>
<msg timestamp="20180117 16:17:26.725" level="INFO">*****************************Image Validation Completed**********************</msg>
<status status="PASS" endtime="20180117 16:17:26.726" starttime="20180117 16:17:26.725"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******Image_Validation Done*******</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:26.728" starttime="20180117 16:17:26.726"></status>
</kw>
<status status="PASS" endtime="20180117 16:17:26.729" starttime="20180117 16:17:21.699"></status>
</kw>
<kw name="SBC_OnboardVM" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:26.733" starttime="20180117 16:17:26.731"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:26.734" starttime="20180117 16:17:26.733"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*************VM Create Started ***********</arg>
</arguments>
<msg timestamp="20180117 16:17:26.735" level="INFO">*************VM Create Started ***********</msg>
<status status="PASS" endtime="20180117 16:17:26.736" starttime="20180117 16:17:26.735"></status>
</kw>
<kw name="VMCreation" library="Genric_Keywords">
<arguments>
<arg>${Label}</arg>
<arg>${NicSBC}</arg>
</arguments>
<kw name="Getimagename" library="Library">
<arguments>
<arg>${ImageFilePath}</arg>
<arg>${ImageFileName}</arg>
</arguments>
<assign>
<var>${remotepathwithimagename}</var>
</assign>
<msg timestamp="20180117 16:17:26.740" level="INFO">${remotepathwithimagename} = /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180117 16:17:26.740" starttime="20180117 16:17:26.738"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>neutron net-list | head -6 | tail -3 | awk -F "|" '{print $2}' &gt;&gt; nicID.txt</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:26.741" starttime="20180117 16:17:26.740"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Get File</arg>
<arg>/root/nicID.txt</arg>
<arg>C://Users//Admin//Desktop//Sukesh-Automation//RobotFramework//Genric_Script//Python_Script//</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:26.742" starttime="20180117 16:17:26.742"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Switch Connection</arg>
<arg>${Index}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:26.744" starttime="20180117 16:17:26.743"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{FlvrParam}</arg>
<arg>Parseconfdata</arg>
<arg>${FlavorP}</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:26.745" starttime="20180117 16:17:26.744"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${FlavourName}</arg>
<arg>Get From List</arg>
<arg>${FlvrParam}</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:26.746" starttime="20180117 16:17:26.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--flavor</arg>
<arg>${FlavourName}</arg>
</arguments>
<assign>
<var>${flavor}</var>
</assign>
<msg timestamp="20180117 16:17:26.748" level="INFO">${flavor} = --flavor Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20180117 16:17:26.749" starttime="20180117 16:17:26.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--availability_zone</arg>
<arg>${AvZone}</arg>
</arguments>
<assign>
<var>${AvailZone}</var>
</assign>
<msg timestamp="20180117 16:17:26.751" level="INFO">${AvailZone} = --availability_zone nova:compute2</msg>
<status status="PASS" endtime="20180117 16:17:26.751" starttime="20180117 16:17:26.750"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--security-groups</arg>
<arg>${Security}</arg>
</arguments>
<assign>
<var>${SecurityPol}</var>
</assign>
<msg timestamp="20180117 16:17:26.752" level="INFO">${SecurityPol} = --security-groups default</msg>
<status status="PASS" endtime="20180117 16:17:26.752" starttime="20180117 16:17:26.751"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${image}</arg>
<arg>Catenate</arg>
<arg>--image</arg>
<arg>${IN}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:17:26.753" starttime="20180117 16:17:26.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova boot</arg>
<arg>${flavor}</arg>
<arg>--image</arg>
<arg>${ImageName}</arg>
<arg>${AvailZone}</arg>
<arg>${SecurityPol}</arg>
<arg>${Nic}</arg>
<arg>--config-drive=true</arg>
<arg>${VNFName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180117 16:17:26.755" level="INFO">${str} = nova boot --flavor Oracle_SBC_Flavour_Template --image sbc-oracle-img --availability_zone nova:compute2 --security-groups default --nic net-id=3f4a053f-3b05-4388-8e4a-8e47bcd757fb --nic net-id=78d1ec1...</msg>
<status status="PASS" endtime="20180117 16:17:26.755" starttime="20180117 16:17:26.753"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:17:31.755" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:17:31.755" starttime="20180117 16:17:26.755"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180117 16:17:31.776" level="INFO">nova boot --flavor Oracle_SBC_Flavour_Templ ate --image sbc-oracle-img --availability_zone nova:compute2 --security-groups d efault --nic net-id=3f4a053f-3b05-4388-8e4a-8e47bcd757fb --nic net-id=78d1ec17-3 97d-455c-9d4d-3e79116d6337 --nic net-id=78d1ec17-397d-455c-9d4d-3e79116d6337 --c onfig-drive=true SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:17:31.777" starttime="20180117 16:17:31.758"></status>
</kw>
<status status="PASS" endtime="20180117 16:17:31.777" starttime="20180117 16:17:31.756"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>40</arg>
</arguments>
<msg timestamp="20180117 16:18:11.778" level="INFO">Slept 40 seconds</msg>
<status status="PASS" endtime="20180117 16:18:11.778" starttime="20180117 16:17:31.777"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:18:11.780" level="INFO">+--------------------------------------+--------------------------------------------------------------------+
| Property                             | Value                                                              |
+--------------------------------------+--------------------------------------------------------------------+
| OS-DCF:diskConfig                    | MANUAL                                                             |
| OS-EXT-AZ:availability_zone          | nova                                                               |
| OS-EXT-SRV-ATTR:host                 | -                                                                  |
| OS-EXT-SRV-ATTR:hypervisor_hostname  | -                                                                  |
| OS-EXT-SRV-ATTR:instance_name        | instance-00000c18                                                  |
| OS-EXT-STS:power_state               | 0                                                                  |
| OS-EXT-STS:task_state                | scheduling                                                         |
| OS-EXT-STS:vm_state                  | building                                                           |
| OS-SRV-USG:launched_at               | -                                                                  |
| OS-SRV-USG:terminated_at             | -                                                                  |
| accessIPv4                           |                                                                    |
| accessIPv6                           |                                                                    |
| adminPass                            | M7fHmZrVSEut                                                       |
| config_drive                         | True                                                               |
| created                              | 2018-01-17T10:46:41Z                                               |
| flavor                               | Oracle_SBC_Flavour_Template (560ff24d-5dfe-4eca-8db7-c6ffb4de006c) |
| hostId                               |                                                                    |
| id                                   | 64ac6d0f-4fd0-4521-bb40-e7de0e778e3e                               |
| image                                | sbc-oracle-img (08798b66-853e-48a5-9671-4873b7c195db)              |
| key_name                             | -                                                                  |
| metadata                             | {}                                                                 |
| name                                 | SBC_Oracle                                                         |
| os-extended-volumes:volumes_attached | []                                                                 |
| progress                             | 0                                                                  |
| security_groups                      | default                                                            |
| status                               | BUILD                                                              |
| tenant_id                            | 8f6857039a224ab1b596bfd42147dc88                                   |
| updated                              | 2018-01-17T10:46:42Z                                               |
| user_id                              | 26917d95d4584829a3db1f86c252a709                                   |
+--------------------------------------+--------------------------------------------------------------------+
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:18:11.781" level="INFO">${output} = +--------------------------------------+--------------------------------------------------------------------+
| Property                             | Value                                           ...</msg>
<status status="PASS" endtime="20180117 16:18:11.781" starttime="20180117 16:18:11.779"></status>
</kw>
<status status="PASS" endtime="20180117 16:18:11.782" starttime="20180117 16:17:26.736"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60</arg>
</arguments>
<msg timestamp="20180117 16:19:11.783" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20180117 16:19:11.783" starttime="20180117 16:18:11.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>********Reboot Process In Progress Bringing up the VM *************</arg>
</arguments>
<msg timestamp="20180117 16:19:11.785" level="INFO">********Reboot Process In Progress Bringing up the VM *************</msg>
<status status="PASS" endtime="20180117 16:19:11.785" starttime="20180117 16:19:11.784"></status>
</kw>
<kw name="Reboot_loop" library="Oracle_SBC_Keywords">
<kw name="Get_SBC-IP" library="Oracle_SBC_Keywords">
<kw name="ImportDetails" library="Genric_Keywords">
<arguments>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Server}</var>
</assign>
<kw name="Parseconfdata" library="Library">
<arguments>
<arg>${ConfigPath}</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Param}</var>
</assign>
<msg timestamp="20180117 16:19:11.795" level="INFO">@{Param} = [ "RedHat" | SBC_Oracle | sbc-oracle-img | qcow2 | /root/auto_heatfiles | bare | C:\xampp\htdocs\VNFXchange | nova:compute2 | default | TCP | Ingress | ipv4 | Oracle_SBC_Flavour_Template.txt | nnSCZ73...</msg>
<status status="PASS" endtime="20180117 16:19:11.795" starttime="20180117 16:19:11.791"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${server}</var>
</assign>
<msg timestamp="20180117 16:19:11.797" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20180117 16:19:11.798" starttime="20180117 16:19:11.796"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${VNFName}</var>
</assign>
<msg timestamp="20180117 16:19:11.800" level="INFO">${VNFName} = SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:19:11.800" starttime="20180117 16:19:11.798"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${ImageName}</var>
</assign>
<msg timestamp="20180117 16:19:11.802" level="INFO">${ImageName} = sbc-oracle-img</msg>
<status status="PASS" endtime="20180117 16:19:11.802" starttime="20180117 16:19:11.800"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${DiskFormat}</var>
</assign>
<msg timestamp="20180117 16:19:11.804" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20180117 16:19:11.804" starttime="20180117 16:19:11.803"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${ImageFilePath}</var>
</assign>
<msg timestamp="20180117 16:19:11.806" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20180117 16:19:11.806" starttime="20180117 16:19:11.805"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${ConatinerFormat}</var>
</assign>
<msg timestamp="20180117 16:19:11.808" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20180117 16:19:11.808" starttime="20180117 16:19:11.807"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>6</arg>
</arguments>
<assign>
<var>${FlavorP}</var>
</assign>
<msg timestamp="20180117 16:19:11.810" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20180117 16:19:11.811" starttime="20180117 16:19:11.809"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>7</arg>
</arguments>
<assign>
<var>${AvZone}</var>
</assign>
<msg timestamp="20180117 16:19:11.811" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20180117 16:19:11.812" starttime="20180117 16:19:11.811"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${Security}</var>
</assign>
<msg timestamp="20180117 16:19:11.812" level="INFO">${Security} = default</msg>
<status status="PASS" endtime="20180117 16:19:11.812" starttime="20180117 16:19:11.812"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${Protocol}</var>
</assign>
<msg timestamp="20180117 16:19:11.813" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20180117 16:19:11.813" starttime="20180117 16:19:11.813"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>10</arg>
</arguments>
<assign>
<var>${Direction}</var>
</assign>
<msg timestamp="20180117 16:19:11.814" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20180117 16:19:11.814" starttime="20180117 16:19:11.814"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>11</arg>
</arguments>
<assign>
<var>${Ethertype}</var>
</assign>
<msg timestamp="20180117 16:19:11.815" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20180117 16:19:11.815" starttime="20180117 16:19:11.814"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${FN}</var>
</assign>
<msg timestamp="20180117 16:19:11.816" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180117 16:19:11.816" starttime="20180117 16:19:11.815"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<assign>
<var>${ImageFileName}</var>
</assign>
<msg timestamp="20180117 16:19:11.817" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180117 16:19:11.817" starttime="20180117 16:19:11.816"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic1}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:11.817" starttime="20180117 16:19:11.817"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic2}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:11.818" starttime="20180117 16:19:11.818"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic3}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:11.818" starttime="20180117 16:19:11.818"></status>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<doc>Splits the extension from the given path.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${FlavourName}</var>
<var>${Ext}</var>
</assign>
<msg timestamp="20180117 16:19:11.819" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<msg timestamp="20180117 16:19:11.819" level="INFO">${Ext} = txt</msg>
<status status="PASS" endtime="20180117 16:19:11.820" starttime="20180117 16:19:11.819"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFileName}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.821" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180117 16:19:11.821" starttime="20180117 16:19:11.820"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.822" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180117 16:19:11.822" starttime="20180117 16:19:11.821"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavourName}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.823" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20180117 16:19:11.823" starttime="20180117 16:19:11.822"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.824" level="INFO">${VNFName} = SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:19:11.824" starttime="20180117 16:19:11.823"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${server}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.825" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20180117 16:19:11.825" starttime="20180117 16:19:11.824"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageName}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.826" level="INFO">${ImageName} = sbc-oracle-img</msg>
<status status="PASS" endtime="20180117 16:19:11.826" starttime="20180117 16:19:11.825"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DiskFormat}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.827" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20180117 16:19:11.827" starttime="20180117 16:19:11.826"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFilePath}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.828" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20180117 16:19:11.828" starttime="20180117 16:19:11.827"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ConatinerFormat}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.829" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20180117 16:19:11.829" starttime="20180117 16:19:11.828"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavorP}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.830" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20180117 16:19:11.830" starttime="20180117 16:19:11.829"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AvZone}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.831" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20180117 16:19:11.831" starttime="20180117 16:19:11.830"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Security}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.832" level="INFO">${Security} = default</msg>
<status status="PASS" endtime="20180117 16:19:11.832" starttime="20180117 16:19:11.831"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Protocol}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.833" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20180117 16:19:11.833" starttime="20180117 16:19:11.832"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Direction}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.834" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20180117 16:19:11.834" starttime="20180117 16:19:11.833"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ethertype}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.835" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20180117 16:19:11.835" starttime="20180117 16:19:11.835"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic1}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:11.836" starttime="20180117 16:19:11.836"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic2}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:11.836" starttime="20180117 16:19:11.836"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.837" level="INFO">${VNFName} = SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:19:11.837" starttime="20180117 16:19:11.837"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic3}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:11.838" starttime="20180117 16:19:11.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${server}=="RedHat"</arg>
<arg>Return From Keyword</arg>
<arg>@{RedHat}</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>@{RedHat}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.839" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20180117 16:19:11.839" starttime="20180117 16:19:11.839"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:11.839" starttime="20180117 16:19:11.838"></status>
</kw>
<msg timestamp="20180117 16:19:11.840" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20180117 16:19:11.840" starttime="20180117 16:19:11.788"></status>
</kw>
<kw name="Server_Login" library="Genric_Keywords">
<arguments>
<arg>@{Server}</arg>
</arguments>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${HOST}</var>
</assign>
<msg timestamp="20180117 16:19:11.841" level="INFO">${HOST} = 10.53.214.10</msg>
<status status="PASS" endtime="20180117 16:19:11.841" starttime="20180117 16:19:11.841"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${USERNAME}</var>
</assign>
<msg timestamp="20180117 16:19:11.842" level="INFO">${USERNAME} = root</msg>
<status status="PASS" endtime="20180117 16:19:11.842" starttime="20180117 16:19:11.841"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${PASSWORD}</var>
</assign>
<msg timestamp="20180117 16:19:11.842" level="INFO">${PASSWORD} = techm123</msg>
<status status="PASS" endtime="20180117 16:19:11.842" starttime="20180117 16:19:11.842"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<msg timestamp="20180117 16:19:11.843" level="INFO">${Index} = 2</msg>
<status status="PASS" endtime="20180117 16:19:11.843" starttime="20180117 16:19:11.843"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Login</arg>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180117 16:19:11.844" level="INFO">Logging into '10.53.214.10:22' as 'root'.</msg>
<msg timestamp="20180117 16:19:17.952" level="INFO">Read output: Last login: Wed Jan 17 05:45:54 2018 from 10.53.172.9
[root@controller ~]#</msg>
<status status="PASS" endtime="20180117 16:19:17.953" starttime="20180117 16:19:11.844"></status>
</kw>
<msg timestamp="20180117 16:19:17.953" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180117 16:19:17.953" starttime="20180117 16:19:11.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:17.956" starttime="20180117 16:19:17.954"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20180117 16:19:17.957" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20180117 16:19:17.957" starttime="20180117 16:19:17.956"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:17.957" starttime="20180117 16:19:11.843"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:17.958" starttime="20180117 16:19:11.843"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation**********************</arg>
</arguments>
<msg timestamp="20180117 16:19:17.959" level="INFO">*****************ServerLogin_Validation**********************</msg>
<status status="PASS" endtime="20180117 16:19:17.959" starttime="20180117 16:19:17.958"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>ifconfig | grep inet</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ifconfig | grep inet</arg>
</arguments>
<msg timestamp="20180117 16:19:17.968" level="INFO">ifconfig | grep inet</msg>
<status status="PASS" endtime="20180117 16:19:17.970" starttime="20180117 16:19:17.961"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:17.971" starttime="20180117 16:19:17.960"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:19:21.973" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:19:21.974" starttime="20180117 16:19:17.973"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:19:21.975" level="INFO">[01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::4d7:59ff:fe85:5f45  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.80.1.8  netmask 255.255.255.0  broadcast 10.80.1.255
        [01;31m[Kinet[m[K6 fe80::fc8a:54ff:fe8a:974e  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.81.1.8  netmask 255.255.255.0  broadcast 10.81.1.255
        [01;31m[Kinet[m[K6 fe80::283b:ecff:fee2:1e40  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.53.214.10  netmask 255.255.255.0  broadcast 10.53.214.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cc  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 127.0.0.1  netmask 255.0.0.0
        [01;31m[Kinet[m[K6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@controller ~]#</msg>
<msg timestamp="20180117 16:19:21.976" level="INFO">${output} =         [01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m...</msg>
<status status="PASS" endtime="20180117 16:19:21.976" starttime="20180117 16:19:21.974"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:21.978" starttime="20180117 16:19:21.977"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation Completed**********************</arg>
</arguments>
<msg timestamp="20180117 16:19:21.980" level="INFO">*****************ServerLogin_Validation Completed**********************</msg>
<status status="PASS" endtime="20180117 16:19:21.980" starttime="20180117 16:19:21.979"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>source keystonerc_admin</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source keystonerc_admin</arg>
</arguments>
<msg timestamp="20180117 16:19:21.989" level="INFO">source keystonerc_admin</msg>
<status status="PASS" endtime="20180117 16:19:21.989" starttime="20180117 16:19:21.982"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:21.989" starttime="20180117 16:19:21.981"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:19:21.991" level="INFO">[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:19:21.992" level="INFO">${output} = [root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:19:21.992" starttime="20180117 16:19:21.990"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:21.993" starttime="20180117 16:19:11.840"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf value.txt</arg>
</arguments>
<msg timestamp="20180117 16:19:22.001" level="INFO">rm -rf value.txt</msg>
<status status="PASS" endtime="20180117 16:19:22.001" starttime="20180117 16:19:21.993"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}|awk -F "=" '{print $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</arg>
</arguments>
<msg timestamp="20180117 16:19:22.012" level="INFO">[root@controller ~(keystone_admin)]# nova list | grep -i SBC_Oracle|awk -F "=" ' {print $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</msg>
<status status="PASS" endtime="20180117 16:19:22.012" starttime="20180117 16:19:22.002"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:19:26.013" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:19:26.013" starttime="20180117 16:19:22.013"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:19:26.015" level="INFO">10.80.1.48
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:19:26.016" level="INFO">${output} =  10.80.1.48
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:19:26.016" starttime="20180117 16:19:26.014"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:19:26.018" level="INFO">${output} = [u'10.80.1.48', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180117 16:19:26.018" starttime="20180117 16:19:26.016"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${Proxy_IP}</var>
</assign>
<msg timestamp="20180117 16:19:26.020" level="INFO">${Proxy_IP} = 10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:19:26.020" starttime="20180117 16:19:26.019"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Proxy_IP}</arg>
</arguments>
<msg timestamp="20180117 16:19:26.022" level="INFO">${Proxy_IP} = 10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:19:26.023" starttime="20180117 16:19:26.021"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20180117 16:19:26.036" level="INFO">nova list | grep -i SBC_Oracle| awk -F ";"  '{print $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20180117 16:19:26.036" starttime="20180117 16:19:26.023"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:19:31.038" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:19:31.038" starttime="20180117 16:19:26.037"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:19:31.040" level="INFO">172.18.0.174
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:19:31.041" level="INFO">${output} = 172.18.0.174
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:19:31.041" starttime="20180117 16:19:31.039"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:19:31.043" level="INFO">${output} = [u'172.18.0.174', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180117 16:19:31.043" starttime="20180117 16:19:31.042"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${MGmt_IP}</var>
</assign>
<msg timestamp="20180117 16:19:31.045" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:19:31.045" starttime="20180117 16:19:31.044"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180117 16:19:31.048" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:19:31.048" starttime="20180117 16:19:31.046"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:31.049" starttime="20180117 16:19:11.787"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:19:34.050" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:19:34.050" starttime="20180117 16:19:31.049"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180117 16:19:34.059" level="INFO">clear</msg>
<status status="PASS" endtime="20180117 16:19:34.060" starttime="20180117 16:19:34.051"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${i}</var>
</assign>
<msg timestamp="20180117 16:19:34.061" level="INFO">${i} = 0</msg>
<status status="PASS" endtime="20180117 16:19:34.062" starttime="20180117 16:19:34.060"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 250 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ping</arg>
<arg>-c 1</arg>
<arg>${MGmt_IP}</arg>
</arguments>
<assign>
<var>${store}</var>
</assign>
<msg timestamp="20180117 16:19:34.065" level="INFO">${store} = ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:19:34.065" starttime="20180117 16:19:34.063"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${store}</arg>
</arguments>
<msg timestamp="20180117 16:19:34.072" level="INFO">[H[J[root@controller ~(keystone_admin)]# ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:19:34.073" starttime="20180117 16:19:34.066"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:19:39.074" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:19:39.074" starttime="20180117 16:19:34.073"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20180117 16:19:39.076" level="INFO">PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.
64 bytes from 172.18.0.174: icmp_seq=1 ttl=64 time=21.3 ms

--- 172.18.0.174 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 21.392/21.392/21.392/0.000 ms
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:19:39.077" level="INFO">${Output} = PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.
64 bytes from 172.18.0.174: icmp_seq=1 ttl=64 time=21.3 ms

--- 172.18.0.174 ping statistics ---
1 packets transmitted, 1 received, 0% packet...</msg>
<status status="PASS" endtime="20180117 16:19:39.077" starttime="20180117 16:19:39.075"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:39.081" starttime="20180117 16:19:39.079"></status>
</kw>
<msg timestamp="20180117 16:19:39.081" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180117 16:19:39.081" starttime="20180117 16:19:39.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:39.083" starttime="20180117 16:19:39.082"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20180117 16:19:39.083" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20180117 16:19:39.084" starttime="20180117 16:19:39.083"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:39.084" starttime="20180117 16:19:34.063"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:39.084" starttime="20180117 16:19:34.062"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Reboot Completed,Server is UP...............!</arg>
</arguments>
<msg timestamp="20180117 16:19:39.085" level="INFO">Reboot Completed,Server is UP...............!</msg>
<status status="PASS" endtime="20180117 16:19:39.085" starttime="20180117 16:19:39.085"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:39.086" starttime="20180117 16:19:11.786"></status>
</kw>
<kw name="known_hostremoval" library="Genric_Keywords">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm /root/.ssh/known_hosts</arg>
</arguments>
<msg timestamp="20180117 16:19:39.094" level="INFO">rm /root/.ssh/known_hosts</msg>
<status status="PASS" endtime="20180117 16:19:39.095" starttime="20180117 16:19:39.087"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:19:44.096" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:19:44.096" starttime="20180117 16:19:39.095"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg timestamp="20180117 16:19:44.104" level="INFO">rm: remove regular file ‘/root/.ssh/known_hosts’? yes</msg>
<status status="PASS" endtime="20180117 16:19:44.105" starttime="20180117 16:19:44.097"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:44.105" starttime="20180117 16:19:39.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*************VM Create Completed ***********</arg>
</arguments>
<msg timestamp="20180117 16:19:44.106" level="INFO">*************VM Create Completed ***********</msg>
<status status="PASS" endtime="20180117 16:19:44.107" starttime="20180117 16:19:44.106"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******SBC_OnboardVM Done*******</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:44.109" starttime="20180117 16:19:44.107"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:44.110" starttime="20180117 16:17:26.730"></status>
</kw>
<kw name="Onboard_Validation" library="Oracle_SBC_Keywords">
<arguments>
<arg>${Index}</arg>
</arguments>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:44.115" starttime="20180117 16:19:44.114"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:44.117" starttime="20180117 16:19:44.116"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${Index}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:44.118" starttime="20180117 16:19:44.117"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>***************************** Onboard Validation Started**********************</arg>
</arguments>
<msg timestamp="20180117 16:19:44.120" level="INFO">***************************** Onboard Validation Started**********************</msg>
<status status="PASS" endtime="20180117 16:19:44.120" starttime="20180117 16:19:44.119"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova list |grep -i</arg>
<arg>${VNFName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180117 16:19:44.122" level="INFO">${str} = nova list |grep -i SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:19:44.122" starttime="20180117 16:19:44.121"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180117 16:19:44.131" level="INFO">nova list |grep -i SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:19:44.131" starttime="20180117 16:19:44.125"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:44.131" starttime="20180117 16:19:44.123"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:19:49.132" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:19:49.132" starttime="20180117 16:19:44.132"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:19:49.134" level="INFO">| 64ac6d0f-4fd0-4521-bb40-e7de0e778e3e | [01;31m[KSBC_Oracle[m[K               | ACTIVE    | -          | Running     | NS1-PF=10.80.1.47, 10.80.1.48; AN-MGMT=172.18.0.174                                                      |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:19:49.135" level="INFO">${output} = | 64ac6d0f-4fd0-4521-bb40-e7de0e778e3e | [01;31m[KSBC_Oracle[m[K               | ACTIVE    | -          | Running     | NS1-PF=10.80.1.47, 10.80.1.48; AN-MGMT=172.18.0.174                         ...</msg>
<status status="PASS" endtime="20180117 16:19:49.135" starttime="20180117 16:19:49.133"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${VNFName}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:49.137" starttime="20180117 16:19:49.135"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>***************************** Onboard Validation Completed**********************</arg>
</arguments>
<msg timestamp="20180117 16:19:49.138" level="INFO">***************************** Onboard Validation Completed**********************</msg>
<status status="PASS" endtime="20180117 16:19:49.138" starttime="20180117 16:19:49.137"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:49.139" starttime="20180117 16:19:44.113"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******Onboard_Validation Done*******</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:49.143" starttime="20180117 16:19:49.141"></status>
</kw>
<kw name="AvailabilityZone_Validation" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:49.146" starttime="20180117 16:19:49.145"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:49.149" starttime="20180117 16:19:49.147"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova show \ ${VNFName} | egrep -i 'OS-EXT-AZ:availability_zone|OS-EXT-SRV-ATTR:host' | awk -F "|" '{ print $3}'</arg>
</arguments>
<msg timestamp="20180117 16:19:49.160" level="INFO">nova show  SBC_Oracle | egrep -i 'OS-EXT-AZ :availability_zone|OS-EXT-SRV-ATTR:host' | awk -F "|" '{ print $3}'</msg>
<status status="PASS" endtime="20180117 16:19:49.161" starttime="20180117 16:19:49.149"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:19:52.162" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:19:52.162" starttime="20180117 16:19:49.161"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${AvZone}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20180117 16:19:52.165" level="INFO">@{list} = [ nova | compute2 ]</msg>
<status status="PASS" endtime="20180117 16:19:52.165" starttime="20180117 16:19:52.163"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Zone}</var>
</assign>
<msg timestamp="20180117 16:19:52.167" level="INFO">${Zone} = compute2</msg>
<status status="PASS" endtime="20180117 16:19:52.167" starttime="20180117 16:19:52.166"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:19:52.169" level="INFO">zone-vims-2                                                        
 compute2                                                           
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:19:52.169" level="INFO">${output} =  zone-vims-2                                                        
 compute2                                                           
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:19:52.169" starttime="20180117 16:19:52.168"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${Zone}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:52.171" starttime="20180117 16:19:52.170"></status>
</kw>
<status status="PASS" endtime="20180117 16:19:52.172" starttime="20180117 16:19:49.144"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******AvailabilityZone_Validation Done*******</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:52.175" starttime="20180117 16:19:52.173"></status>
</kw>
<kw name="Networks_Validation" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:52.178" starttime="20180117 16:19:52.178"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:19:52.180" starttime="20180117 16:19:52.179"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20180117 16:19:52.191" level="INFO">nova list | grep -i SBC_Oracle| awk -F ";"  '{print $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20180117 16:19:52.192" starttime="20180117 16:19:52.181"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:19:57.193" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:19:57.193" starttime="20180117 16:19:52.192"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:19:57.195" level="INFO">172.18.0.174
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:19:57.196" level="INFO">${output} = 172.18.0.174
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:19:57.196" starttime="20180117 16:19:57.194"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:19:57.198" level="INFO">${output} = [u'172.18.0.174', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180117 16:19:57.198" starttime="20180117 16:19:57.197"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${MGmt_IP}</var>
</assign>
<msg timestamp="20180117 16:19:57.201" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:19:57.201" starttime="20180117 16:19:57.199"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova show ${VNFName}| grep network</arg>
</arguments>
<msg timestamp="20180117 16:19:57.208" level="INFO">nova show SBC_Oracle| grep network</msg>
<status status="PASS" endtime="20180117 16:19:57.209" starttime="20180117 16:19:57.201"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>14</arg>
</arguments>
<msg timestamp="20180117 16:20:11.210" level="INFO">Slept 14 seconds</msg>
<status status="PASS" endtime="20180117 16:20:11.210" starttime="20180117 16:19:57.209"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:11.212" level="INFO">| AN-MGMT [01;31m[Knetwork[m[K                      | 172.18.0.174                                                       |
| NS1-PF [01;31m[Knetwork[m[K                       | 10.80.1.47, 10.80.1.48                                             |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:20:11.213" level="INFO">${output} = | AN-MGMT [01;31m[Knetwork[m[K                      | 172.18.0.174                                                       |
| NS1-PF [01;31m[Knetwork[m[K                       | 10.80.1.47, 10...</msg>
<status status="PASS" endtime="20180117 16:20:11.213" starttime="20180117 16:20:11.211"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>AN-MGMT</arg>
<arg>${MGmt_IP}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:20:11.215" starttime="20180117 16:20:11.214"></status>
</kw>
<status status="PASS" endtime="20180117 16:20:11.216" starttime="20180117 16:19:52.176"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******Networks_Validation Done*******</arg>
</arguments>
<status status="PASS" endtime="20180117 16:20:11.220" starttime="20180117 16:20:11.218"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******SBC Configuration In Progress*******</arg>
</arguments>
<status status="PASS" endtime="20180117 16:20:11.223" starttime="20180117 16:20:11.221"></status>
</kw>
<kw name="SBC Configuration" library="Oracle_SBC_Keywords">
<kw name="SBC_PortUpdation" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************Port UpdationStart************</arg>
</arguments>
<msg timestamp="20180117 16:20:11.227" level="INFO">****************Port UpdationStart************</msg>
<status status="PASS" endtime="20180117 16:20:11.227" starttime="20180117 16:20:11.226"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:20:11.229" starttime="20180117 16:20:11.228"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:20:11.230" starttime="20180117 16:20:11.229"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf value.txt</arg>
</arguments>
<msg timestamp="20180117 16:20:11.238" level="INFO">rm -rf value.txt</msg>
<status status="PASS" endtime="20180117 16:20:11.238" starttime="20180117 16:20:11.230"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}|awk -F "=" '{print $2}'|awk -F "," '{print $1}'</arg>
</arguments>
<msg timestamp="20180117 16:20:11.248" level="INFO">[root@controller ~(keystone_admin)]# nova list | grep -i SBC_Oracle|awk -F "=" ' {print $2}'|awk -F "," '{print $1}'</msg>
<status status="PASS" endtime="20180117 16:20:11.249" starttime="20180117 16:20:11.239"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:20:15.250" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:20:15.250" starttime="20180117 16:20:11.249"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:15.252" level="INFO">10.80.1.47
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:20:15.253" level="INFO">${output} = 10.80.1.47
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:20:15.253" starttime="20180117 16:20:15.251"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:15.255" level="INFO">${output} = [u'10.80.1.47', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180117 16:20:15.255" starttime="20180117 16:20:15.253"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${IP1}</var>
</assign>
<msg timestamp="20180117 16:20:15.257" level="INFO">${IP1} = 10.80.1.47</msg>
<status status="PASS" endtime="20180117 16:20:15.257" starttime="20180117 16:20:15.256"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${IP1}</arg>
</arguments>
<msg timestamp="20180117 16:20:15.260" level="INFO">${IP1} = 10.80.1.47</msg>
<status status="PASS" endtime="20180117 16:20:15.260" starttime="20180117 16:20:15.258"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180117 16:20:15.268" level="INFO">clear</msg>
<status status="PASS" endtime="20180117 16:20:15.268" starttime="20180117 16:20:15.261"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}|awk -F "=" '{print $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</arg>
</arguments>
<msg timestamp="20180117 16:20:15.278" level="INFO">[H[J[root@controller ~(keystone_admin)]# nova list | grep -i SBC_Oracle|awk -F "=" ' {print $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</msg>
<status status="PASS" endtime="20180117 16:20:15.278" starttime="20180117 16:20:15.269"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:20:19.280" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:20:19.280" starttime="20180117 16:20:15.279"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:19.282" level="INFO">10.80.1.48
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:20:19.283" level="INFO">${output} =  10.80.1.48
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:20:19.283" starttime="20180117 16:20:19.281"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:19.285" level="INFO">${output} = [u'10.80.1.48', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180117 16:20:19.285" starttime="20180117 16:20:19.283"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${IP2}</var>
</assign>
<msg timestamp="20180117 16:20:19.287" level="INFO">${IP2} = 10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:20:19.287" starttime="20180117 16:20:19.286"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${IP2}</arg>
</arguments>
<msg timestamp="20180117 16:20:19.289" level="INFO">${IP2} = 10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:20:19.290" starttime="20180117 16:20:19.288"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180117 16:20:19.297" level="INFO">clear</msg>
<status status="PASS" endtime="20180117 16:20:19.298" starttime="20180117 16:20:19.290"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20180117 16:20:19.309" level="INFO">[H[J[root@controller ~(keystone_admin)]# nova list | grep -i SBC_Oracle| awk -F ";"  '{print $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20180117 16:20:19.310" starttime="20180117 16:20:19.299"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:20:24.311" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:20:24.311" starttime="20180117 16:20:19.310"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:24.313" level="INFO">172.18.0.174
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:20:24.314" level="INFO">${output} = 172.18.0.174
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:20:24.314" starttime="20180117 16:20:24.312"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:24.316" level="INFO">${output} = [u'172.18.0.174', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180117 16:20:24.316" starttime="20180117 16:20:24.314"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${MGmt_IP}</var>
</assign>
<msg timestamp="20180117 16:20:24.318" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:20:24.318" starttime="20180117 16:20:24.317"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180117 16:20:24.320" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:20:24.321" starttime="20180117 16:20:24.319"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180117 16:20:24.329" level="INFO">clear</msg>
<status status="PASS" endtime="20180117 16:20:24.329" starttime="20180117 16:20:24.321"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>neutron port-list | grep -i ${IP1} |awk -F "|" '{print $2}'</arg>
</arguments>
<msg timestamp="20180117 16:20:24.337" level="INFO">[H[J[root@controller ~(keystone_admin)]# neutron port-list | grep -i 10.80.1.47 |awk  -F "|" '{print $2}'</msg>
<status status="PASS" endtime="20180117 16:20:24.338" starttime="20180117 16:20:24.330"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:20:27.339" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:20:27.339" starttime="20180117 16:20:24.338"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:27.341" level="INFO">3510a878-8817-490f-a4e2-7508e452175a 
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:20:27.341" level="INFO">${output} =  3510a878-8817-490f-a4e2-7508e452175a 
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:20:27.342" starttime="20180117 16:20:27.340"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>@{output}</var>
</assign>
<msg timestamp="20180117 16:20:27.344" level="INFO">@{output} = [ 3510a878-8817-490f-a4e2-7508e452175a | [root@controller | ~(keystone_admin)]# ]</msg>
<status status="PASS" endtime="20180117 16:20:27.344" starttime="20180117 16:20:27.342"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${port-1}</var>
</assign>
<msg timestamp="20180117 16:20:27.346" level="INFO">${port-1} = 3510a878-8817-490f-a4e2-7508e452175a</msg>
<status status="PASS" endtime="20180117 16:20:27.346" starttime="20180117 16:20:27.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>neutron port-update</arg>
<arg>${port-1}</arg>
<arg>--allowed-address-pairs type=dict list=true</arg>
<arg>ip_address=${IP1}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180117 16:20:27.349" level="INFO">${str} = neutron port-update 3510a878-8817-490f-a4e2-7508e452175a --allowed-address-pairs type=dict list=true ip_address=10.80.1.47</msg>
<status status="PASS" endtime="20180117 16:20:27.349" starttime="20180117 16:20:27.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180117 16:20:27.360" level="INFO">neutron port-update 3510a878-8817-490f-a4e2 -7508e452175a --allowed-address-pairs type=dict list=true ip_address=10.80.1.47</msg>
<status status="PASS" endtime="20180117 16:20:27.361" starttime="20180117 16:20:27.350"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:20:30.362" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:20:30.362" starttime="20180117 16:20:27.361"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:30.364" level="INFO">Updated port: 3510a878-8817-490f-a4e2-7508e452175a
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:20:30.365" level="INFO">${output} = Updated port: 3510a878-8817-490f-a4e2-7508e452175a
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:20:30.365" starttime="20180117 16:20:30.363"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180117 16:20:30.373" level="INFO">clear</msg>
<status status="PASS" endtime="20180117 16:20:30.374" starttime="20180117 16:20:30.366"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>neutron port-list | grep -i ${IP2} |awk -F "|" '{print $2}'</arg>
</arguments>
<msg timestamp="20180117 16:20:30.381" level="INFO">[H[J[root@controller ~(keystone_admin)]# neutron port-list | grep -i 10.80.1.48 |awk  -F "|" '{print $2}'</msg>
<status status="PASS" endtime="20180117 16:20:30.381" starttime="20180117 16:20:30.374"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:20:33.382" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:20:33.382" starttime="20180117 16:20:30.382"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:33.384" level="INFO">31eaa468-ddd7-411e-849e-8457b8be3fcb 
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:20:33.384" level="INFO">${output} =  31eaa468-ddd7-411e-849e-8457b8be3fcb 
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:20:33.385" starttime="20180117 16:20:33.383"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>@{output}</var>
</assign>
<msg timestamp="20180117 16:20:33.387" level="INFO">@{output} = [ 31eaa468-ddd7-411e-849e-8457b8be3fcb | [root@controller | ~(keystone_admin)]# ]</msg>
<status status="PASS" endtime="20180117 16:20:33.387" starttime="20180117 16:20:33.385"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${port-2}</var>
</assign>
<msg timestamp="20180117 16:20:33.389" level="INFO">${port-2} = 31eaa468-ddd7-411e-849e-8457b8be3fcb</msg>
<status status="PASS" endtime="20180117 16:20:33.389" starttime="20180117 16:20:33.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>neutron port-update</arg>
<arg>${port-2}</arg>
<arg>--allowed-address-pairs type=dict list=true</arg>
<arg>ip_address=${IP2}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180117 16:20:33.392" level="INFO">${str} = neutron port-update 31eaa468-ddd7-411e-849e-8457b8be3fcb --allowed-address-pairs type=dict list=true ip_address=10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:20:33.392" starttime="20180117 16:20:33.390"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180117 16:20:33.404" level="INFO">neutron port-update 31eaa468-ddd7-411e-849e -8457b8be3fcb --allowed-address-pairs type=dict list=true ip_address=10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:20:33.405" starttime="20180117 16:20:33.393"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:20:35.407" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:20:35.407" starttime="20180117 16:20:33.406"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:35.409" level="INFO">Updated port: 31eaa468-ddd7-411e-849e-8457b8be3fcb
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:20:35.409" level="INFO">${output} = Updated port: 31eaa468-ddd7-411e-849e-8457b8be3fcb
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:20:35.410" starttime="20180117 16:20:35.408"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180117 16:20:35.417" level="INFO">clear</msg>
<status status="PASS" endtime="20180117 16:20:35.418" starttime="20180117 16:20:35.410"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>neutron port-list | grep -i ${MGmt_IP}|awk -F "|" '{print $2}'</arg>
</arguments>
<msg timestamp="20180117 16:20:35.427" level="INFO">[H[J[root@controller ~(keystone_admin)]# neutron port-list | grep -i 172.18.0.174|aw k -F "|" '{print $2}'</msg>
<status status="PASS" endtime="20180117 16:20:35.428" starttime="20180117 16:20:35.419"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:20:38.429" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:20:38.429" starttime="20180117 16:20:35.428"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output3}</var>
</assign>
<msg timestamp="20180117 16:20:38.431" level="INFO">0a08a5f2-7e39-4b99-a773-483ee54d763a 
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:20:38.431" level="INFO">${output3} =  0a08a5f2-7e39-4b99-a773-483ee54d763a 
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:20:38.432" starttime="20180117 16:20:38.430"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output3}</arg>
</arguments>
<assign>
<var>@{output3}</var>
</assign>
<msg timestamp="20180117 16:20:38.434" level="INFO">@{output3} = [ 0a08a5f2-7e39-4b99-a773-483ee54d763a | [root@controller | ~(keystone_admin)]# ]</msg>
<status status="PASS" endtime="20180117 16:20:38.434" starttime="20180117 16:20:38.432"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output3}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${port-3}</var>
</assign>
<msg timestamp="20180117 16:20:38.436" level="INFO">${port-3} = 0a08a5f2-7e39-4b99-a773-483ee54d763a</msg>
<status status="PASS" endtime="20180117 16:20:38.436" starttime="20180117 16:20:38.435"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>neutron port-update</arg>
<arg>${port-3}</arg>
<arg>--allowed-address-pairs type=dict list=true</arg>
<arg>ip_address=${MGmt_IP}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20180117 16:20:38.439" level="INFO">${str} = neutron port-update 0a08a5f2-7e39-4b99-a773-483ee54d763a --allowed-address-pairs type=dict list=true ip_address=172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:20:38.439" starttime="20180117 16:20:38.437"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20180117 16:20:38.451" level="INFO">neutron port-update 0a08a5f2-7e39-4b99-a773 -483ee54d763a --allowed-address-pairs type=dict list=true ip_address=172.18.0.17 4</msg>
<status status="PASS" endtime="20180117 16:20:38.451" starttime="20180117 16:20:38.440"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:20:41.452" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:20:41.452" starttime="20180117 16:20:38.452"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:20:41.454" level="INFO">Updated port: 0a08a5f2-7e39-4b99-a773-483ee54d763a
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:20:41.455" level="INFO">${output} = Updated port: 0a08a5f2-7e39-4b99-a773-483ee54d763a
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:20:41.455" starttime="20180117 16:20:41.453"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************Port Updation Complete************</arg>
</arguments>
<msg timestamp="20180117 16:20:41.456" level="INFO">****************Port Updation Complete************</msg>
<status status="PASS" endtime="20180117 16:20:41.456" starttime="20180117 16:20:41.455"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20180117 16:20:41.458" starttime="20180117 16:20:41.457"></status>
</kw>
<status status="PASS" endtime="20180117 16:20:41.458" starttime="20180117 16:20:11.225"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>120</arg>
</arguments>
<msg timestamp="20180117 16:22:41.459" level="INFO">Slept 2 minutes</msg>
<status status="PASS" endtime="20180117 16:22:41.460" starttime="20180117 16:20:41.459"></status>
</kw>
<kw name="PasswordUpdation" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************Password Updation Start************</arg>
</arguments>
<msg timestamp="20180117 16:22:41.463" level="INFO">****************Password Updation Start************</msg>
<status status="PASS" endtime="20180117 16:22:41.463" starttime="20180117 16:22:41.462"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180117 16:22:51.465" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180117 16:22:51.465" starttime="20180117 16:22:41.464"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180117 16:22:51.474" level="INFO">ssh -o "StrictHostKeyChecking no" user@172. 18.0.174</msg>
<status status="PASS" endtime="20180117 16:22:51.475" starttime="20180117 16:22:51.466"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:22:54.476" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:22:54.477" starttime="20180117 16:22:51.475"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_Pwd}</arg>
</arguments>
<msg timestamp="20180117 16:22:54.485" level="INFO">Warning: Permanently added '172.18.0.174' (RSA) to the list of known hosts.</msg>
<status status="PASS" endtime="20180117 16:22:54.485" starttime="20180117 16:22:54.477"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:22:58.486" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:22:58.486" starttime="20180117 16:22:54.486"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20180117 16:22:58.490" level="INFO">user@172.18.0.174's password:</msg>
<status status="PASS" endtime="20180117 16:22:58.490" starttime="20180117 16:22:58.487"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:23:01.492" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:23:01.492" starttime="20180117 16:22:58.491"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:23:01.495" starttime="20180117 16:23:01.493"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:23:05.497" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:23:05.497" starttime="20180117 16:23:01.496"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:23:05.499" level="INFO">*ALERT*
*****************************************************************
user password has not been set. Please set password now.
*****************************************************************
** Only alphabetic (upper or lower case), numeric and punctuation
** characters are allowed in the password.
** Password must be 8 - 64 characters,
** and have 3 of the 4 following character classes :
** - lower case alpha
** - upper case alpha
** - numerals
** - punctuation
*****************************************************************
Enter New Password: 
Confirm New Password: 

Notifications:
- No Valid License Present! (aid: 327702, tid: 3)
&gt;</msg>
<msg timestamp="20180117 16:23:05.500" level="INFO">${output} = *ALERT*
*****************************************************************
user password has not been set. Please set password now.
*****************************************************************...</msg>
<status status="PASS" endtime="20180117 16:23:05.500" starttime="20180117 16:23:05.498"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:23:08.501" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:23:08.502" starttime="20180117 16:23:05.500"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>en</arg>
</arguments>
<msg timestamp="20180117 16:23:08.510" level="INFO">en</msg>
<status status="PASS" endtime="20180117 16:23:08.510" starttime="20180117 16:23:08.502"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:23:11.512" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:23:11.512" starttime="20180117 16:23:08.511"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_EN_Password}</arg>
</arguments>
<msg timestamp="20180117 16:23:11.528" level="INFO">Password:</msg>
<status status="PASS" endtime="20180117 16:23:11.529" starttime="20180117 16:23:11.513"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:23:16.531" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:23:16.531" starttime="20180117 16:23:11.530"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20180117 16:23:16.534" level="INFO">*ALERT*</msg>
<status status="PASS" endtime="20180117 16:23:16.535" starttime="20180117 16:23:16.532"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:23:21.536" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:23:21.536" starttime="20180117 16:23:16.535"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20180117 16:23:21.541" level="INFO">*****************************************************************</msg>
<status status="PASS" endtime="20180117 16:23:21.542" starttime="20180117 16:23:21.537"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>6</arg>
</arguments>
<msg timestamp="20180117 16:23:27.544" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20180117 16:23:27.544" starttime="20180117 16:23:21.542"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:23:27.546" level="INFO">admin password has not been set. Please set password now.
*****************************************************************
** Only alphabetic (upper or lower case), numeric and punctuation
** characters are allowed in the password.
** Password must be 8 - 64 characters,
** and have 3 of the 4 following character classes :
** - lower case alpha
** - upper case alpha
** - numerals
** - punctuation
*****************************************************************
Enter New Password: 
Confirm New Password: 

Notifications:
- No Valid License Present! (aid: 327702, tid: 3)
#</msg>
<msg timestamp="20180117 16:23:27.547" level="INFO">${output} = admin password has not been set. Please set password now.
*****************************************************************
** Only alphabetic (upper or lower case), numeric and punctuation
** char...</msg>
<status status="PASS" endtime="20180117 16:23:27.547" starttime="20180117 16:23:27.545"></status>
</kw>
<kw name="License" library="Oracle_SBC_Keywords">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>setup product</arg>
</arguments>
<msg timestamp="20180117 16:23:27.600" level="INFO">setup product</msg>
<status status="PASS" endtime="20180117 16:23:27.600" starttime="20180117 16:23:27.549"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:23:29.601" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:23:29.601" starttime="20180117 16:23:27.601"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20180117 16:23:29.604" starttime="20180117 16:23:29.602"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:23:31.605" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:23:31.605" starttime="20180117 16:23:29.604"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20180117 16:23:31.610" level="INFO">--------------------------------------------------------------</msg>
<status status="PASS" endtime="20180117 16:23:31.610" starttime="20180117 16:23:31.606"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:23:33.612" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:23:33.612" starttime="20180117 16:23:31.611"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>s</arg>
</arguments>
<msg timestamp="20180117 16:23:33.615" level="INFO">WARNING:</msg>
<status status="PASS" endtime="20180117 16:23:33.615" starttime="20180117 16:23:33.613"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:23:35.619" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:23:35.619" starttime="20180117 16:23:33.616"></status>
</kw>
<status status="PASS" endtime="20180117 16:23:35.620" starttime="20180117 16:23:27.547"></status>
</kw>
<kw name="License" library="Oracle_SBC_Keywords">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>setup product</arg>
</arguments>
<msg timestamp="20180117 16:23:35.625" level="INFO">Alteration of product alone or in conjunction with entitlement</msg>
<status status="PASS" endtime="20180117 16:23:35.626" starttime="20180117 16:23:35.622"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:23:37.627" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:23:37.627" starttime="20180117 16:23:35.626"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20180117 16:23:37.631" level="INFO">changes will not be complete until system reboot</msg>
<status status="PASS" endtime="20180117 16:23:37.631" starttime="20180117 16:23:37.628"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:23:39.633" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:23:39.633" starttime="20180117 16:23:37.632"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20180117 16:23:39.636" starttime="20180117 16:23:39.634"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:23:41.637" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:23:41.637" starttime="20180117 16:23:39.637"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>s</arg>
</arguments>
<msg timestamp="20180117 16:23:41.640" level="INFO">Last Modified</msg>
<status status="PASS" endtime="20180117 16:23:41.640" starttime="20180117 16:23:41.638"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:23:43.642" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:23:43.642" starttime="20180117 16:23:41.641"></status>
</kw>
<status status="PASS" endtime="20180117 16:23:43.643" starttime="20180117 16:23:35.620"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:23:43.647" level="INFO">--------------------------------------------------------------</msg>
<status status="PASS" endtime="20180117 16:23:43.648" starttime="20180117 16:23:43.644"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:23:43.650" level="INFO">1 : Product       : Uninitialized</msg>
<status status="PASS" endtime="20180117 16:23:43.651" starttime="20180117 16:23:43.648"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20180117 16:23:43.652" level="INFO">Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: 1

  Product
    1 - Session Border Controller
    2 - Session Router - Session Stateful
    3 - Session Router - Transaction Stateful
    4 - Peering Session Border Controller
  Enter choice     : 1

Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
save SUCCESS

Notifications:
- No Valid License Present! (aid: 327702, tid: 3)
# setup product

--------------------------------------------------------------
WARNING:
Alteration of product alone or in conjunction with entitlement
changes will not be complete until system reboot

Last Modified 2018-01-17 16:20:36
--------------------------------------------------------------
 1 : Product       : Session Border Controller

Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: 1

  Product
    1 - Session Border Controller
    2 - Session Router - Session Stateful
    3 - Session Router - Transaction Stateful
    4 - Peering Session Border Controller
  Enter choice     : 1

Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
save SUCCESS
#</msg>
<status status="PASS" endtime="20180117 16:23:43.652" starttime="20180117 16:23:43.651"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************portUpdation completed**************</arg>
</arguments>
<msg timestamp="20180117 16:23:43.654" level="INFO">**************portUpdation completed**************</msg>
<status status="PASS" endtime="20180117 16:23:43.654" starttime="20180117 16:23:43.653"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180117 16:23:53.656" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180117 16:23:53.656" starttime="20180117 16:23:43.655"></status>
</kw>
<status status="PASS" endtime="20180117 16:23:53.657" starttime="20180117 16:22:41.461"></status>
</kw>
<kw name="Setup Entitlements" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************SetupEntitlements Start************</arg>
</arguments>
<msg timestamp="20180117 16:23:53.660" level="INFO">****************SetupEntitlements Start************</msg>
<status status="PASS" endtime="20180117 16:23:53.660" starttime="20180117 16:23:53.659"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180117 16:23:53.662" level="INFO">exit</msg>
<status status="PASS" endtime="20180117 16:23:53.662" starttime="20180117 16:23:53.660"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:23:57.665" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:23:57.665" starttime="20180117 16:23:53.663"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:23:57.667" level="INFO">&gt; exit
Closing Session
Received disconnect from 172.18.0.174: 11: Logged out.
[root@controller ~(keystone_admin)]# ssh -o "StrictHostKeyChecking no" user@172. 18.0.174
user@172.18.0.174's password:</msg>
<msg timestamp="20180117 16:23:57.667" level="INFO">${output} = &gt; exit
Closing Session
Received disconnect from 172.18.0.174: 11: Logged out.
[root@controller ~(keystone_admin)]# ssh -o "StrictHostKeyChecking no" user@172. 18.0.174
user@172.18.0.174's passwor...</msg>
<status status="PASS" endtime="20180117 16:23:57.668" starttime="20180117 16:23:57.666"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:23:57.675" starttime="20180117 16:23:57.668"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:24:00.677" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:24:00.677" starttime="20180117 16:23:57.676"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>en</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:00.680" starttime="20180117 16:24:00.678"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180117 16:24:10.681" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180117 16:24:10.681" starttime="20180117 16:24:00.680"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20180117 16:24:10.684" level="INFO">&gt; en</msg>
<status status="PASS" endtime="20180117 16:24:10.684" starttime="20180117 16:24:10.682"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:10.686" level="INFO">Password:</msg>
<msg timestamp="20180117 16:24:10.686" level="INFO">${output} = Password: </msg>
<status status="PASS" endtime="20180117 16:24:10.687" starttime="20180117 16:24:10.685"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:24:12.688" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:24:12.688" starttime="20180117 16:24:10.687"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>setup entitlements</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:12.693" starttime="20180117 16:24:12.689"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20180117 16:24:12.708" level="INFO"># setup entitlements</msg>
<status status="PASS" endtime="20180117 16:24:12.708" starttime="20180117 16:24:12.694"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8000</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:12.710" starttime="20180117 16:24:12.709"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:24:12.713" level="INFO">-----------------------------------------------------</msg>
<status status="PASS" endtime="20180117 16:24:12.713" starttime="20180117 16:24:12.710"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180117 16:24:12.715" level="INFO">Entitlements for Session Border Controller</msg>
<status status="PASS" endtime="20180117 16:24:12.715" starttime="20180117 16:24:12.713"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:24:12.716" level="INFO">Last Modified: Never</msg>
<status status="PASS" endtime="20180117 16:24:12.717" starttime="20180117 16:24:12.715"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180117 16:24:12.747" level="INFO">-----------------------------------------------------</msg>
<status status="PASS" endtime="20180117 16:24:12.747" starttime="20180117 16:24:12.717"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:24:12.748" level="INFO">1 : Session Capacity                     : 0</msg>
<status status="PASS" endtime="20180117 16:24:12.748" starttime="20180117 16:24:12.747"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180117 16:24:12.749" level="INFO">2 :   Accounting                         :</msg>
<status status="PASS" endtime="20180117 16:24:12.749" starttime="20180117 16:24:12.748"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:24:12.750" level="INFO">3 :   IPv4 - IPv6 Interworking           :</msg>
<status status="PASS" endtime="20180117 16:24:12.750" starttime="20180117 16:24:12.749"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180117 16:24:12.751" level="INFO">4 :   IWF (SIP-H323)                     :</msg>
<status status="PASS" endtime="20180117 16:24:12.751" starttime="20180117 16:24:12.750"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>6</arg>
</arguments>
<msg timestamp="20180117 16:24:12.751" level="INFO">5 :   Load Balancing                     :</msg>
<status status="PASS" endtime="20180117 16:24:12.752" starttime="20180117 16:24:12.751"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180117 16:24:12.752" level="INFO">6 :   Policy Server                      :</msg>
<status status="PASS" endtime="20180117 16:24:12.752" starttime="20180117 16:24:12.752"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>7</arg>
</arguments>
<msg timestamp="20180117 16:24:12.753" level="INFO">7 :   Quality of Service                 :</msg>
<status status="PASS" endtime="20180117 16:24:12.753" starttime="20180117 16:24:12.753"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180117 16:24:12.754" level="INFO">8 :   Routing                            :</msg>
<status status="PASS" endtime="20180117 16:24:12.754" starttime="20180117 16:24:12.753"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8</arg>
</arguments>
<msg timestamp="20180117 16:24:12.755" level="INFO">9 :   SIPREC Session Recording           :</msg>
<status status="PASS" endtime="20180117 16:24:12.755" starttime="20180117 16:24:12.754"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180117 16:24:12.756" level="INFO">10: IMS-AKA Endpoints                    : 0</msg>
<status status="PASS" endtime="20180117 16:24:12.756" starttime="20180117 16:24:12.755"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>9</arg>
</arguments>
<msg timestamp="20180117 16:24:12.757" level="INFO">11: IPSec Trunking Sessions              : 0</msg>
<status status="PASS" endtime="20180117 16:24:12.757" starttime="20180117 16:24:12.756"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20180117 16:24:12.758" level="INFO">12: MSRP B2BUA Sessions                  : 0</msg>
<status status="PASS" endtime="20180117 16:24:12.758" starttime="20180117 16:24:12.757"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180117 16:24:12.758" level="INFO">13: SRTP Sessions                        : 0</msg>
<status status="PASS" endtime="20180117 16:24:12.759" starttime="20180117 16:24:12.758"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8000</arg>
</arguments>
<msg timestamp="20180117 16:24:12.759" level="INFO">14: TSCF Tunnels                         : 0</msg>
<status status="PASS" endtime="20180117 16:24:12.759" starttime="20180117 16:24:12.759"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>11</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:12.760" starttime="20180117 16:24:12.760"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20180117 16:24:12.761" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 1</msg>
<status status="PASS" endtime="20180117 16:24:12.761" starttime="20180117 16:24:12.760"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:12.762" starttime="20180117 16:24:12.761"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20180117 16:24:12.762" level="INFO">Session Capacity (0-256000)             : 8000</msg>
<status status="PASS" endtime="20180117 16:24:12.762" starttime="20180117 16:24:12.762"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:12.763" starttime="20180117 16:24:12.763"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20180117 16:24:12.764" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 2</msg>
<status status="PASS" endtime="20180117 16:24:12.764" starttime="20180117 16:24:12.763"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:12.764" starttime="20180117 16:24:12.764"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20180117 16:24:12.765" level="INFO">Accounting (enabled/disabled)         : enabled</msg>
<status status="PASS" endtime="20180117 16:24:12.765" starttime="20180117 16:24:12.765"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:24:15.766" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:24:15.766" starttime="20180117 16:24:12.766"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>s</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:15.769" starttime="20180117 16:24:15.767"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>con ter</arg>
</arguments>
<msg timestamp="20180117 16:24:15.772" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 3</msg>
<status status="PASS" endtime="20180117 16:24:15.773" starttime="20180117 16:24:15.769"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>bootparam</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:15.774" starttime="20180117 16:24:15.773"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:24:17.775" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:24:17.775" starttime="20180117 16:24:15.775"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/boot/bzImage</arg>
</arguments>
<msg timestamp="20180117 16:24:17.780" level="INFO">IPv4 - IPv6 Interworking (enabled/disabled): enabled</msg>
<status status="PASS" endtime="20180117 16:24:17.780" starttime="20180117 16:24:17.776"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.783" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 4

    IWF (SIP-H323) (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 5

    Load Balancing (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 6

    Policy Server (enabled/disabled)      : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 7

    Quality of Service (enabled/disabled) : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 8

    Routing (enabled/disabled)            : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 9

    SIPREC Session Recording (enabled/disabled): enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 10

  IMS-AKA Endpoints (0-100000)            : 8000

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 11

  IPSec Trunking Sessions (0-1024)        : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 12

  MSRP B2BUA Sessions (0-256000)          : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 13

  SRTP Sessions (0-256000)                : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 14

  TSCF Tunnels                            : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
SAVE SUCCEEDED
# con ter
(configure)# bootparam

'.' = clear field;  '-' = go to previous field;  q = quit

Boot File       	: /boot/bzImage</msg>
<msg timestamp="20180117 16:24:17.784" level="INFO">${output} = 
Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 4

    IWF (SIP-H323) (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]...</msg>
<status status="PASS" endtime="20180117 16:24:17.784" starttime="20180117 16:24:17.781"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.786" level="INFO">
Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 4

    IWF (SIP-H323) (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 5

    Load Balancing (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 6

    Policy Server (enabled/disabled)      : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 7

    Quality of Service (enabled/disabled) : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 8

    Routing (enabled/disabled)            : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 9

    SIPREC Session Recording (enabled/disabled): enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 10

  IMS-AKA Endpoints (0-100000)            : 8000

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 11

  IPSec Trunking Sessions (0-1024)        : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 12

  MSRP B2BUA Sessions (0-256000)          : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 13

  SRTP Sessions (0-256000)                : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 14

  TSCF Tunnels                            : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
SAVE SUCCEEDED
# con ter
(configure)# bootparam

'.' = clear field;  '-' = go to previous field;  q = quit

Boot File       	: /boot/bzImage </msg>
<status status="PASS" endtime="20180117 16:24:17.787" starttime="20180117 16:24:17.785"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.790" level="INFO">/boot/bzImage</msg>
<status status="PASS" endtime="20180117 16:24:17.790" starttime="20180117 16:24:17.787"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.791" level="INFO">IP Address      	:</msg>
<msg timestamp="20180117 16:24:17.792" level="INFO">${output} = IP Address      	: </msg>
<status status="PASS" endtime="20180117 16:24:17.792" starttime="20180117 16:24:17.791"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.794" level="INFO">IP Address      	: </msg>
<status status="PASS" endtime="20180117 16:24:17.794" starttime="20180117 16:24:17.793"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:17.796" starttime="20180117 16:24:17.795"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.798" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180117 16:24:17.798" starttime="20180117 16:24:17.797"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.800" level="INFO"></msg>
<status status="PASS" endtime="20180117 16:24:17.800" starttime="20180117 16:24:17.798"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>255.255.255.0</arg>
</arguments>
<msg timestamp="20180117 16:24:17.833" level="INFO">172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:24:17.833" starttime="20180117 16:24:17.800"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.834" level="INFO">VLAN            	:</msg>
<msg timestamp="20180117 16:24:17.835" level="INFO">${output} = VLAN            	: </msg>
<status status="PASS" endtime="20180117 16:24:17.835" starttime="20180117 16:24:17.834"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.836" level="INFO">VLAN            	: </msg>
<status status="PASS" endtime="20180117 16:24:17.836" starttime="20180117 16:24:17.835"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>172.18.0.1</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:17.842" starttime="20180117 16:24:17.836"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.843" level="INFO">Netmask         	: 255.255.255.0
Gateway         	:</msg>
<msg timestamp="20180117 16:24:17.843" level="INFO">${output} = Netmask         	: 255.255.255.0
Gateway         	: </msg>
<status status="PASS" endtime="20180117 16:24:17.843" starttime="20180117 16:24:17.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.844" level="INFO">Netmask         	: 255.255.255.0
Gateway         	: </msg>
<status status="PASS" endtime="20180117 16:24:17.844" starttime="20180117 16:24:17.843"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:17.845" starttime="20180117 16:24:17.845"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.847" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180117 16:24:17.848" starttime="20180117 16:24:17.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.849" level="INFO"></msg>
<status status="PASS" endtime="20180117 16:24:17.850" starttime="20180117 16:24:17.849"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:17.851" starttime="20180117 16:24:17.850"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.853" level="INFO">172.18.0.1
IPv6 Address    	:</msg>
<msg timestamp="20180117 16:24:17.853" level="INFO">${output} = 172.18.0.1
IPv6 Address    	: 
</msg>
<status status="PASS" endtime="20180117 16:24:17.853" starttime="20180117 16:24:17.851"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.854" level="INFO">172.18.0.1
IPv6 Address    	: 
</msg>
<status status="PASS" endtime="20180117 16:24:17.855" starttime="20180117 16:24:17.854"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:17.856" starttime="20180117 16:24:17.855"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.857" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180117 16:24:17.857" starttime="20180117 16:24:17.856"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.858" level="INFO"></msg>
<status status="PASS" endtime="20180117 16:24:17.858" starttime="20180117 16:24:17.857"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:17.859" starttime="20180117 16:24:17.858"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.860" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180117 16:24:17.860" starttime="20180117 16:24:17.859"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.861" level="INFO"></msg>
<status status="PASS" endtime="20180117 16:24:17.861" starttime="20180117 16:24:17.860"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:17.862" starttime="20180117 16:24:17.862"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.865" level="INFO">IPv6 Gateway    	: 
Host IP         	:</msg>
<msg timestamp="20180117 16:24:17.865" level="INFO">${output} = IPv6 Gateway    	: 
Host IP         	: </msg>
<status status="PASS" endtime="20180117 16:24:17.866" starttime="20180117 16:24:17.863"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.867" level="INFO">IPv6 Gateway    	: 
Host IP         	: </msg>
<status status="PASS" endtime="20180117 16:24:17.867" starttime="20180117 16:24:17.866"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:17.868" starttime="20180117 16:24:17.867"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.869" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180117 16:24:17.869" starttime="20180117 16:24:17.868"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.870" level="INFO"></msg>
<status status="PASS" endtime="20180117 16:24:17.870" starttime="20180117 16:24:17.869"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SBC</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:17.905" starttime="20180117 16:24:17.870"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.906" level="INFO">FTP username    	: 
FTP password    	: 
Flags           	:</msg>
<msg timestamp="20180117 16:24:17.906" level="INFO">${output} = FTP username    	: 
FTP password    	: 
Flags           	: </msg>
<status status="PASS" endtime="20180117 16:24:17.906" starttime="20180117 16:24:17.905"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.906" level="INFO">FTP username    	: 
FTP password    	: 
Flags           	: </msg>
<status status="PASS" endtime="20180117 16:24:17.906" starttime="20180117 16:24:17.906"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>VGA</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:17.908" starttime="20180117 16:24:17.906"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.908" level="INFO">Target Name     	: SBC
Console Device  	: VGA</msg>
<msg timestamp="20180117 16:24:17.909" level="INFO">${output} = Target Name     	: SBC
Console Device  	: VGA </msg>
<status status="PASS" endtime="20180117 16:24:17.909" starttime="20180117 16:24:17.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.909" level="INFO">Target Name     	: SBC
Console Device  	: VGA </msg>
<status status="PASS" endtime="20180117 16:24:17.909" starttime="20180117 16:24:17.909"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>115200</arg>
</arguments>
<msg timestamp="20180117 16:24:17.911" level="INFO">VGA</msg>
<status status="PASS" endtime="20180117 16:24:17.911" starttime="20180117 16:24:17.909"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.912" level="INFO">Console Baudrate	: 115200</msg>
<msg timestamp="20180117 16:24:17.912" level="INFO">${output} = Console Baudrate	: 115200 </msg>
<status status="PASS" endtime="20180117 16:24:17.912" starttime="20180117 16:24:17.911"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.912" level="INFO">Console Baudrate	: 115200 </msg>
<status status="PASS" endtime="20180117 16:24:17.912" starttime="20180117 16:24:17.912"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:17.913" starttime="20180117 16:24:17.912"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:24:17.913" level="INFO">${output} = </msg>
<status status="PASS" endtime="20180117 16:24:17.913" starttime="20180117 16:24:17.913"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20180117 16:24:17.913" level="INFO"></msg>
<status status="PASS" endtime="20180117 16:24:17.913" starttime="20180117 16:24:17.913"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:24:22.914" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:24:22.914" starttime="20180117 16:24:17.914"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:24:22.917" level="INFO">115200</msg>
<status status="PASS" endtime="20180117 16:24:22.917" starttime="20180117 16:24:22.915"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:24:27.918" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:24:27.918" starttime="20180117 16:24:22.918"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180117 16:24:27.922" level="INFO">Other           	:</msg>
<status status="PASS" endtime="20180117 16:24:27.922" starttime="20180117 16:24:27.919"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:24:32.924" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:24:32.924" starttime="20180117 16:24:27.923"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:32.928" starttime="20180117 16:24:32.925"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>interface-mapping</arg>
</arguments>
<msg timestamp="20180117 16:24:32.931" level="INFO">NOTE: These changed parameters will not go into effect until reboot.</msg>
<status status="PASS" endtime="20180117 16:24:32.932" starttime="20180117 16:24:32.928"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>show</arg>
</arguments>
<msg timestamp="20180117 16:24:32.935" level="INFO">Also, be aware that some boot parameters may also be changed through</msg>
<status status="PASS" endtime="20180117 16:24:32.935" starttime="20180117 16:24:32.932"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>swap wancom1 s1p0</arg>
</arguments>
<msg timestamp="20180117 16:24:32.938" level="INFO">PHY and Network Interface Configurations.</msg>
<status status="PASS" endtime="20180117 16:24:32.938" starttime="20180117 16:24:32.936"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:24:36.939" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:24:36.939" starttime="20180117 16:24:32.939"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>y</arg>
</arguments>
<status status="PASS" endtime="20180117 16:24:36.942" starttime="20180117 16:24:36.940"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:24:40.943" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:24:40.943" starttime="20180117 16:24:36.942"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:24:40.946" level="INFO">(configure)# exit</msg>
<status status="PASS" endtime="20180117 16:24:40.947" starttime="20180117 16:24:40.944"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:24:40.950" level="INFO"># ssh -o "StrictHostKeyChecking no" user@172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:24:40.951" starttime="20180117 16:24:40.947"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:24:40.953" level="INFO">% command not found</msg>
<status status="PASS" endtime="20180117 16:24:40.953" starttime="20180117 16:24:40.951"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180117 16:24:50.955" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180117 16:24:50.955" starttime="20180117 16:24:40.954"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************Setup Entitlements Complete************</arg>
</arguments>
<msg timestamp="20180117 16:24:50.957" level="INFO">****************Setup Entitlements Complete************</msg>
<status status="PASS" endtime="20180117 16:24:50.957" starttime="20180117 16:24:50.956"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20180117 16:24:50.958" level="INFO"># Root@123
% command not found
# interface-mapping
(interface-mapping)# show
Interface Mapping Info
-------------------------------------------
Eth-IF	MAC-Addr		Label
wancom0	FA:16:3E:F1:FB:69	#generic
wancom1	FA:16:3E:CA:D5:B3	#generic
s0p0	FA:16:3E:27:E3:22	#generic
wancom2	FF:FF:FF:FF:FF:FF	#dummy
spare	FF:FF:FF:FF:FF:FF	#dummy
s1p0	FF:FF:FF:FF:FF:FF	#dummy
s0p1	FF:FF:FF:FF:FF:FF	#dummy
s1p1	FF:FF:FF:FF:FF:FF	#dummy
s0p2	FF:FF:FF:FF:FF:FF	#dummy
s1p2	FF:FF:FF:FF:FF:FF	#dummy
s0p3	FF:FF:FF:FF:FF:FF	#dummy
s1p3	FF:FF:FF:FF:FF:FF	#dummy

(interface-mapping)# swap wancom1 s1p0
Interface Mapping Info after swapping
-------------------------------------------
Eth-IF	MAC-Addr		Label
wancom0	FA:16:3E:F1:FB:69	#generic
wancom1	FF:FF:FF:FF:FF:FF	#dummy
s0p0	FA:16:3E:27:E3:22	#generic
wancom2	FF:FF:FF:FF:FF:FF	#dummy
spare	FF:FF:FF:FF:FF:FF	#dummy
s1p0	FA:16:3E:CA:D5:B3	#generic
s0p1	FF:FF:FF:FF:FF:FF	#dummy
s1p1	FF:FF:FF:FF:FF:FF	#dummy
s0p2	FF:FF:FF:FF:FF:FF	#dummy
s1p2	FF:FF:FF:FF:FF:FF	#dummy
s0p3	FF:FF:FF:FF:FF:FF	#dummy
s1p3	FF:FF:FF:FF:FF:FF	#dummy


Changes could affect service, and Requires Reboot to become effective.

Continue [y/n]?: y

WARNING: This change requires a reboot to become effective.
(interface-mapping)# exit
# exit
&gt; exit
Closing Session

Received disconnect from 172.18.0.174: 11: Logged out.
[root@controller ~(keystone_admin)]#</msg>
<status status="PASS" endtime="20180117 16:24:50.959" starttime="20180117 16:24:50.958"></status>
</kw>
<status status="PASS" endtime="20180117 16:24:50.959" starttime="20180117 16:23:53.658"></status>
</kw>
<kw name="Configuration" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************** Configuration Start ************</arg>
</arguments>
<msg timestamp="20180117 16:24:50.962" level="INFO">**************** Configuration Start ************</msg>
<status status="PASS" endtime="20180117 16:24:50.962" starttime="20180117 16:24:50.961"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:24:55.963" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:24:55.963" starttime="20180117 16:24:50.962"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180117 16:24:55.972" level="INFO">ssh -o "StrictHostKeyChecking no" user@172. 18.0.174</msg>
<status status="PASS" endtime="20180117 16:24:55.972" starttime="20180117 16:24:55.964"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:25:00.973" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:25:00.973" starttime="20180117 16:24:55.973"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:25:00.975" level="INFO">user@172.18.0.174's password:</msg>
<msg timestamp="20180117 16:25:00.975" level="INFO">${output} = user@172.18.0.174's password: </msg>
<status status="PASS" endtime="20180117 16:25:00.976" starttime="20180117 16:25:00.974"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:25:00.984" starttime="20180117 16:25:00.976"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:25:02.985" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:25:02.985" starttime="20180117 16:25:00.984"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>en</arg>
</arguments>
<status status="PASS" endtime="20180117 16:25:02.988" starttime="20180117 16:25:02.986"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20180117 16:25:03.990" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20180117 16:25:03.990" starttime="20180117 16:25:02.988"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20180117 16:25:03.993" level="INFO">&gt; en</msg>
<status status="PASS" endtime="20180117 16:25:03.994" starttime="20180117 16:25:03.991"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:25:03.995" level="INFO">Password:</msg>
<msg timestamp="20180117 16:25:03.996" level="INFO">${output} = Password: </msg>
<status status="PASS" endtime="20180117 16:25:03.996" starttime="20180117 16:25:03.994"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:25:05.997" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:25:05.997" starttime="20180117 16:25:03.996"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>con ter</arg>
</arguments>
<status status="PASS" endtime="20180117 16:25:06.000" starttime="20180117 16:25:05.998"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>system</arg>
</arguments>
<msg timestamp="20180117 16:25:06.018" level="INFO"># con ter</msg>
<status status="PASS" endtime="20180117 16:25:06.018" starttime="20180117 16:25:06.000"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:25:08.020" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:25:08.020" starttime="20180117 16:25:06.019"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>phy-interface</arg>
</arguments>
<msg timestamp="20180117 16:25:08.023" level="INFO">(configure)# system</msg>
<status status="PASS" endtime="20180117 16:25:08.024" starttime="20180117 16:25:08.021"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name ext</arg>
</arguments>
<msg timestamp="20180117 16:25:08.071" level="INFO">(system)# phy-interface</msg>
<status status="PASS" endtime="20180117 16:25:08.072" starttime="20180117 16:25:08.025"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>operation-type Media</arg>
</arguments>
<msg timestamp="20180117 16:25:08.073" level="INFO">(phy-interface)# name ext</msg>
<status status="PASS" endtime="20180117 16:25:08.074" starttime="20180117 16:25:08.072"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>slot 0</arg>
</arguments>
<msg timestamp="20180117 16:25:08.120" level="INFO">(phy-interface)# operation-type Media</msg>
<status status="PASS" endtime="20180117 16:25:08.121" starttime="20180117 16:25:08.074"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>port 0</arg>
</arguments>
<msg timestamp="20180117 16:25:08.122" level="INFO">(phy-interface)# slot 0</msg>
<status status="PASS" endtime="20180117 16:25:08.123" starttime="20180117 16:25:08.121"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:08.169" level="INFO">(phy-interface)# port 0</msg>
<status status="PASS" endtime="20180117 16:25:08.169" starttime="20180117 16:25:08.123"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:25:10.170" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:25:10.170" starttime="20180117 16:25:08.170"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name in</arg>
</arguments>
<msg timestamp="20180117 16:25:10.173" level="INFO">(phy-interface)# done</msg>
<status status="PASS" endtime="20180117 16:25:10.174" starttime="20180117 16:25:10.171"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>operation-type Media</arg>
</arguments>
<msg timestamp="20180117 16:25:10.176" level="INFO">phy-interface</msg>
<status status="PASS" endtime="20180117 16:25:10.176" starttime="20180117 16:25:10.174"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>slot 1</arg>
</arguments>
<msg timestamp="20180117 16:25:10.180" level="INFO">name                                    ext</msg>
<status status="PASS" endtime="20180117 16:25:10.180" starttime="20180117 16:25:10.177"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:10.184" level="INFO">operation-type                          Media</msg>
<status status="PASS" endtime="20180117 16:25:10.184" starttime="20180117 16:25:10.181"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:25:12.186" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:25:12.186" starttime="20180117 16:25:10.185"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:12.190" level="INFO">port                                    0</msg>
<status status="PASS" endtime="20180117 16:25:12.191" starttime="20180117 16:25:12.187"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interface</arg>
</arguments>
<msg timestamp="20180117 16:25:12.195" level="INFO">slot                                    0</msg>
<status status="PASS" endtime="20180117 16:25:12.195" starttime="20180117 16:25:12.192"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name ext</arg>
</arguments>
<msg timestamp="20180117 16:25:12.199" level="INFO">virtual-mac</msg>
<status status="PASS" endtime="20180117 16:25:12.199" starttime="20180117 16:25:12.196"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sub-port-id 0</arg>
</arguments>
<msg timestamp="20180117 16:25:12.203" level="INFO">admin-state                             enabled</msg>
<status status="PASS" endtime="20180117 16:25:12.203" starttime="20180117 16:25:12.200"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description toEPC</arg>
</arguments>
<msg timestamp="20180117 16:25:12.207" level="INFO">auto-negotiation                        enabled</msg>
<status status="PASS" endtime="20180117 16:25:12.208" starttime="20180117 16:25:12.204"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP2}</arg>
</arguments>
<msg timestamp="20180117 16:25:12.212" level="INFO">duplex-mode                             FULL</msg>
<status status="PASS" endtime="20180117 16:25:12.212" starttime="20180117 16:25:12.208"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>netmask 255.255.255.0</arg>
</arguments>
<msg timestamp="20180117 16:25:12.218" level="INFO">speed                                   100</msg>
<status status="PASS" endtime="20180117 16:25:12.218" starttime="20180117 16:25:12.215"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>gateway ${GATEWAY IP}</arg>
</arguments>
<msg timestamp="20180117 16:25:12.222" level="INFO">wancom-health-score                     50</msg>
<status status="PASS" endtime="20180117 16:25:12.223" starttime="20180117 16:25:12.219"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-ip-primary ${DNS IP}</arg>
</arguments>
<msg timestamp="20180117 16:25:12.227" level="INFO">overload-protection                     disabled</msg>
<status status="PASS" endtime="20180117 16:25:12.228" starttime="20180117 16:25:12.223"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-domain example.demo</arg>
</arguments>
<msg timestamp="20180117 16:25:12.231" level="INFO">last-modified-by                        admin@172.18.0.60</msg>
<status status="PASS" endtime="20180117 16:25:12.231" starttime="20180117 16:25:12.228"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-hip-ip ${IP2}</arg>
</arguments>
<msg timestamp="20180117 16:25:12.234" level="INFO">last-modified-date                      2018-01-17 16:22:11</msg>
<status status="PASS" endtime="20180117 16:25:12.234" starttime="20180117 16:25:12.232"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-icmp-ip ${IP2}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:25:12.236" starttime="20180117 16:25:12.235"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:12.237" level="INFO">(phy-interface)# name in</msg>
<status status="PASS" endtime="20180117 16:25:12.237" starttime="20180117 16:25:12.236"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:25:17.238" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:25:17.238" starttime="20180117 16:25:12.238"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name in</arg>
</arguments>
<msg timestamp="20180117 16:25:17.242" level="INFO">(phy-interface)# operation-type Media</msg>
<status status="PASS" endtime="20180117 16:25:17.242" starttime="20180117 16:25:17.239"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description toCSM</arg>
</arguments>
<msg timestamp="20180117 16:25:17.245" level="INFO">(phy-interface)# slot 1</msg>
<status status="PASS" endtime="20180117 16:25:17.245" starttime="20180117 16:25:17.243"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP1}</arg>
</arguments>
<msg timestamp="20180117 16:25:17.249" level="INFO">(phy-interface)# done</msg>
<status status="PASS" endtime="20180117 16:25:17.249" starttime="20180117 16:25:17.246"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>netmask 255.255.255.0</arg>
</arguments>
<msg timestamp="20180117 16:25:17.251" level="INFO">phy-interface</msg>
<status status="PASS" endtime="20180117 16:25:17.252" starttime="20180117 16:25:17.250"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>gateway ${GATEWAY IP}</arg>
</arguments>
<msg timestamp="20180117 16:25:17.255" level="INFO">name                                    in</msg>
<status status="PASS" endtime="20180117 16:25:17.256" starttime="20180117 16:25:17.252"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-ip-primary ${DNS IP}</arg>
</arguments>
<msg timestamp="20180117 16:25:17.260" level="INFO">operation-type                          Media</msg>
<status status="PASS" endtime="20180117 16:25:17.260" starttime="20180117 16:25:17.256"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-domain example.demo</arg>
</arguments>
<msg timestamp="20180117 16:25:17.266" level="INFO">port                                    0</msg>
<status status="PASS" endtime="20180117 16:25:17.266" starttime="20180117 16:25:17.261"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-hip-ip ${IP1}</arg>
</arguments>
<msg timestamp="20180117 16:25:17.270" level="INFO">slot                                    1</msg>
<status status="PASS" endtime="20180117 16:25:17.270" starttime="20180117 16:25:17.267"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-icmp-ip ${IP1}</arg>
</arguments>
<msg timestamp="20180117 16:25:17.272" level="INFO">virtual-mac</msg>
<status status="PASS" endtime="20180117 16:25:17.273" starttime="20180117 16:25:17.271"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>signaling-mtu 1000</arg>
</arguments>
<msg timestamp="20180117 16:25:17.275" level="INFO">admin-state                             enabled</msg>
<status status="PASS" endtime="20180117 16:25:17.275" starttime="20180117 16:25:17.273"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:17.277" level="INFO">auto-negotiation                        enabled</msg>
<status status="PASS" endtime="20180117 16:25:17.277" starttime="20180117 16:25:17.275"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20180117 16:25:27.278" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180117 16:25:27.278" starttime="20180117 16:25:17.277"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:27.283" level="INFO">duplex-mode                             FULL</msg>
<status status="PASS" endtime="20180117 16:25:27.283" starttime="20180117 16:25:27.279"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>system-config</arg>
</arguments>
<msg timestamp="20180117 16:25:27.287" level="INFO">speed                                   100</msg>
<status status="PASS" endtime="20180117 16:25:27.287" starttime="20180117 16:25:27.284"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>hostname sbc</arg>
</arguments>
<msg timestamp="20180117 16:25:27.291" level="INFO">wancom-health-score                     50</msg>
<status status="PASS" endtime="20180117 16:25:27.291" starttime="20180117 16:25:27.288"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description Oracle-SBC</arg>
</arguments>
<msg timestamp="20180117 16:25:27.295" level="INFO">overload-protection                     disabled</msg>
<status status="PASS" endtime="20180117 16:25:27.296" starttime="20180117 16:25:27.292"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>default-gateway ${DEFAULT-GATEWAY}</arg>
</arguments>
<msg timestamp="20180117 16:25:27.302" level="INFO">last-modified-by                        admin@172.18.0.60</msg>
<status status="PASS" endtime="20180117 16:25:27.303" starttime="20180117 16:25:27.298"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:27.307" level="INFO">last-modified-date                      2018-01-17 16:22:13</msg>
<status status="PASS" endtime="20180117 16:25:27.307" starttime="20180117 16:25:27.303"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:25:32.308" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:25:32.308" starttime="20180117 16:25:27.308"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<status status="PASS" endtime="20180117 16:25:32.311" starttime="20180117 16:25:32.309"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:32.313" level="INFO">(phy-interface)# exit</msg>
<status status="PASS" endtime="20180117 16:25:32.314" starttime="20180117 16:25:32.311"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>session-router</arg>
</arguments>
<msg timestamp="20180117 16:25:32.316" level="INFO">(system)# network-interface</msg>
<status status="PASS" endtime="20180117 16:25:32.317" starttime="20180117 16:25:32.314"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-config</arg>
</arguments>
<msg timestamp="20180117 16:25:32.319" level="INFO">(network-interface)# name ext</msg>
<status status="PASS" endtime="20180117 16:25:32.320" starttime="20180117 16:25:32.317"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:32.323" level="INFO">(network-interface)# sub-port-id 0</msg>
<status status="PASS" endtime="20180117 16:25:32.324" starttime="20180117 16:25:32.320"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>home-realm-id csm</arg>
</arguments>
<msg timestamp="20180117 16:25:32.327" level="INFO">(network-interface)# description toEPC</msg>
<status status="PASS" endtime="20180117 16:25:32.327" starttime="20180117 16:25:32.325"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registrar-domain *</arg>
</arguments>
<msg timestamp="20180117 16:25:32.332" level="INFO">(network-interface)# ip-address 10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:25:32.333" starttime="20180117 16:25:32.329"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registrar-host *</arg>
</arguments>
<msg timestamp="20180117 16:25:32.335" level="INFO">(network-interface)# netmask 255.255.255.0</msg>
<status status="PASS" endtime="20180117 16:25:32.335" starttime="20180117 16:25:32.333"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registrar-port 5060</arg>
</arguments>
<msg timestamp="20180117 16:25:32.338" level="INFO">(network-interface)# gateway 10.80.1.1</msg>
<status status="PASS" endtime="20180117 16:25:32.338" starttime="20180117 16:25:32.336"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>options +force-unregistration</arg>
</arguments>
<msg timestamp="20180117 16:25:32.341" level="INFO">(network-interface)# dns-ip-primary 10.80.1.134</msg>
<status status="PASS" endtime="20180117 16:25:32.341" starttime="20180117 16:25:32.339"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>options +max-udp-length=0</arg>
</arguments>
<msg timestamp="20180117 16:25:32.344" level="INFO">(network-interface)# dns-domain example.demo</msg>
<status status="PASS" endtime="20180117 16:25:32.344" starttime="20180117 16:25:32.342"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:32.347" level="INFO">(network-interface)# add-hip-ip 10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:25:32.347" starttime="20180117 16:25:32.345"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:32.349" level="INFO">(network-interface)# add-icmp-ip 10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:25:32.350" starttime="20180117 16:25:32.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-interface</arg>
</arguments>
<msg timestamp="20180117 16:25:32.352" level="INFO">(network-interface)# done</msg>
<status status="PASS" endtime="20180117 16:25:32.352" starttime="20180117 16:25:32.350"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:32.354" level="INFO">network-interface</msg>
<status status="PASS" endtime="20180117 16:25:32.354" starttime="20180117 16:25:32.352"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id epc</arg>
</arguments>
<msg timestamp="20180117 16:25:32.357" level="INFO">name                                    ext</msg>
<status status="PASS" endtime="20180117 16:25:32.358" starttime="20180117 16:25:32.355"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description EPC-&gt;SBC</arg>
</arguments>
<msg timestamp="20180117 16:25:32.360" level="INFO">sub-port-id                             0</msg>
<status status="PASS" endtime="20180117 16:25:32.361" starttime="20180117 16:25:32.358"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ims-feature enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:32.362" level="INFO">description                             toEPC</msg>
<status status="PASS" endtime="20180117 16:25:32.362" starttime="20180117 16:25:32.361"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>proxy-mode proxy</arg>
</arguments>
<msg timestamp="20180117 16:25:32.363" level="INFO">hostname</msg>
<status status="PASS" endtime="20180117 16:25:32.363" starttime="20180117 16:25:32.362"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registration-caching enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:32.365" level="INFO">ip-address                              10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:25:32.365" starttime="20180117 16:25:32.364"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>route-to-registrar enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:32.366" level="INFO">pri-utility-addr</msg>
<status status="PASS" endtime="20180117 16:25:32.366" starttime="20180117 16:25:32.365"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-id example.demo</arg>
</arguments>
<msg timestamp="20180117 16:25:32.368" level="INFO">sec-utility-addr</msg>
<status status="PASS" endtime="20180117 16:25:32.368" starttime="20180117 16:25:32.367"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ports</arg>
</arguments>
<msg timestamp="20180117 16:25:32.369" level="INFO">netmask                                 255.255.255.0</msg>
<status status="PASS" endtime="20180117 16:25:32.369" starttime="20180117 16:25:32.368"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>address ${IP2}</arg>
</arguments>
<msg timestamp="20180117 16:25:32.372" level="INFO">gateway                                 10.80.1.1</msg>
<status status="PASS" endtime="20180117 16:25:32.372" starttime="20180117 16:25:32.369"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:32.373" level="INFO">sec-gateway</msg>
<status status="PASS" endtime="20180117 16:25:32.374" starttime="20180117 16:25:32.372"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:32.375" level="INFO">gw-heartbeat</msg>
<status status="PASS" endtime="20180117 16:25:32.375" starttime="20180117 16:25:32.374"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:32.376" level="INFO">state                                   disabled</msg>
<status status="PASS" endtime="20180117 16:25:32.376" starttime="20180117 16:25:32.375"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:32.378" level="INFO">heartbeat                               0</msg>
<status status="PASS" endtime="20180117 16:25:32.378" starttime="20180117 16:25:32.376"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id csm</arg>
</arguments>
<msg timestamp="20180117 16:25:32.379" level="INFO">retry-count                             0</msg>
<status status="PASS" endtime="20180117 16:25:32.379" starttime="20180117 16:25:32.378"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description SBC-&gt;CSM</arg>
</arguments>
<msg timestamp="20180117 16:25:32.381" level="INFO">retry-timeout                           1</msg>
<status status="PASS" endtime="20180117 16:25:32.381" starttime="20180117 16:25:32.379"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ims-feature enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:32.382" level="INFO">health-score                            0</msg>
<status status="PASS" endtime="20180117 16:25:32.382" starttime="20180117 16:25:32.381"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>proxy-mode</arg>
</arguments>
<status status="PASS" endtime="20180117 16:25:32.383" starttime="20180117 16:25:32.382"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>registration-caching disabled</arg>
</arguments>
<status status="PASS" endtime="20180117 16:25:32.383" starttime="20180117 16:25:32.383"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>route-to-registrar disabled</arg>
</arguments>
<status status="PASS" endtime="20180117 16:25:32.384" starttime="20180117 16:25:32.383"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ports</arg>
</arguments>
<msg timestamp="20180117 16:25:32.385" level="INFO">dns-ip-primary                          10.80.1.134</msg>
<status status="PASS" endtime="20180117 16:25:32.385" starttime="20180117 16:25:32.384"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>address ${IP1}</arg>
</arguments>
<msg timestamp="20180117 16:25:32.386" level="INFO">dns-ip-backup1</msg>
<status status="PASS" endtime="20180117 16:25:32.386" starttime="20180117 16:25:32.385"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:32.388" level="INFO">dns-ip-backup2</msg>
<status status="PASS" endtime="20180117 16:25:32.388" starttime="20180117 16:25:32.387"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:25:37.388" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:25:37.388" starttime="20180117 16:25:32.388"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:37.393" level="INFO">dns-domain                              example.demo</msg>
<status status="PASS" endtime="20180117 16:25:37.393" starttime="20180117 16:25:37.389"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20180117 16:25:37.395" level="INFO">dns-timeout                             11
        dns-max-ttl                             86400
        signaling-mtu                           0
        hip-ip-list                             10.80.1.48
        ftp-address                             
        icmp-address                            10.80.1.48
        snmp-address                            
        telnet-address                          
        ssh-address                             
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:15

(network-interface)# name in
(network-interface)# description toCSM
(network-interface)# ip-address 10.80.1.47
(network-interface)# netmask 255.255.255.0
(network-interface)# gateway 10.80.1.1
(network-interface)# dns-ip-primary 10.80.1.134
(network-interface)# dns-domain example.demo
(network-interface)# add-hip-ip 10.80.1.47
(network-interface)# add-icmp-ip 10.80.1.47
(network-interface)# signaling-mtu 1000
(network-interface)# done
network-interface
        name                                    in
        sub-port-id                             0
        description                             toCSM
        hostname                                
        ip-address                              10.80.1.47
        pri-utility-addr                        
        sec-utility-addr                        
        netmask                                 255.255.255.0
        gateway                                 10.80.1.1
        sec-gateway                             
        gw-heartbeat
                state                                   disabled
                heartbeat                               0
                retry-count                             0
                retry-timeout                           1
                health-score                            0
        dns-ip-primary                          10.80.1.134
        dns-ip-backup1                          
        dns-ip-backup2                          
        dns-domain                              example.demo
        dns-timeout                             11
        dns-max-ttl                             86400
        signaling-mtu                           1000
        hip-ip-list                             10.80.1.47
        ftp-address                             
        icmp-address                            10.80.1.47
        snmp-address                            
        telnet-address                          
        ssh-address                             
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:20

(network-interface)# exit
(system)# system-config
(system-config)# hostname sbc
(system-config)# description Oracle-SBC
(system-config)# default-gateway 172.18.0.1
(system-config)# done
system-config
        hostname                                sbc
        description                             Oracle-SBC
        location                                
        mib-system-contact                      
        mib-system-name                         
        mib-system-location                     
        acp-tls-profile                         
        snmp-enabled                            enabled
        enable-snmp-auth-traps                  disabled
        enable-snmp-syslog-notify               disabled
        enable-snmp-monitor-traps               disabled
        enable-env-monitor-traps                disabled
        enable-mblk_tracking                    disabled
        snmp-syslog-his-table-length            1
        snmp-syslog-level                       WARNING
        system-log-level                        WARNING
        process-log-level                       NOTICE
        process-log-ip-address                  0.0.0.0
        process-log-port                        0
        collect
                sample-interval                         5
                push-interval                           15
                boot-state                              disabled
                start-time                              now
                end-time                                never
                red-collect-state                       disabled
                red-max-trans                           1000
                red-sync-start-time                     5000
                red-sync-comp-time                      1000
                push-success-trap-state                 disabled
        comm-monitor
                state                                   disabled
                sbc-grp-id                              0
                tls-profile                             
                qos-enable                              enabled
        call-trace                              disabled
        internal-trace                          disabled
        log-filter                              all
        default-gateway                         172.18.0.1
        restart                                 enabled
        exceptions                              
        telnet                                  disabled
        telnet-timeout                          0
        console-timeout                         0
        remote-control                          enabled
        cli-audit-trail                         enabled
        link-redundancy-state                   disabled
        source-routing                          disabled
        cli-more                                disabled
        terminal-height                         24
        debug-timeout                           0
        trap-event-lifetime                     0
        ids-syslog-facility                     -1
        options                                 
        default-v6-gateway                      ::
        ipv4-signaling-mtu                      1500
        cleanup-time-of-day                     00:00
        snmp-engine-id-suffix                   
        snmp-agent-mode                         v1v2
        forwarding-cores                        1
        dos-cores                               0
        transcoding-cores                       0
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:30

(system-config)# exit
(system)# exit
(configure)# session-router
(session-router)# sip-config
(sip-config)# state enabled
(sip-config)# home-realm-id csm
(sip-config)# registrar-domain *
(sip-config)# registrar-host *
(sip-config)# registrar-port 5060
(sip-config)# options +force-unregistration
(sip-config)# options +max-udp-length=0
(sip-config)# done
sip-config
        state                                   enabled
        operation-mode                          dialog
        dialog-transparency                     enabled
        home-realm-id                           csm
        egress-realm-id                         
        auto-realm-id                           
        nat-mode                                None
        registrar-domain                        *
        registrar-host                          *
        registrar-port                          5060
        register-service-route                  always
        init-timer                              500
        max-timer                               4000
        trans-expire                            32
        initial-inv-trans-expire                0
        invite-expire                           180
        session-max-life-limit                  0
        inactive-dynamic-conn                   32
        enforcement-profile                     
        pac-method                              
        pac-interval                            10
        pac-strategy                            PropDist
        pac-load-weight                         1
        pac-session-weight                      1
        pac-route-weight                        1
        pac-callid-lifetime                     600
        pac-user-lifetime                       3600
        red-sip-port                            1988
        red-max-trans                           10000
        red-sync-start-time                     5000
        red-sync-comp-time                      1000
        options                                 force-unregistration
                                                max-udp-length=0
        add-reason-header                       disabled
        sip-message-len                         4096
        enum-sag-match                          disabled
        extra-method-stats                      disabled
        extra-enum-stats                        disabled
        rph-feature                             disabled
        nsep-user-sessions-rate                 0
        nsep-sa-sessions-rate                   0
        registration-cache-limit                0
        register-use-to-for-lp                  disabled
        refer-src-routing                       disabled
        add-ucid-header                         disabled
        proxy-sub-events                        
        allow-pani-for-trusted-only             disabled
        atcf-stn-sr                             
        atcf-psi-dn                             
        atcf-route-to-sccas                     disabled
        eatf-stn-sr                             
        pass-gruu-contact                       disabled
        sag-lookup-on-redirect                  disabled
        set-disconnect-time-on-bye              disabled
        msrp-delayed-bye-timer                  15
        transcoding-realm                       
        transcoding-agents                      
        create-dynamic-sa                       disabled
        node-functionality                      P-CSCF
        match-sip-instance                      disabled
        sa-routes-stats                         disabled
        sa-routes-traps                         disabled
        rx-sip-reason-mapping                   disabled
        add-ue-location-in-pani                 disabled
        hold-emergency-calls-for-loc-info       0
        retry-after-upon-offline                0
        reg-reject-response-upon-offline        503
        hold-invite-calls-for-loc-info          0
        cache-loc-info-expire                   32
        msg-hold-for-loc-info                   0
        npli-upon-register                      disabled
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:35

(sip-config)# exit
(session-router)# sip-interface
(sip-interface)# state enabled
(sip-interface)# realm-id epc
(sip-interface)# description EPC-&gt;SBC
(sip-interface)# sip-ims-feature enabled
(sip-interface)# proxy-mode proxy
(sip-interface)# registration-caching enabled
(sip-interface)# route-to-registrar enabled
(sip-interface)# network-id example.demo
(sip-interface)# sip-ports
(sip-port)# address 10.80.1.48
(sip-port)# done
sip-port
        address                                 10.80.1.48
        port                                    5060
        transport-protocol                      UDP
        tls-profile                             
        allow-anonymous                         all
        multi-home-addrs                        
        ims-aka-profile                         

(sip-port)# exit
(sip-interface)# done
sip-interface
        state                                   enabled
        realm-id                                epc
        description                             EPC-&gt;SBC
        sip-port
                address                                 10.80.1.48
                port                                    5060
                transport-protocol                      UDP
                tls-profile                             
                allow-anonymous                         all
                multi-home-addrs                        
                ims-aka-profile                         
        carriers                                
        trans-expire                            0
        initial-inv-trans-expire                0
        invite-expire                           0
        session-max-life-limit                  0
        max-redirect-contacts                   0
        proxy-mode                              Proxy
        redirect-action                         
        contact-mode                            none
        nat-traversal                           none
        nat-interval                            30
        tcp-nat-interval                        90
        registration-caching                    enabled
        min-reg-expire                          300
        registration-interval                   3600
        route-to-registrar                      enabled
        secured-network                         disabled
        teluri-scheme                           disabled
        uri-fqdn-domain                         
        options                                 
        spl-options                             
        trust-mode                              all
        max-nat-interval                        3600
        nat-int-increment                       10
        nat-test-increment                      30
        sip-dynamic-hnt                         disabled
        stop-recurse                            401,407
        port-map-start                          0
        port-map-end                            0
        in-manipulationid                       
        out-manipulationid                      
        sip-ims-feature                         enabled
        sip-atcf-feature                        disabled
        subscribe-reg-event                     disabled
        operator-identifier                     
        anonymous-priority                      none
        max-incoming-conns                      0
        per-src-ip-max-incoming-conns           0
        inactive-conn-timeout                   0
        untrusted-conn-timeout                  0
        network-id                              example.demo
        ext-policy-server                       
        ldap-policy-server                      
        default-location-string                 
        term-tgrp-mode                          none
        charging-vector-mode                    pass
        charging-function-address-mode          pass
        ccf-address                             
        ecf-address                             
        implicit-service-route                  disabled
        rfc2833-payload                         101
        rfc2833-mode                            transparent
        constraint-name                         
        response-map                            
        local-response-map                      
        sec-agree-feature                       disabled
        sec-agree-pref                          ipsec3gpp
        enforcement-profile                     
        route-unauthorized-calls                
        tcp-keepalive                           none
        add-sdp-invite                          disabled
        p-early-media-header                    disabled
        p-early-media-direction                 
        add-sdp-profiles                        
        manipulation-string                     
        manipulation-pattern                    
        sip-profile                             
        sip-isup-profile                        
        tcp-conn-dereg                          0
        tunnel-name                             
        register-keep-alive                     none
        kpml-interworking                       disabled
        msrp-delay-egress-bye                   disabled
        send-380-response                       
        pcscf-restoration                       
        session-timer-profile                   
        session-recording-server                
        session-recording-required              disabled
        service-tag                             
        reg-cache-route                         disabled
        diversion-info-mapping-mode             none
        atcf-icsi-match                         
        sip-recursion-policy                    
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:35

(sip-interface)# state enabled
(sip-interface)# realm-id csm
(sip-interface)# description SBC-&gt;CSM
(sip-interface)# sip-ims-feature enabled
(sip-interface)# sip-ports
(sip-port)# address 10.80.1.47
(sip-port)# done
sip-port
        address                                 10.80.1.47
        port                                    5060
        transport-protocol                      UDP
        tls-profile                             
        allow-anonymous                         all
        multi-home-addrs                        
        ims-aka-profile                         

(sip-port)#</msg>
<status status="PASS" endtime="20180117 16:25:37.397" starttime="20180117 16:25:37.394"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:25:42.398" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:25:42.398" starttime="20180117 16:25:37.398"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:42.401" level="INFO">exit</msg>
<status status="PASS" endtime="20180117 16:25:42.402" starttime="20180117 16:25:42.399"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>Y</arg>
</arguments>
<msg timestamp="20180117 16:25:42.424" level="INFO">(sip-interface)# exit</msg>
<status status="PASS" endtime="20180117 16:25:42.424" starttime="20180117 16:25:42.402"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>session-agent</arg>
</arguments>
<msg timestamp="20180117 16:25:42.438" level="INFO">Save Changes [y/n]?: Y</msg>
<status status="PASS" endtime="20180117 16:25:42.438" starttime="20180117 16:25:42.425"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>hostname ${CSM IP}</arg>
</arguments>
<msg timestamp="20180117 16:25:42.442" level="INFO">sip-interface</msg>
<status status="PASS" endtime="20180117 16:25:42.442" starttime="20180117 16:25:42.439"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${CSM IP}</arg>
</arguments>
<msg timestamp="20180117 16:25:42.447" level="INFO">state                                   enabled</msg>
<status status="PASS" endtime="20180117 16:25:42.448" starttime="20180117 16:25:42.443"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>port 5060</arg>
</arguments>
<msg timestamp="20180117 16:25:42.450" level="INFO">realm-id                                csm</msg>
<status status="PASS" endtime="20180117 16:25:42.451" starttime="20180117 16:25:42.448"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:42.454" level="INFO">description                             SBC-&gt;CSM</msg>
<status status="PASS" endtime="20180117 16:25:42.454" starttime="20180117 16:25:42.451"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id csm</arg>
</arguments>
<msg timestamp="20180117 16:25:42.456" level="INFO">sip-port</msg>
<status status="PASS" endtime="20180117 16:25:42.456" starttime="20180117 16:25:42.454"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>egress-realm-id</arg>
</arguments>
<msg timestamp="20180117 16:25:42.459" level="INFO">address                                 10.80.1.47</msg>
<status status="PASS" endtime="20180117 16:25:42.459" starttime="20180117 16:25:42.457"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>trust-me enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:42.462" level="INFO">port                                    5060</msg>
<status status="PASS" endtime="20180117 16:25:42.463" starttime="20180117 16:25:42.460"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:42.466" level="INFO">transport-protocol                      UDP</msg>
<status status="PASS" endtime="20180117 16:25:42.466" starttime="20180117 16:25:42.463"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:42.469" level="INFO">tls-profile</msg>
<status status="PASS" endtime="20180117 16:25:42.469" starttime="20180117 16:25:42.466"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>local-policy</arg>
</arguments>
<msg timestamp="20180117 16:25:42.471" level="INFO">allow-anonymous                         all</msg>
<status status="PASS" endtime="20180117 16:25:42.471" starttime="20180117 16:25:42.470"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>from-address *</arg>
</arguments>
<msg timestamp="20180117 16:25:42.472" level="INFO">multi-home-addrs</msg>
<status status="PASS" endtime="20180117 16:25:42.473" starttime="20180117 16:25:42.471"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>to-address *</arg>
</arguments>
<msg timestamp="20180117 16:25:42.474" level="INFO">ims-aka-profile</msg>
<status status="PASS" endtime="20180117 16:25:42.474" starttime="20180117 16:25:42.473"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source-realm epc</arg>
</arguments>
<msg timestamp="20180117 16:25:42.475" level="INFO">carriers</msg>
<status status="PASS" endtime="20180117 16:25:42.475" starttime="20180117 16:25:42.474"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description EPC-&gt;SBC-&gt;CSM</arg>
</arguments>
<msg timestamp="20180117 16:25:42.476" level="INFO">trans-expire                            0</msg>
<status status="PASS" endtime="20180117 16:25:42.476" starttime="20180117 16:25:42.475"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>policy-attributes</arg>
</arguments>
<msg timestamp="20180117 16:25:42.478" level="INFO">initial-inv-trans-expire                0</msg>
<status status="PASS" endtime="20180117 16:25:42.478" starttime="20180117 16:25:42.477"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>next-hop ${CSM IP}</arg>
</arguments>
<msg timestamp="20180117 16:25:42.479" level="INFO">invite-expire                           0</msg>
<status status="PASS" endtime="20180117 16:25:42.479" starttime="20180117 16:25:42.478"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm csm</arg>
</arguments>
<msg timestamp="20180117 16:25:42.480" level="INFO">session-max-life-limit                  0</msg>
<status status="PASS" endtime="20180117 16:25:42.480" starttime="20180117 16:25:42.479"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:42.481" level="INFO">max-redirect-contacts                   0</msg>
<status status="PASS" endtime="20180117 16:25:42.481" starttime="20180117 16:25:42.480"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:42.482" level="INFO">proxy-mode</msg>
<status status="PASS" endtime="20180117 16:25:42.483" starttime="20180117 16:25:42.482"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:42.484" level="INFO">redirect-action</msg>
<status status="PASS" endtime="20180117 16:25:42.484" starttime="20180117 16:25:42.483"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:25:46.484" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:25:46.484" starttime="20180117 16:25:42.484"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:46.488" level="INFO">contact-mode                            none</msg>
<status status="PASS" endtime="20180117 16:25:46.489" starttime="20180117 16:25:46.485"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:25:50.490" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:25:50.490" starttime="20180117 16:25:46.489"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>y</arg>
</arguments>
<msg timestamp="20180117 16:25:50.495" level="INFO">nat-traversal                           none</msg>
<status status="PASS" endtime="20180117 16:25:50.496" starttime="20180117 16:25:50.491"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:25:53.497" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:25:53.497" starttime="20180117 16:25:50.496"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:53.501" level="INFO">nat-interval                            30</msg>
<status status="PASS" endtime="20180117 16:25:53.502" starttime="20180117 16:25:53.498"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>media-manager</arg>
</arguments>
<msg timestamp="20180117 16:25:53.505" level="INFO">tcp-nat-interval                        90</msg>
<status status="PASS" endtime="20180117 16:25:53.505" starttime="20180117 16:25:53.502"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-config</arg>
</arguments>
<msg timestamp="20180117 16:25:53.509" level="INFO">registration-caching                    disabled</msg>
<status status="PASS" endtime="20180117 16:25:53.510" starttime="20180117 16:25:53.506"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>identifier epc</arg>
</arguments>
<msg timestamp="20180117 16:25:53.513" level="INFO">min-reg-expire                          300</msg>
<status status="PASS" endtime="20180117 16:25:53.513" starttime="20180117 16:25:53.510"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>addr-prefix 0.0.0.0</arg>
</arguments>
<msg timestamp="20180117 16:25:53.516" level="INFO">registration-interval                   3600</msg>
<status status="PASS" endtime="20180117 16:25:53.516" starttime="20180117 16:25:53.514"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interfaces ext:0</arg>
</arguments>
<msg timestamp="20180117 16:25:53.522" level="INFO">route-to-registrar                      disabled</msg>
<status status="PASS" endtime="20180117 16:25:53.522" starttime="20180117 16:25:53.517"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:53.525" level="INFO">secured-network                         disabled</msg>
<status status="PASS" endtime="20180117 16:25:53.526" starttime="20180117 16:25:53.523"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>identifier csm</arg>
</arguments>
<msg timestamp="20180117 16:25:53.529" level="INFO">teluri-scheme                           disabled</msg>
<status status="PASS" endtime="20180117 16:25:53.529" starttime="20180117 16:25:53.526"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>addr-prefix 0.0.0.0</arg>
</arguments>
<msg timestamp="20180117 16:25:53.532" level="INFO">uri-fqdn-domain</msg>
<status status="PASS" endtime="20180117 16:25:53.532" starttime="20180117 16:25:53.530"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interfaces in:0</arg>
</arguments>
<msg timestamp="20180117 16:25:53.535" level="INFO">options</msg>
<status status="PASS" endtime="20180117 16:25:53.535" starttime="20180117 16:25:53.533"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:53.538" level="INFO">spl-options</msg>
<status status="PASS" endtime="20180117 16:25:53.539" starttime="20180117 16:25:53.536"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:53.541" level="INFO">trust-mode                              all</msg>
<status status="PASS" endtime="20180117 16:25:53.542" starttime="20180117 16:25:53.539"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>steering-pool</arg>
</arguments>
<msg timestamp="20180117 16:25:53.545" level="INFO">max-nat-interval                        3600</msg>
<status status="PASS" endtime="20180117 16:25:53.545" starttime="20180117 16:25:53.542"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP2}</arg>
</arguments>
<msg timestamp="20180117 16:25:53.548" level="INFO">nat-int-increment                       10</msg>
<status status="PASS" endtime="20180117 16:25:53.548" starttime="20180117 16:25:53.545"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>start-port 10000</arg>
</arguments>
<msg timestamp="20180117 16:25:53.552" level="INFO">nat-test-increment                      30</msg>
<status status="PASS" endtime="20180117 16:25:53.552" starttime="20180117 16:25:53.549"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>end-port 29999</arg>
</arguments>
<msg timestamp="20180117 16:25:53.555" level="INFO">sip-dynamic-hnt                         disabled</msg>
<status status="PASS" endtime="20180117 16:25:53.556" starttime="20180117 16:25:53.552"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id epc</arg>
</arguments>
<msg timestamp="20180117 16:25:53.559" level="INFO">stop-recurse                            401,407</msg>
<status status="PASS" endtime="20180117 16:25:53.559" starttime="20180117 16:25:53.556"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interface ext:0</arg>
</arguments>
<msg timestamp="20180117 16:25:53.564" level="INFO">port-map-start                          0</msg>
<status status="PASS" endtime="20180117 16:25:53.564" starttime="20180117 16:25:53.560"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:53.567" level="INFO">port-map-end                            0</msg>
<status status="PASS" endtime="20180117 16:25:53.568" starttime="20180117 16:25:53.565"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP1}</arg>
</arguments>
<msg timestamp="20180117 16:25:53.571" level="INFO">in-manipulationid</msg>
<status status="PASS" endtime="20180117 16:25:53.571" starttime="20180117 16:25:53.568"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>start-port 30000</arg>
</arguments>
<msg timestamp="20180117 16:25:53.574" level="INFO">out-manipulationid</msg>
<status status="PASS" endtime="20180117 16:25:53.574" starttime="20180117 16:25:53.572"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>end-port 49999</arg>
</arguments>
<msg timestamp="20180117 16:25:53.577" level="INFO">sip-ims-feature                         enabled</msg>
<status status="PASS" endtime="20180117 16:25:53.578" starttime="20180117 16:25:53.575"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id csm</arg>
</arguments>
<msg timestamp="20180117 16:25:53.581" level="INFO">sip-atcf-feature                        disabled</msg>
<status status="PASS" endtime="20180117 16:25:53.581" starttime="20180117 16:25:53.578"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interface in:0</arg>
</arguments>
<msg timestamp="20180117 16:25:53.584" level="INFO">subscribe-reg-event                     disabled</msg>
<status status="PASS" endtime="20180117 16:25:53.584" starttime="20180117 16:25:53.581"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:53.587" level="INFO">operator-identifier</msg>
<status status="PASS" endtime="20180117 16:25:53.588" starttime="20180117 16:25:53.585"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:53.594" level="INFO">anonymous-priority                      none</msg>
<status status="PASS" endtime="20180117 16:25:53.594" starttime="20180117 16:25:53.588"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20180117 16:25:53.596" level="INFO">max-incoming-conns                      0
        per-src-ip-max-incoming-conns           0
        inactive-conn-timeout                   0
        untrusted-conn-timeout                  0
        network-id                              
        ext-policy-server                       
        ldap-policy-server                      
        default-location-string                 
        term-tgrp-mode                          none
        charging-vector-mode                    pass
        charging-function-address-mode          pass
        ccf-address                             
        ecf-address                             
        implicit-service-route                  disabled
        rfc2833-payload                         101
        rfc2833-mode                            transparent
        constraint-name                         
        response-map                            
        local-response-map                      
        sec-agree-feature                       disabled
        sec-agree-pref                          ipsec3gpp
        enforcement-profile                     
        route-unauthorized-calls                
        tcp-keepalive                           none
        add-sdp-invite                          disabled
        p-early-media-header                    disabled
        p-early-media-direction                 
        add-sdp-profiles                        
        manipulation-string                     
        manipulation-pattern                    
        sip-profile                             
        sip-isup-profile                        
        tcp-conn-dereg                          0
        tunnel-name                             
        register-keep-alive                     none
        kpml-interworking                       disabled
        msrp-delay-egress-bye                   disabled
        send-380-response                       
        pcscf-restoration                       
        session-timer-profile                   
        session-recording-server                
        session-recording-required              disabled
        service-tag                             
        reg-cache-route                         disabled
        diversion-info-mapping-mode             none
        atcf-icsi-match                         
        sip-recursion-policy                    
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:45

(session-router)# session-agent
(session-agent)# hostname 10.80.1.211
(session-agent)# ip-address 10.80.1.211
(session-agent)# port 5060
(session-agent)# state enabled
(session-agent)# realm-id csm
(session-agent)# egress-realm-id
% Invalid number of arguments
(session-agent)# trust-me enabled
(session-agent)# done
session-agent
        hostname                                10.80.1.211
        ip-address                              10.80.1.211
        port                                    5060
        state                                   enabled
        app-protocol                            SIP
        app-type                                
        transport-method                        UDP
        realm-id                                csm
        egress-realm-id                         
        description                             
        carriers                                
        allow-next-hop-lp                       enabled
        constraints                             disabled
        max-sessions                            0
        max-inbound-sessions                    0
        max-outbound-sessions                   0
        max-burst-rate                          0
        max-inbound-burst-rate                  0
        max-outbound-burst-rate                 0
        max-sustain-rate                        0
        max-inbound-sustain-rate                0
        max-outbound-sustain-rate               0
        min-seizures                            5
        min-asr                                 0
        session-max-life-limit                  0
        time-to-resume                          0
        ttr-no-response                         0
        in-service-period                       0
        burst-rate-window                       0
        sustain-rate-window                     0
        req-uri-carrier-mode                    None
        proxy-mode                              
        redirect-action                         
        loose-routing                           enabled
        send-media-session                      enabled
        response-map                            
        ping-method                             
        ping-interval                           0
        ping-send-mode                          keep-alive
        ping-all-addresses                      disabled
        ping-in-service-response-codes          
        out-service-response-codes              
        load-balance-dns-query                  hunt
        options                                 
        spl-options                             
        media-profiles                          
        in-translationid                        
        out-translationid                       
        trust-me                                enabled
        request-uri-headers                     
        stop-recurse                            
        local-response-map                      
        ping-to-user-part                       
        ping-from-user-part                     
        in-manipulationid                       
        out-manipulationid                      
        manipulation-string                     
        manipulation-pattern                    
        p-asserted-id                           
        trunk-group                             
        max-register-sustain-rate               0
        early-media-allow                       
        invalidate-registrations                disabled
        rfc2833-mode                            none
        rfc2833-payload                         0
        codec-policy                            
        enforcement-profile                     
        refer-call-transfer                     disabled
        refer-notify-provisional                none
        reuse-connections                       NONE
        tcp-keepalive                           none
        tcp-reconn-interval                     0
        max-register-burst-rate                 0
        register-burst-window                   0
        sip-profile                             
        sip-isup-profile                        
        kpml-interworking                       inherit
        precedence                              0
        monitoring-filters                      
        session-recording-server                
        session-recording-required              disabled
        hold-refer-reinvite                     disabled
        send-tcp-fin                            disabled
        sip-recursion-policy                    
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:45

(session-agent)# exit
(session-router)# local-policy
(local-policy)# from-address *
(local-policy)# to-address *
(local-policy)# source-realm epc
(local-policy)# description EPC-&gt;SBC-&gt;CSM
(local-policy)# policy-attributes
(local-policy-attributes)# next-hop 10.80.1.211
(local-policy-attributes)# realm csm
(local-policy-attributes)# state enabled
(local-policy-attributes)# done
policy-attribute
        next-hop                                10.80.1.211
        realm                                   csm
        action                                  none
        terminate-recursion                     disabled
        carrier                                 
        start-time                              0000
        end-time                                2400
        days-of-week                            U-S
        cost                                    0
        state                                   enabled
        app-protocol                            
        methods                                 
        media-profiles                          
        lookup                                  single
        next-key                                
        eloc-str-lkup                           disabled
        eloc-str-match                          

(local-policy-attributes)# exit
(local-policy)# exit
Save Changes [y/n]?: y
local-policy
        from-address                            *
        to-address                              *
        source-realm                            epc
        description                             EPC-&gt;SBC-&gt;CSM
        activate-time                           
        deactivate-time                         
        state                                   enabled
        policy-priority                         none
        policy-attribute
                next-hop                                10.80.1.211
                realm                                   csm
                action                                  none
                terminate-recursion                     disabled
                carrier                                 
                start-time                              0000
                end-time                                2400
                days-of-week                            U-S
                cost                                    0
                state                                   enabled
                app-protocol                            
                methods                                 
                media-profiles                          
                lookup                                  single
                next-key                                
                eloc-str-lkup                           disabled
                eloc-str-match                          
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:53

(session-router)# exit
(configure)# media-manager
(media-manager)# realm-config
(realm-config)# identifier epc
(realm-config)# addr-prefix 0.0.0.0
(realm-config)# network-interfaces ext:0
(realm-config)# done
realm-config
        identifier                              epc
        description                             
        addr-prefix                             0.0.0.0
        network-interfaces                      ext:0
        mm-in-realm                             disabled
        mm-in-network                           enabled
        mm-same-ip                              enabled
        mm-in-system                            enabled
        bw-cac-non-mm                           disabled
        msm-release                             disabled
        qos-enable                              disabled
        max-bandwidth                           0
        fallback-bandwidth                      0
        max-priority-bandwidth                  0
        max-latency                             0
        max-jitter                              0
        max-packet-loss                         0
        observ-window-size                      0
        parent-realm                            
        dns-realm                               
        media-policy                            
        media-sec-policy                        
        srtp-msm-passthrough                    disabled
        class-profile                           
        in-translationid                        
        out-translationid</msg>
<status status="PASS" endtime="20180117 16:25:53.597" starttime="20180117 16:25:53.596"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>media-manager</arg>
</arguments>
<msg timestamp="20180117 16:25:53.611" level="INFO">in-manipulationid</msg>
<status status="PASS" endtime="20180117 16:25:53.611" starttime="20180117 16:25:53.598"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:53.612" level="INFO">out-manipulationid</msg>
<status status="PASS" endtime="20180117 16:25:53.613" starttime="20180117 16:25:53.611"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>latching enabled</arg>
</arguments>
<msg timestamp="20180117 16:25:53.614" level="INFO">average-rate-limit                      0</msg>
<status status="PASS" endtime="20180117 16:25:53.614" starttime="20180117 16:25:53.613"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>initial-guard-timer 300</arg>
</arguments>
<msg timestamp="20180117 16:25:53.615" level="INFO">access-control-trust-level              none</msg>
<status status="PASS" endtime="20180117 16:25:53.615" starttime="20180117 16:25:53.614"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>flow-time-limit 86400</arg>
</arguments>
<msg timestamp="20180117 16:25:53.616" level="INFO">invalid-signal-threshold                0</msg>
<status status="PASS" endtime="20180117 16:25:53.616" starttime="20180117 16:25:53.615"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>subsq-guard-timer 300</arg>
</arguments>
<msg timestamp="20180117 16:25:53.618" level="INFO">maximum-signal-threshold                0</msg>
<status status="PASS" endtime="20180117 16:25:53.618" starttime="20180117 16:25:53.617"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcp-flow-time-limit 86400</arg>
</arguments>
<msg timestamp="20180117 16:25:53.619" level="INFO">untrusted-signal-threshold              0</msg>
<status status="PASS" endtime="20180117 16:25:53.619" starttime="20180117 16:25:53.618"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcp-initial-guard-timer 300</arg>
</arguments>
<msg timestamp="20180117 16:25:53.620" level="INFO">nat-trust-threshold                     0</msg>
<status status="PASS" endtime="20180117 16:25:53.620" starttime="20180117 16:25:53.619"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20180117 16:25:53.621" level="INFO">max-endpoints-per-nat                   0</msg>
<status status="PASS" endtime="20180117 16:25:53.621" starttime="20180117 16:25:53.620"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:53.623" level="INFO">nat-invalid-message-threshold           0</msg>
<status status="PASS" endtime="20180117 16:25:53.623" starttime="20180117 16:25:53.622"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:53.624" level="INFO">wait-time-for-invalid-register          0</msg>
<status status="PASS" endtime="20180117 16:25:53.624" starttime="20180117 16:25:53.623"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20180117 16:25:53.625" level="INFO">deny-period                             30</msg>
<status status="PASS" endtime="20180117 16:25:53.626" starttime="20180117 16:25:53.624"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>save-config</arg>
</arguments>
<msg timestamp="20180117 16:25:53.627" level="INFO">session-max-life-limit                  0</msg>
<status status="PASS" endtime="20180117 16:25:53.627" starttime="20180117 16:25:53.626"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20180117 16:25:55.629" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20180117 16:25:55.629" starttime="20180117 16:25:53.629"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>reboot activate</arg>
</arguments>
<msg timestamp="20180117 16:25:55.630" level="INFO">cac-failure-threshold                   0</msg>
<status status="PASS" endtime="20180117 16:25:55.630" starttime="20180117 16:25:55.629"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:25:59.631" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:25:59.631" starttime="20180117 16:25:55.631"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>y</arg>
</arguments>
<msg timestamp="20180117 16:25:59.632" level="INFO">untrust-cac-failure-threshold           0</msg>
<status status="PASS" endtime="20180117 16:25:59.632" starttime="20180117 16:25:59.631"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**********Reboot Started**********</arg>
</arguments>
<msg timestamp="20180117 16:25:59.633" level="INFO">**********Reboot Started**********</msg>
<status status="PASS" endtime="20180117 16:25:59.633" starttime="20180117 16:25:59.632"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>50</arg>
</arguments>
<msg timestamp="20180117 16:26:49.633" level="INFO">Slept 50 seconds</msg>
<status status="PASS" endtime="20180117 16:26:49.633" starttime="20180117 16:25:59.633"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************** Configuration Completed ************</arg>
</arguments>
<msg timestamp="20180117 16:26:49.635" level="INFO">**************** Configuration Completed ************</msg>
<status status="PASS" endtime="20180117 16:26:49.635" starttime="20180117 16:26:49.634"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20180117 16:26:49.637" level="INFO">ext-policy-svr                          
        diam-e2-address-realm                   
        subscription-id-type                    END_USER_NONE
        symmetric-latching                      disabled
        pai-strip                               disabled
        trunk-context                           
        device-id                               
        early-media-allow                       
        enforcement-profile                     
        additional-prefixes                     
        restricted-latching                     none
        restriction-mask                        32
        user-cac-mode                           none
        user-cac-bandwidth                      0
        user-cac-sessions                       0
        icmp-detect-multiplier                  0
        icmp-advertisement-interval             0
        icmp-target-ip                          
        monthly-minutes                         0
        options                                 
        spl-options                             
        accounting-enable                       enabled
        net-management-control                  disabled
        delay-media-update                      disabled
        refer-call-transfer                     disabled
        hold-refer-reinvite                     disabled
        refer-notify-provisional                none
        dyn-refer-term                          disabled
        codec-policy                            
        codec-manip-in-realm                    disabled
        codec-manip-in-network                  enabled
        rtcp-policy                             
        constraint-name                         
        session-recording-server                
        session-recording-required              disabled
        manipulation-string                     
        manipulation-pattern                    
        stun-enable                             disabled
        stun-server-ip                          0.0.0.0
        stun-server-port                        3478
        stun-changed-ip                         0.0.0.0
        stun-changed-port                       3479
        sip-profile                             
        flow-time-limit                         -1
        initial-guard-timer                     -1
        subsq-guard-timer                       -1
        tcp-flow-time-limit                     -1
        tcp-initial-guard-timer                 -1
        tcp-subsq-guard-timer                   -1
        sip-isup-profile                        
        match-media-profiles                    
        qos-constraint                          
        block-rtcp                              disabled
        hide-egress-media-update                disabled
        tcp-media-profile                       
        monitoring-filters                      
        node-functionality                      
        default-location-string                 
        alt-family-realm                        
        pref-addr-type                          none
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:56

(realm-config)# identifier csm
(realm-config)# addr-prefix 0.0.0.0
(realm-config)# network-interfaces in:0
(realm-config)# done
realm-config
        identifier                              csm
        description                             
        addr-prefix                             0.0.0.0
        network-interfaces                      in:0
        mm-in-realm                             disabled
        mm-in-network                           enabled
        mm-same-ip                              enabled
        mm-in-system                            enabled
        bw-cac-non-mm                           disabled
        msm-release                             disabled
        qos-enable                              disabled
        max-bandwidth                           0
        fallback-bandwidth                      0
        max-priority-bandwidth                  0
        max-latency                             0
        max-jitter                              0
        max-packet-loss                         0
        observ-window-size                      0
        parent-realm                            
        dns-realm                               
        media-policy                            
        media-sec-policy                        
        srtp-msm-passthrough                    disabled
        class-profile                           
        in-translationid                        
        out-translationid                       
        in-manipulationid                       
        out-manipulationid                      
        average-rate-limit                      0
        access-control-trust-level              none
        invalid-signal-threshold                0
        maximum-signal-threshold                0
        untrusted-signal-threshold              0
        nat-trust-threshold                     0
        max-endpoints-per-nat                   0
        nat-invalid-message-threshold           0
        wait-time-for-invalid-register          0
        deny-period                             30
        session-max-life-limit                  0
        cac-failure-threshold                   0
        untrust-cac-failure-threshold           0
        ext-policy-svr                          
        diam-e2-address-realm                   
        subscription-id-type                    END_USER_NONE
        symmetric-latching                      disabled
        pai-strip                               disabled
        trunk-context                           
        device-id                               
        early-media-allow                       
        enforcement-profile                     
        additional-prefixes                     
        restricted-latching                     none
        restriction-mask                        32
        user-cac-mode                           none
        user-cac-bandwidth                      0
        user-cac-sessions                       0
        icmp-detect-multiplier                  0
        icmp-advertisement-interval             0
        icmp-target-ip                          
        monthly-minutes                         0
        options                                 
        spl-options                             
        accounting-enable                       enabled
        net-management-control                  disabled
        delay-media-update                      disabled
        refer-call-transfer                     disabled
        hold-refer-reinvite                     disabled
        refer-notify-provisional                none
        dyn-refer-term                          disabled
        codec-policy                            
        codec-manip-in-realm                    disabled
        codec-manip-in-network                  enabled
        rtcp-policy                             
        constraint-name                         
        session-recording-server                
        session-recording-required              disabled
        manipulation-string                     
        manipulation-pattern                    
        stun-enable                             disabled
        stun-server-ip                          0.0.0.0
        stun-server-port                        3478
        stun-changed-ip                         0.0.0.0
        stun-changed-port                       3479
        sip-profile                             
        flow-time-limit                         -1
        initial-guard-timer                     -1
        subsq-guard-timer                       -1
        tcp-flow-time-limit                     -1
        tcp-initial-guard-timer                 -1
        tcp-subsq-guard-timer                   -1
        sip-isup-profile                        
        match-media-profiles                    
        qos-constraint                          
        block-rtcp                              disabled
        hide-egress-media-update                disabled
        tcp-media-profile                       
        monitoring-filters                      
        node-functionality                      
        default-location-string                 
        alt-family-realm                        
        pref-addr-type                          none
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:56

(realm-config)# exit
(media-manager)# steering-pool
(steering-pool)# ip-address 10.80.1.48
(steering-pool)# start-port 10000
(steering-pool)# end-port 29999
(steering-pool)# realm-id epc
(steering-pool)# network-interface ext:0
(steering-pool)# done
steering-pool
        ip-address                              10.80.1.48
        start-port                              10000
        end-port                                29999
        realm-id                                epc
        network-interface                       ext:0
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:56

(steering-pool)# ip-address 10.80.1.47
(steering-pool)# start-port 30000
(steering-pool)# end-port 49999
(steering-pool)# realm-id csm
(steering-pool)# network-interface in:0
(steering-pool)# done
steering-pool
        ip-address                              10.80.1.47
        start-port                              30000
        end-port                                49999
        realm-id                                csm
        network-interface                       in:0
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:56

(steering-pool)# exit
(media-manager)# media-manager
(media-manager-config)# state enabled
(media-manager-config)# latching enabled
(media-manager-config)# initial-guard-timer 300
(media-manager-config)# flow-time-limit 86400
(media-manager-config)# subsq-guard-timer 300
(media-manager-config)# tcp-flow-time-limit 86400
(media-manager-config)# tcp-initial-guard-timer 300
(media-manager-config)# done
media-manager
        state                                   enabled
        latching                                enabled
        flow-time-limit                         86400
        initial-guard-timer                     300
        subsq-guard-timer                       300
        tcp-flow-time-limit                     86400
        tcp-initial-guard-timer                 300
        tcp-subsq-guard-timer                   300
        tcp-number-of-ports-per-flow            2
        hnt-rtcp                                disabled
        algd-log-level                          NOTICE
        mbcd-log-level                          NOTICE
        options                                 
        red-flow-port                           1985
        red-mgcp-port                           1986
        red-max-trans                           10000
        red-sync-start-time                     5000
        red-sync-comp-time                      1000
        media-policing                          enabled
        max-arp-rate                            10
        max-signaling-packets                   0
        max-untrusted-signaling                 100
        min-untrusted-signaling                 30
        tolerance-window                        30
        trap-on-demote-to-deny                  disabled
        trap-on-demote-to-untrusted             disabled
        syslog-on-demote-to-deny                disabled
        syslog-on-demote-to-untrusted           disabled
        rtcp-rate-limit                         0
        anonymous-sdp                           disabled
        rfc2833-timestamp                       disabled
        default-2833-duration                   100
        rfc2833-end-pkts-only-for-non-sig       enabled
        translate-non-rfc2833-event             disabled
        media-supervision-traps                 disabled
        dnsalg-server-failover                  disabled
        syslog-on-call-reject                   disabled
        xcode-fax-max-rate                      9600
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2018-01-17 16:22:56

(media-manager-config)# exit
(media-manager)# exit
(configure)# exit
# save-config
checking configuration
--------------------------------------------------------------------------------
Results of config verification:
   1 configuration error
Run 'verify-config' for more details
--------------------------------------------------------------------------------
Save-Config received, processing.
waiting for request to finish
Request to 'SAVE-CONFIG' has Finished, 
Save complete
Currently active and saved configurations do not match!
To sync &amp; activate, run 'activate-config' or 'reboot activate'.
# reboot activate

--------------------------------------------------------
WARNING: you are about to reboot this SBC!
--------------------------------------------------------

Reboot this SBC [y/n]?: y

Connection to 172.18.0.174 closed by remote host.
Connection to 172.18.0.174 closed.
[root@controller ~(keystone_admin)]#</msg>
<status status="PASS" endtime="20180117 16:26:49.638" starttime="20180117 16:26:49.636"></status>
</kw>
<status status="PASS" endtime="20180117 16:26:49.639" starttime="20180117 16:24:50.960"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60</arg>
</arguments>
<msg timestamp="20180117 16:27:49.640" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20180117 16:27:49.641" starttime="20180117 16:26:49.639"></status>
</kw>
<kw name="Reboot_loop" library="Oracle_SBC_Keywords">
<kw name="Get_SBC-IP" library="Oracle_SBC_Keywords">
<kw name="ImportDetails" library="Genric_Keywords">
<arguments>
<arg>C:\\xampp\\htdocs\\VNFXchange\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Server}</var>
</assign>
<kw name="Parseconfdata" library="Library">
<arguments>
<arg>${ConfigPath}</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Param}</var>
</assign>
<msg timestamp="20180117 16:27:49.649" level="INFO">@{Param} = [ "RedHat" | SBC_Oracle | sbc-oracle-img | qcow2 | /root/auto_heatfiles | bare | C:\xampp\htdocs\VNFXchange | nova:compute2 | default | TCP | Ingress | ipv4 | Oracle_SBC_Flavour_Template.txt | nnSCZ73...</msg>
<status status="PASS" endtime="20180117 16:27:49.650" starttime="20180117 16:27:49.646"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${server}</var>
</assign>
<msg timestamp="20180117 16:27:49.652" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20180117 16:27:49.652" starttime="20180117 16:27:49.650"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${VNFName}</var>
</assign>
<msg timestamp="20180117 16:27:49.654" level="INFO">${VNFName} = SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:27:49.654" starttime="20180117 16:27:49.653"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${ImageName}</var>
</assign>
<msg timestamp="20180117 16:27:49.656" level="INFO">${ImageName} = sbc-oracle-img</msg>
<status status="PASS" endtime="20180117 16:27:49.656" starttime="20180117 16:27:49.655"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${DiskFormat}</var>
</assign>
<msg timestamp="20180117 16:27:49.659" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20180117 16:27:49.659" starttime="20180117 16:27:49.657"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${ImageFilePath}</var>
</assign>
<msg timestamp="20180117 16:27:49.661" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20180117 16:27:49.662" starttime="20180117 16:27:49.660"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${ConatinerFormat}</var>
</assign>
<msg timestamp="20180117 16:27:49.664" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20180117 16:27:49.664" starttime="20180117 16:27:49.662"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>6</arg>
</arguments>
<assign>
<var>${FlavorP}</var>
</assign>
<msg timestamp="20180117 16:27:49.666" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20180117 16:27:49.666" starttime="20180117 16:27:49.665"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>7</arg>
</arguments>
<assign>
<var>${AvZone}</var>
</assign>
<msg timestamp="20180117 16:27:49.668" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20180117 16:27:49.668" starttime="20180117 16:27:49.667"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${Security}</var>
</assign>
<msg timestamp="20180117 16:27:49.670" level="INFO">${Security} = default</msg>
<status status="PASS" endtime="20180117 16:27:49.670" starttime="20180117 16:27:49.669"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${Protocol}</var>
</assign>
<msg timestamp="20180117 16:27:49.672" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20180117 16:27:49.672" starttime="20180117 16:27:49.671"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>10</arg>
</arguments>
<assign>
<var>${Direction}</var>
</assign>
<msg timestamp="20180117 16:27:49.673" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20180117 16:27:49.673" starttime="20180117 16:27:49.672"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>11</arg>
</arguments>
<assign>
<var>${Ethertype}</var>
</assign>
<msg timestamp="20180117 16:27:49.675" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20180117 16:27:49.675" starttime="20180117 16:27:49.674"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${FN}</var>
</assign>
<msg timestamp="20180117 16:27:49.676" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180117 16:27:49.676" starttime="20180117 16:27:49.675"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<assign>
<var>${ImageFileName}</var>
</assign>
<msg timestamp="20180117 16:27:49.677" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180117 16:27:49.677" starttime="20180117 16:27:49.677"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic1}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20180117 16:27:49.678" starttime="20180117 16:27:49.678"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic2}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20180117 16:27:49.679" starttime="20180117 16:27:49.679"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic3}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20180117 16:27:49.680" starttime="20180117 16:27:49.680"></status>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<doc>Splits the extension from the given path.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${FlavourName}</var>
<var>${Ext}</var>
</assign>
<msg timestamp="20180117 16:27:49.681" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<msg timestamp="20180117 16:27:49.682" level="INFO">${Ext} = txt</msg>
<status status="PASS" endtime="20180117 16:27:49.682" starttime="20180117 16:27:49.681"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFileName}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.683" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20180117 16:27:49.683" starttime="20180117 16:27:49.682"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.685" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20180117 16:27:49.685" starttime="20180117 16:27:49.684"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavourName}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.686" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20180117 16:27:49.687" starttime="20180117 16:27:49.685"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.688" level="INFO">${VNFName} = SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:27:49.688" starttime="20180117 16:27:49.687"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${server}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.690" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20180117 16:27:49.690" starttime="20180117 16:27:49.689"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageName}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.691" level="INFO">${ImageName} = sbc-oracle-img</msg>
<status status="PASS" endtime="20180117 16:27:49.691" starttime="20180117 16:27:49.690"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DiskFormat}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.693" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20180117 16:27:49.693" starttime="20180117 16:27:49.692"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFilePath}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.695" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20180117 16:27:49.695" starttime="20180117 16:27:49.694"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ConatinerFormat}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.696" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20180117 16:27:49.696" starttime="20180117 16:27:49.695"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavorP}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.698" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20180117 16:27:49.698" starttime="20180117 16:27:49.697"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AvZone}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.699" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20180117 16:27:49.700" starttime="20180117 16:27:49.698"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Security}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.701" level="INFO">${Security} = default</msg>
<status status="PASS" endtime="20180117 16:27:49.701" starttime="20180117 16:27:49.700"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Protocol}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.702" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20180117 16:27:49.702" starttime="20180117 16:27:49.701"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Direction}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.703" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20180117 16:27:49.703" starttime="20180117 16:27:49.702"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ethertype}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.704" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20180117 16:27:49.704" starttime="20180117 16:27:49.703"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic1}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:27:49.705" starttime="20180117 16:27:49.704"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic2}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:27:49.705" starttime="20180117 16:27:49.705"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.706" level="INFO">${VNFName} = SBC_Oracle</msg>
<status status="PASS" endtime="20180117 16:27:49.706" starttime="20180117 16:27:49.705"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic3}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:27:49.707" starttime="20180117 16:27:49.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${server}=="RedHat"</arg>
<arg>Return From Keyword</arg>
<arg>@{RedHat}</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>@{RedHat}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.708" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20180117 16:27:49.708" starttime="20180117 16:27:49.708"></status>
</kw>
<status status="PASS" endtime="20180117 16:27:49.708" starttime="20180117 16:27:49.707"></status>
</kw>
<msg timestamp="20180117 16:27:49.708" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20180117 16:27:49.709" starttime="20180117 16:27:49.643"></status>
</kw>
<kw name="Server_Login" library="Genric_Keywords">
<arguments>
<arg>@{Server}</arg>
</arguments>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${HOST}</var>
</assign>
<msg timestamp="20180117 16:27:49.710" level="INFO">${HOST} = 10.53.214.10</msg>
<status status="PASS" endtime="20180117 16:27:49.710" starttime="20180117 16:27:49.710"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${USERNAME}</var>
</assign>
<msg timestamp="20180117 16:27:49.711" level="INFO">${USERNAME} = root</msg>
<status status="PASS" endtime="20180117 16:27:49.711" starttime="20180117 16:27:49.710"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${PASSWORD}</var>
</assign>
<msg timestamp="20180117 16:27:49.712" level="INFO">${PASSWORD} = techm123</msg>
<status status="PASS" endtime="20180117 16:27:49.712" starttime="20180117 16:27:49.711"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<msg timestamp="20180117 16:27:49.713" level="INFO">${Index} = 3</msg>
<status status="PASS" endtime="20180117 16:27:49.713" starttime="20180117 16:27:49.713"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Login</arg>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180117 16:27:49.715" level="INFO">Logging into '10.53.214.10:22' as 'root'.</msg>
<msg timestamp="20180117 16:27:55.820" level="INFO">Read output: Last login: Wed Jan 17 05:48:25 2018 from 10.53.172.9
[root@controller ~]#</msg>
<status status="PASS" endtime="20180117 16:27:55.820" starttime="20180117 16:27:49.714"></status>
</kw>
<msg timestamp="20180117 16:27:55.821" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180117 16:27:55.821" starttime="20180117 16:27:49.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20180117 16:27:55.823" starttime="20180117 16:27:55.822"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20180117 16:27:55.825" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20180117 16:27:55.825" starttime="20180117 16:27:55.824"></status>
</kw>
<status status="PASS" endtime="20180117 16:27:55.825" starttime="20180117 16:27:49.712"></status>
</kw>
<status status="PASS" endtime="20180117 16:27:55.825" starttime="20180117 16:27:49.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation**********************</arg>
</arguments>
<msg timestamp="20180117 16:27:55.827" level="INFO">*****************ServerLogin_Validation**********************</msg>
<status status="PASS" endtime="20180117 16:27:55.827" starttime="20180117 16:27:55.826"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>ifconfig | grep inet</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ifconfig | grep inet</arg>
</arguments>
<msg timestamp="20180117 16:27:55.838" level="INFO">ifconfig | grep inet</msg>
<status status="PASS" endtime="20180117 16:27:55.838" starttime="20180117 16:27:55.829"></status>
</kw>
<status status="PASS" endtime="20180117 16:27:55.839" starttime="20180117 16:27:55.828"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:27:59.840" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:27:59.840" starttime="20180117 16:27:55.839"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:27:59.842" level="INFO">[01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::4d7:59ff:fe85:5f45  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.80.1.8  netmask 255.255.255.0  broadcast 10.80.1.255
        [01;31m[Kinet[m[K6 fe80::fc8a:54ff:fe8a:974e  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.81.1.8  netmask 255.255.255.0  broadcast 10.81.1.255
        [01;31m[Kinet[m[K6 fe80::283b:ecff:fee2:1e40  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.53.214.10  netmask 255.255.255.0  broadcast 10.53.214.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cc  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 127.0.0.1  netmask 255.0.0.0
        [01;31m[Kinet[m[K6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@controller ~]#</msg>
<msg timestamp="20180117 16:27:59.843" level="INFO">${output} =         [01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m...</msg>
<status status="PASS" endtime="20180117 16:27:59.843" starttime="20180117 16:27:59.841"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20180117 16:27:59.845" starttime="20180117 16:27:59.844"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation Completed**********************</arg>
</arguments>
<msg timestamp="20180117 16:27:59.846" level="INFO">*****************ServerLogin_Validation Completed**********************</msg>
<status status="PASS" endtime="20180117 16:27:59.847" starttime="20180117 16:27:59.846"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>source keystonerc_admin</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source keystonerc_admin</arg>
</arguments>
<msg timestamp="20180117 16:27:59.855" level="INFO">source keystonerc_admin</msg>
<status status="PASS" endtime="20180117 16:27:59.856" starttime="20180117 16:27:59.849"></status>
</kw>
<status status="PASS" endtime="20180117 16:27:59.856" starttime="20180117 16:27:59.847"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:27:59.857" level="INFO">[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:27:59.858" level="INFO">${output} = [root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:27:59.858" starttime="20180117 16:27:59.857"></status>
</kw>
<status status="PASS" endtime="20180117 16:27:59.859" starttime="20180117 16:27:49.709"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf value.txt</arg>
</arguments>
<msg timestamp="20180117 16:27:59.867" level="INFO">rm -rf value.txt</msg>
<status status="PASS" endtime="20180117 16:27:59.867" starttime="20180117 16:27:59.859"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}|awk -F "=" '{print $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</arg>
</arguments>
<msg timestamp="20180117 16:27:59.876" level="INFO">[root@controller ~(keystone_admin)]# nova list | grep -i SBC_Oracle|awk -F "=" ' {print $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</msg>
<status status="PASS" endtime="20180117 16:27:59.876" starttime="20180117 16:27:59.868"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20180117 16:28:03.877" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20180117 16:28:03.877" starttime="20180117 16:27:59.877"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:28:03.879" level="INFO">10.80.1.48
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:28:03.880" level="INFO">${output} =  10.80.1.48
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:28:03.880" starttime="20180117 16:28:03.878"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:28:03.882" level="INFO">${output} = [u'10.80.1.48', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180117 16:28:03.882" starttime="20180117 16:28:03.880"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${Proxy_IP}</var>
</assign>
<msg timestamp="20180117 16:28:03.884" level="INFO">${Proxy_IP} = 10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:28:03.885" starttime="20180117 16:28:03.883"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Proxy_IP}</arg>
</arguments>
<msg timestamp="20180117 16:28:03.887" level="INFO">${Proxy_IP} = 10.80.1.48</msg>
<status status="PASS" endtime="20180117 16:28:03.887" starttime="20180117 16:28:03.885"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20180117 16:28:03.899" level="INFO">nova list | grep -i SBC_Oracle| awk -F ";"  '{print $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20180117 16:28:03.900" starttime="20180117 16:28:03.888"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:28:08.901" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:28:08.901" starttime="20180117 16:28:03.900"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:28:08.903" level="INFO">172.18.0.174
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:28:08.903" level="INFO">${output} = 172.18.0.174
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20180117 16:28:08.904" starttime="20180117 16:28:08.902"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180117 16:28:08.906" level="INFO">${output} = [u'172.18.0.174', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20180117 16:28:08.906" starttime="20180117 16:28:08.904"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${MGmt_IP}</var>
</assign>
<msg timestamp="20180117 16:28:08.908" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:28:08.908" starttime="20180117 16:28:08.907"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MGmt_IP}</arg>
</arguments>
<msg timestamp="20180117 16:28:08.910" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:28:08.911" starttime="20180117 16:28:08.909"></status>
</kw>
<status status="PASS" endtime="20180117 16:28:08.911" starttime="20180117 16:27:49.642"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20180117 16:28:11.912" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20180117 16:28:11.912" starttime="20180117 16:28:08.912"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20180117 16:28:11.920" level="INFO">clear</msg>
<status status="PASS" endtime="20180117 16:28:11.921" starttime="20180117 16:28:11.913"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${i}</var>
</assign>
<msg timestamp="20180117 16:28:11.923" level="INFO">${i} = 0</msg>
<status status="PASS" endtime="20180117 16:28:11.923" starttime="20180117 16:28:11.922"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 250 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ping</arg>
<arg>-c 1</arg>
<arg>${MGmt_IP}</arg>
</arguments>
<assign>
<var>${store}</var>
</assign>
<msg timestamp="20180117 16:28:11.927" level="INFO">${store} = ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:28:11.928" starttime="20180117 16:28:11.925"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${store}</arg>
</arguments>
<msg timestamp="20180117 16:28:11.935" level="INFO">[H[J[root@controller ~(keystone_admin)]# ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:28:11.936" starttime="20180117 16:28:11.928"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:28:16.937" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:28:16.937" starttime="20180117 16:28:11.937"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20180117 16:28:16.939" level="INFO">PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.</msg>
<msg timestamp="20180117 16:28:16.940" level="INFO">${Output} = PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.
</msg>
<status status="PASS" endtime="20180117 16:28:16.940" starttime="20180117 16:28:16.938"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<msg timestamp="20180117 16:28:16.943" level="FAIL">'PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.
' does not contain 'ttl=64'</msg>
<status status="FAIL" endtime="20180117 16:28:16.944" starttime="20180117 16:28:16.942"></status>
</kw>
<msg timestamp="20180117 16:28:16.944" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20180117 16:28:16.944" starttime="20180117 16:28:16.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20180117 16:28:16.947" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20180117 16:28:16.947" starttime="20180117 16:28:16.946"></status>
</kw>
<status status="PASS" endtime="20180117 16:28:16.947" starttime="20180117 16:28:16.945"></status>
</kw>
<status status="PASS" endtime="20180117 16:28:16.947" starttime="20180117 16:28:11.924"></status>
</kw>
<kw type="foritem" name="${i} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ping</arg>
<arg>-c 1</arg>
<arg>${MGmt_IP}</arg>
</arguments>
<assign>
<var>${store}</var>
</assign>
<msg timestamp="20180117 16:28:16.949" level="INFO">${store} = ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:28:16.949" starttime="20180117 16:28:16.948"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${store}</arg>
</arguments>
<msg timestamp="20180117 16:28:16.956" level="INFO">ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:28:16.956" starttime="20180117 16:28:16.950"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:28:21.957" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:28:21.957" starttime="20180117 16:28:16.957"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20180117 16:28:21.959" level="INFO">--- 172.18.0.174 ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms

[root@controller ~(keystone_admin)]# ping -c 1 172.18.0.174
PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.</msg>
<msg timestamp="20180117 16:28:21.959" level="INFO">${Output} = 
--- 172.18.0.174 ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms

[root@controller ~(keystone_admin)]# ping -c 1 172.18.0.174
PING 172.18.0.174 (172.18.0.174) 5...</msg>
<status status="PASS" endtime="20180117 16:28:21.960" starttime="20180117 16:28:21.958"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<msg timestamp="20180117 16:28:21.963" level="FAIL">'
--- 172.18.0.174 ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms

[root@controller ~(keystone_admin)]# ping -c 1 172.18.0.174
PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.
' does not contain 'ttl=64'</msg>
<status status="FAIL" endtime="20180117 16:28:21.964" starttime="20180117 16:28:21.962"></status>
</kw>
<msg timestamp="20180117 16:28:21.964" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20180117 16:28:21.964" starttime="20180117 16:28:21.960"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20180117 16:28:21.967" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20180117 16:28:21.968" starttime="20180117 16:28:21.967"></status>
</kw>
<status status="PASS" endtime="20180117 16:28:21.968" starttime="20180117 16:28:21.965"></status>
</kw>
<status status="PASS" endtime="20180117 16:28:21.968" starttime="20180117 16:28:16.948"></status>
</kw>
<kw type="foritem" name="${i} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ping</arg>
<arg>-c 1</arg>
<arg>${MGmt_IP}</arg>
</arguments>
<assign>
<var>${store}</var>
</assign>
<msg timestamp="20180117 16:28:21.971" level="INFO">${store} = ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:28:21.971" starttime="20180117 16:28:21.969"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${store}</arg>
</arguments>
<msg timestamp="20180117 16:28:21.978" level="INFO">ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:28:21.979" starttime="20180117 16:28:21.972"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:28:26.980" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:28:26.980" starttime="20180117 16:28:21.979"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20180117 16:28:26.982" level="INFO">${Output} = </msg>
<status status="PASS" endtime="20180117 16:28:26.983" starttime="20180117 16:28:26.981"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<msg timestamp="20180117 16:28:26.986" level="FAIL">'' does not contain 'ttl=64'</msg>
<status status="FAIL" endtime="20180117 16:28:26.987" starttime="20180117 16:28:26.985"></status>
</kw>
<msg timestamp="20180117 16:28:26.987" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20180117 16:28:26.987" starttime="20180117 16:28:26.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20180117 16:28:26.990" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20180117 16:28:26.991" starttime="20180117 16:28:26.990"></status>
</kw>
<status status="PASS" endtime="20180117 16:28:26.991" starttime="20180117 16:28:26.988"></status>
</kw>
<status status="PASS" endtime="20180117 16:28:26.991" starttime="20180117 16:28:21.969"></status>
</kw>
<kw type="foritem" name="${i} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ping</arg>
<arg>-c 1</arg>
<arg>${MGmt_IP}</arg>
</arguments>
<assign>
<var>${store}</var>
</assign>
<msg timestamp="20180117 16:28:26.993" level="INFO">${store} = ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:28:26.993" starttime="20180117 16:28:26.992"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${store}</arg>
</arguments>
<msg timestamp="20180117 16:28:27.000" level="INFO">ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20180117 16:28:27.000" starttime="20180117 16:28:26.994"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20180117 16:28:32.001" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20180117 16:28:32.001" starttime="20180117 16:28:27.000"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20180117 16:28:32.003" level="INFO">--- 172.18.0.174 ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms

[root@controller ~(keystone_admin)]# ping -c 1 172.18.0.174
PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.
64 bytes from 172.18.0.174: icmp_seq=1 ttl=64 time=2.57 ms

--- 172.18.0.174 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 2.579/2.579/2.579/0.000 ms
[root@controller ~(keystone_admin)]# ping -c 1 172.18.0.174
PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.
64 bytes from 172.18.0.174: icmp_seq=1 ttl=64 time=2.24 ms

--- 172.18.0.174 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 2.246/2.246/2.246/0.000 ms
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20180117 16:28:32.004" level="INFO">${Output} = 
--- 172.18.0.174 ping statistics ---
1 packets transmitted, 0 received, 100% packet loss, time 0ms

[root@controller ~(keystone_admin)]# ping -c 1 172.18.0.174
PING 172.18.0.174 (172.18.0.174) 5...</msg>
<status status="PASS" endtime="20180117 16:28:32.004" starttime="20180117 16:28:32.002"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<status status="PASS" endtime="20180117 16:28:32.007" starttime="20180117 16:28:32.006"></status>
</kw>
<msg timestamp="20180117 16:28:32.007" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180117 16:28:32.008" starttime="20180117 16:28:32.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20180117 16:28:32.009" starttime="20180117 16:28:32.008"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20180117 16:28:32.011" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20180117 16:28:32.011" starttime="20180117 16:28:32.010"></status>
</kw>
<status status="PASS" endtime="20180117 16:28:32.011" starttime="20180117 16:28:26.991"></status>
</kw>
<status status="PASS" endtime="20180117 16:28:32.011" starttime="20180117 16:28:11.923"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Reboot Completed,Server is UP...............!</arg>
</arguments>
<msg timestamp="20180117 16:28:32.013" level="INFO">Reboot Completed,Server is UP...............!</msg>
<status status="PASS" endtime="20180117 16:28:32.013" starttime="20180117 16:28:32.012"></status>
</kw>
<status status="PASS" endtime="20180117 16:28:32.013" starttime="20180117 16:27:49.641"></status>
</kw>
<status status="PASS" endtime="20180117 16:28:32.014" starttime="20180117 16:20:11.224"></status>
</kw>
<kw name="Print Logger" library="Library">
<arguments>
<arg>*******SBC Configuration Done*******</arg>
</arguments>
<status status="PASS" endtime="20180117 16:28:32.019" starttime="20180117 16:28:32.017"></status>
</kw>
<kw type="teardown" name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20180117 16:28:32.260" starttime="20180117 16:28:32.020"></status>
</kw>
<doc>Verify the Cloud environment (RHOSP) before we start Onboarding of VNF VM’s process.</doc>
<tags>
<tag>Onboard</tag>
</tags>
<status status="PASS" endtime="20180117 16:28:32.262" critical="yes" starttime="20180117 16:16:41.079"></status>
</test>
<status status="PASS" endtime="20180117 16:28:32.269" starttime="20180117 16:16:40.417"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="1">Critical Tests</stat>
<stat fail="0" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">Onboard</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="SBC Onboarding TestCases" pass="1">SBC Onboarding TestCases</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
